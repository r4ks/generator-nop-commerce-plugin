// Generated from .\CSharpParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CSharpParserListener from './CSharpParserListener.js';
import CSharpParserVisitor from './CSharpParserVisitor.js';

const serializedATN = [4,1,198,2644,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,1,0,3,0,438,8,0,1,0,3,0,
441,8,0,1,0,3,0,444,8,0,1,0,5,0,447,8,0,10,0,12,0,450,9,0,1,0,3,0,453,8,
0,1,0,1,0,1,1,1,1,3,1,459,8,1,1,1,3,1,462,8,1,1,1,1,1,1,1,3,1,467,8,1,5,
1,469,8,1,10,1,12,1,472,9,1,1,2,1,2,1,2,1,2,5,2,478,8,2,10,2,12,2,481,9,
2,1,3,1,3,1,3,1,3,1,3,3,3,488,8,3,1,4,1,4,1,4,1,4,4,4,494,8,4,11,4,12,4,
495,1,4,1,4,1,5,1,5,3,5,502,8,5,1,6,1,6,3,6,506,8,6,1,7,1,7,1,7,3,7,511,
8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,3,10,521,8,10,1,11,1,11,1,11,1,11,
5,11,527,8,11,10,11,12,11,530,9,11,1,11,1,11,1,12,1,12,1,12,5,12,537,8,12,
10,12,12,12,540,9,12,1,13,1,13,1,13,3,13,545,8,13,1,13,3,13,548,8,13,1,13,
1,13,3,13,552,8,13,1,13,1,13,1,14,1,14,1,14,1,14,3,14,560,8,14,1,15,1,15,
1,15,3,15,565,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,575,8,16,
1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,588,8,17,1,18,
1,18,1,18,1,18,1,18,1,18,3,18,596,8,18,1,19,1,19,1,19,1,19,3,19,602,8,19,
3,19,604,8,19,1,20,1,20,1,20,5,20,609,8,20,10,20,12,20,612,9,20,1,21,1,21,
1,21,5,21,617,8,21,10,21,12,21,620,9,21,1,22,1,22,1,22,5,22,625,8,22,10,
22,12,22,628,9,22,1,23,1,23,1,23,5,23,633,8,23,10,23,12,23,636,9,23,1,24,
1,24,1,24,5,24,641,8,24,10,24,12,24,644,9,24,1,25,1,25,1,25,5,25,649,8,25,
10,25,12,25,652,9,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,661,8,26,10,
26,12,26,664,9,26,1,27,1,27,1,27,3,27,669,8,27,1,27,5,27,672,8,27,10,27,
12,27,675,9,27,1,28,1,28,1,28,5,28,680,8,28,10,28,12,28,683,9,28,1,29,1,
29,1,29,5,29,688,8,29,10,29,12,29,691,9,29,1,30,1,30,1,30,1,30,1,30,3,30,
698,8,30,3,30,700,8,30,1,30,3,30,703,8,30,1,31,1,31,1,31,5,31,708,8,31,10,
31,12,31,711,9,31,1,32,1,32,3,32,715,8,32,1,32,1,32,1,32,1,33,1,33,3,33,
722,8,33,1,33,1,33,3,33,726,8,33,3,33,728,8,33,1,34,1,34,1,34,1,34,1,34,
1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,756,8,34,1,35,1,35,3,35,760,8,35,1,
35,5,35,763,8,35,10,35,12,35,766,9,35,1,35,3,35,769,8,35,1,35,1,35,1,35,
1,35,1,35,1,35,3,35,777,8,35,1,35,3,35,780,8,35,1,35,5,35,783,8,35,10,35,
12,35,786,9,35,1,35,3,35,789,8,35,5,35,791,8,35,10,35,12,35,794,9,35,1,36,
1,36,1,36,3,36,799,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
1,36,1,36,3,36,813,8,36,1,36,1,36,1,36,1,36,3,36,819,8,36,1,36,1,36,1,36,
1,36,1,36,1,36,1,36,1,36,5,36,829,8,36,10,36,12,36,832,9,36,1,36,3,36,835,
8,36,1,36,4,36,838,8,36,11,36,12,36,839,1,36,1,36,3,36,844,8,36,1,36,1,36,
1,36,1,36,3,36,850,8,36,1,36,1,36,1,36,1,36,4,36,856,8,36,11,36,12,36,857,
1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,867,8,36,1,36,1,36,1,36,1,36,1,36,
1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,885,8,36,1,36,
3,36,888,8,36,1,36,1,36,1,36,3,36,893,8,36,1,36,3,36,896,8,36,1,36,1,36,
1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,909,8,36,10,36,12,36,912,
9,36,1,36,1,36,1,36,3,36,917,8,36,1,37,1,37,3,37,921,8,37,1,38,1,38,1,38,
1,39,3,39,927,8,39,1,39,1,39,1,39,3,39,932,8,39,1,40,3,40,935,8,40,1,40,
1,40,1,40,1,40,5,40,941,8,40,10,40,12,40,944,9,40,1,40,1,40,1,41,1,41,1,
41,3,41,951,8,41,1,41,1,41,1,42,1,42,1,43,1,43,1,43,5,43,960,8,43,10,43,
12,43,963,9,43,1,44,1,44,3,44,967,8,44,1,45,1,45,1,45,3,45,972,8,45,3,45,
974,8,45,1,45,1,45,1,46,1,46,1,46,5,46,981,8,46,10,46,12,46,984,9,46,1,47,
1,47,1,47,1,47,1,47,3,47,991,8,47,1,47,1,47,1,47,1,48,1,48,3,48,998,8,48,
1,49,1,49,1,49,1,49,5,49,1004,8,49,10,49,12,49,1007,9,49,1,49,3,49,1010,
8,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,3,50,1019,8,50,1,51,1,51,1,51,3,
51,1024,8,51,3,51,1026,8,51,1,51,1,51,1,52,1,52,1,52,5,52,1033,8,52,10,52,
12,52,1036,9,52,1,53,1,53,1,53,1,53,1,53,3,53,1043,8,53,1,54,1,54,3,54,1047,
8,54,1,54,1,54,1,54,3,54,1052,8,54,3,54,1054,8,54,1,54,1,54,1,54,3,54,1059,
8,54,5,54,1061,8,54,10,54,12,54,1064,9,54,1,55,1,55,5,55,1068,8,55,10,55,
12,55,1071,9,55,1,55,1,55,1,56,1,56,1,56,5,56,1078,8,56,10,56,12,56,1081,
9,56,1,56,3,56,1084,8,56,1,56,3,56,1087,8,56,1,56,3,56,1090,8,56,1,57,1,
57,1,57,1,57,5,57,1096,8,57,10,57,12,57,1099,9,57,1,57,1,57,1,58,1,58,1,
58,1,58,1,59,3,59,1108,8,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,
1,60,1,60,1,60,1,60,1,60,1,60,3,60,1125,8,60,1,61,1,61,1,61,5,61,1130,8,
61,10,61,12,61,1133,9,61,1,62,3,62,1136,8,62,1,62,1,62,1,62,1,63,1,63,1,
63,5,63,1144,8,63,10,63,12,63,1147,9,63,1,64,1,64,3,64,1151,8,64,1,65,1,
65,1,65,1,66,1,66,3,66,1158,8,66,1,66,1,66,1,66,1,66,1,67,5,67,1165,8,67,
10,67,12,67,1168,9,67,1,67,1,67,3,67,1172,8,67,1,68,1,68,1,68,1,68,1,68,
3,68,1179,8,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,3,71,1191,
8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1202,8,71,1,72,1,
72,1,72,1,72,5,72,1208,8,72,10,72,12,72,1211,9,72,1,73,1,73,3,73,1215,8,
73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1224,8,74,1,75,1,75,1,75,1,75,
1,76,1,76,1,76,3,76,1233,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1242,
8,77,1,78,1,78,1,78,1,79,3,79,1248,8,79,1,79,1,79,1,79,3,79,1253,8,79,1,
79,1,79,3,79,1257,8,79,1,79,1,79,3,79,1261,8,79,1,80,1,80,3,80,1265,8,80,
1,80,1,80,3,80,1269,8,80,1,81,1,81,1,81,1,81,1,81,3,81,1276,8,81,1,82,1,
82,1,82,1,82,1,83,1,83,3,83,1284,8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
1,84,1,84,1,84,1,84,3,84,1297,8,84,1,84,1,84,1,84,1,84,1,84,1,84,5,84,1305,
8,84,10,84,12,84,1308,9,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1329,8,84,1,84,1,
84,3,84,1333,8,84,1,84,1,84,3,84,1337,8,84,1,84,1,84,1,84,3,84,1342,8,84,
1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
84,1,84,1,84,1,84,3,84,1362,8,84,1,84,1,84,1,84,3,84,1367,8,84,1,84,1,84,
1,84,3,84,1372,8,84,1,84,1,84,1,84,1,84,1,84,3,84,1379,8,84,1,84,3,84,1382,
8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1404,8,84,1,84,1,84,1,84,1,84,1,84,
1,84,1,84,1,84,1,84,1,84,3,84,1416,8,84,1,85,1,85,3,85,1420,8,85,1,85,1,
85,1,86,1,86,1,86,1,86,3,86,1428,8,86,1,86,1,86,1,86,1,86,1,86,1,86,5,86,
1436,8,86,10,86,12,86,1439,9,86,1,86,1,86,1,86,1,86,3,86,1445,8,86,1,87,
1,87,3,87,1449,8,87,1,88,1,88,1,88,3,88,1454,8,88,1,88,3,88,1457,8,88,1,
89,1,89,1,89,3,89,1462,8,89,1,90,1,90,1,90,1,90,1,91,1,91,3,91,1470,8,91,
1,92,4,92,1473,8,92,11,92,12,92,1474,1,92,1,92,1,93,1,93,1,93,3,93,1482,
8,93,1,93,1,93,1,93,1,93,3,93,1488,8,93,1,94,1,94,1,94,1,95,4,95,1494,8,
95,11,95,12,95,1495,1,96,1,96,1,96,1,96,5,96,1502,8,96,10,96,12,96,1505,
9,96,3,96,1507,8,96,1,97,1,97,1,97,5,97,1512,8,97,10,97,12,97,1515,9,97,
1,98,1,98,5,98,1519,8,98,10,98,12,98,1522,9,98,1,98,3,98,1525,8,98,1,98,
3,98,1528,8,98,1,99,1,99,1,99,1,99,3,99,1534,8,99,1,99,1,99,3,99,1538,8,
99,1,99,1,99,1,100,1,100,3,100,1544,8,100,1,100,1,100,1,101,1,101,1,101,
1,101,1,101,1,102,1,102,1,102,1,103,1,103,3,103,1558,8,103,1,104,1,104,1,
104,1,104,3,104,1564,8,104,1,105,1,105,1,105,5,105,1569,8,105,10,105,12,
105,1572,9,105,1,106,1,106,3,106,1576,8,106,1,106,3,106,1579,8,106,1,106,
3,106,1582,8,106,1,106,1,106,1,107,4,107,1587,8,107,11,107,12,107,1588,1,
108,1,108,1,108,1,108,1,108,1,109,4,109,1597,8,109,11,109,12,109,1598,1,
110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,
110,1,110,1,110,3,110,1616,8,110,1,111,4,111,1619,8,111,11,111,12,111,1620,
1,112,1,112,3,112,1625,8,112,1,113,3,113,1628,8,113,1,113,3,113,1631,8,113,
1,113,1,113,1,113,1,113,1,113,3,113,1638,8,113,1,114,1,114,1,114,1,114,3,
114,1644,8,114,1,115,1,115,1,115,1,115,5,115,1650,8,115,10,115,12,115,1653,
9,115,1,115,1,115,1,116,3,116,1658,8,116,1,116,1,116,1,117,1,117,1,117,1,
117,5,117,1666,8,117,10,117,12,117,1669,9,117,1,118,1,118,1,118,5,118,1674,
8,118,10,118,12,118,1677,9,118,1,119,4,119,1680,8,119,11,119,12,119,1681,
1,120,1,120,1,120,1,120,1,120,1,121,1,121,1,121,1,121,3,121,1693,8,121,1,
121,1,121,3,121,1697,8,121,3,121,1699,8,121,1,122,1,122,1,122,3,122,1704,
8,122,1,122,1,122,3,122,1708,8,122,1,123,1,123,1,123,5,123,1713,8,123,10,
123,12,123,1716,9,123,1,124,1,124,1,124,1,124,1,125,1,125,3,125,1724,8,125,
1,125,1,125,1,126,4,126,1729,8,126,11,126,12,126,1730,1,127,3,127,1734,8,
127,1,127,3,127,1737,8,127,1,127,1,127,3,127,1741,8,127,1,128,4,128,1744,
8,128,11,128,12,128,1745,1,129,1,129,1,130,1,130,1,130,1,130,1,130,1,130,
1,130,1,130,1,130,3,130,1759,8,130,1,130,1,130,1,130,1,130,1,130,1,130,1,
130,1,130,3,130,1769,8,130,1,131,1,131,1,131,1,131,1,131,3,131,1776,8,131,
1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,1788,8,
131,1,132,1,132,1,132,5,132,1793,8,132,10,132,12,132,1796,9,132,1,133,1,
133,1,133,1,133,1,134,1,134,1,134,5,134,1805,8,134,10,134,12,134,1808,9,
134,1,135,1,135,1,135,3,135,1813,8,135,1,136,1,136,3,136,1817,8,136,1,137,
1,137,3,137,1821,8,137,1,138,1,138,1,139,1,139,3,139,1827,8,139,1,140,1,
140,1,140,1,140,3,140,1833,8,140,3,140,1835,8,140,1,141,1,141,1,141,5,141,
1840,8,141,10,141,12,141,1843,9,141,1,142,3,142,1846,8,142,1,142,3,142,1849,
8,142,1,142,1,142,3,142,1853,8,142,1,143,1,143,1,143,1,143,1,143,1,143,1,
143,1,143,3,143,1863,8,143,1,144,3,144,1866,8,144,1,144,1,144,1,144,1,144,
1,145,3,145,1873,8,145,1,145,3,145,1876,8,145,1,145,1,145,1,145,3,145,1881,
8,145,1,145,1,145,1,145,3,145,1886,8,145,3,145,1888,8,145,1,146,3,146,1891,
8,146,1,146,3,146,1894,8,146,1,146,1,146,1,146,1,147,3,147,1900,8,147,1,
147,3,147,1903,8,147,1,147,1,147,1,147,1,148,1,148,1,148,1,148,1,148,1,148,
1,148,3,148,1915,8,148,1,149,1,149,3,149,1919,8,149,1,150,3,150,1922,8,150,
1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,3,150,1932,8,150,1,151,3,
151,1935,8,151,1,151,1,151,1,151,1,152,3,152,1941,8,152,1,152,1,152,1,152,
1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,
1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,3,153,1968,8,
153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,155,3,
155,1981,8,155,1,155,1,155,1,156,1,156,3,156,1987,8,156,1,157,1,157,1,157,
1,158,1,158,5,158,1994,8,158,10,158,12,158,1997,9,158,1,158,1,158,1,159,
3,159,2002,8,159,1,159,3,159,2005,8,159,1,159,1,159,1,159,1,159,4,159,2011,
8,159,11,159,12,159,2012,1,159,1,159,3,159,2017,8,159,1,160,1,160,5,160,
2021,8,160,10,160,12,160,2024,9,160,1,160,4,160,2027,8,160,11,160,12,160,
2028,1,161,1,161,5,161,2033,8,161,10,161,12,161,2036,9,161,1,161,1,161,1,
162,1,162,1,162,1,162,5,162,2044,8,162,10,162,12,162,2047,9,162,1,162,3,
162,2050,8,162,3,162,2052,8,162,1,162,1,162,1,163,1,163,1,163,1,163,5,163,
2060,8,163,10,163,12,163,2063,9,163,1,163,1,163,1,164,3,164,2068,8,164,1,
164,3,164,2071,8,164,1,164,1,164,1,165,1,165,1,166,1,166,1,166,1,167,1,167,
5,167,2082,8,167,10,167,12,167,2085,9,167,1,167,1,167,1,168,3,168,2090,8,
168,1,168,3,168,2093,8,168,1,168,3,168,2096,8,168,1,168,1,168,1,168,1,168,
1,168,3,168,2103,8,168,1,168,1,168,1,168,3,168,2108,8,168,1,168,1,168,3,
168,2112,8,168,1,168,1,168,3,168,2116,8,168,1,168,1,168,1,168,1,168,1,168,
1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,2133,8,
168,1,168,3,168,2136,8,168,1,168,1,168,1,168,3,168,2141,8,168,1,168,1,168,
3,168,2145,8,168,1,168,1,168,3,168,2149,8,168,1,168,1,168,1,168,1,168,1,
168,1,168,1,168,3,168,2158,8,168,1,169,3,169,2161,8,169,1,169,1,169,1,169,
3,169,2166,8,169,1,169,1,169,3,169,2170,8,169,1,169,1,169,1,169,3,169,2175,
8,169,1,169,1,169,3,169,2179,8,169,3,169,2181,8,169,1,170,1,170,1,170,1,
171,1,171,1,171,1,171,5,171,2190,8,171,10,171,12,171,2193,9,171,1,171,3,
171,2196,8,171,3,171,2198,8,171,1,171,1,171,1,172,3,172,2203,8,172,1,172,
1,172,1,172,3,172,2208,8,172,1,173,1,173,1,173,1,173,1,173,3,173,2215,8,
173,1,173,1,173,1,174,1,174,3,174,2221,8,174,1,175,4,175,2224,8,175,11,175,
12,175,2225,1,176,1,176,1,176,1,176,3,176,2232,8,176,1,176,1,176,3,176,2236,
8,176,1,176,1,176,1,177,1,177,3,177,2242,8,177,1,178,1,178,1,178,5,178,2247,
8,178,10,178,12,178,2250,9,178,1,179,1,179,1,179,1,179,1,179,5,179,2257,
8,179,10,179,12,179,2260,9,179,3,179,2262,8,179,1,179,3,179,2265,8,179,1,
180,1,180,1,180,3,180,2270,8,180,1,180,1,180,1,181,1,181,3,181,2276,8,181,
1,181,1,181,5,181,2280,8,181,10,181,12,181,2283,9,181,1,181,1,181,1,181,
1,181,3,181,2289,8,181,1,182,1,182,1,182,5,182,2294,8,182,10,182,12,182,
2297,9,182,1,183,1,183,1,183,1,183,1,184,3,184,2304,8,184,1,184,1,184,3,
184,2308,8,184,1,185,1,185,1,185,1,185,1,185,1,186,1,186,1,186,1,186,1,186,
1,186,1,186,1,186,3,186,2323,8,186,1,186,1,186,3,186,2327,8,186,1,186,1,
186,1,186,1,186,1,186,5,186,2334,8,186,10,186,12,186,2337,9,186,1,186,3,
186,2340,8,186,1,186,1,186,3,186,2344,8,186,1,187,1,187,1,187,1,187,1,188,
1,188,1,188,1,188,1,189,1,189,1,189,1,189,1,190,1,190,1,190,1,190,1,190,
1,190,1,190,1,190,3,190,2366,8,190,1,191,1,191,1,192,1,192,1,192,1,192,3,
192,2374,8,192,1,193,1,193,5,193,2378,8,193,10,193,12,193,2381,9,193,1,193,
1,193,1,194,1,194,5,194,2387,8,194,10,194,12,194,2390,9,194,1,194,1,194,
1,195,1,195,1,195,1,195,3,195,2398,8,195,1,196,1,196,1,196,1,196,3,196,2404,
8,196,1,197,1,197,1,197,5,197,2409,8,197,10,197,12,197,2412,9,197,1,197,
1,197,4,197,2416,8,197,11,197,12,197,2417,3,197,2420,8,197,1,198,1,198,1,
199,1,199,1,199,3,199,2427,8,199,1,199,3,199,2430,8,199,1,199,3,199,2433,
8,199,1,199,1,199,3,199,2437,8,199,1,200,3,200,2440,8,200,1,200,1,200,1,
200,3,200,2445,8,200,1,200,3,200,2448,8,200,1,200,3,200,2451,8,200,1,200,
1,200,3,200,2455,8,200,1,201,1,201,1,201,3,201,2460,8,201,1,201,3,201,2463,
8,201,1,201,3,201,2466,8,201,1,201,1,201,3,201,2470,8,201,1,202,1,202,1,
202,3,202,2475,8,202,1,202,1,202,3,202,2479,8,202,1,203,1,203,1,203,1,203,
3,203,2485,8,203,1,203,1,203,3,203,2489,8,203,1,203,1,203,3,203,2493,8,203,
1,203,1,203,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
3,204,2507,8,204,1,205,1,205,1,205,1,206,1,206,1,206,1,206,1,206,1,206,1,
206,1,206,3,206,2520,8,206,1,206,1,206,1,206,1,206,3,206,2526,8,206,1,207,
1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,
1,208,1,208,1,208,1,208,3,208,2545,8,208,1,209,1,209,1,209,1,209,1,209,1,
209,1,210,1,210,1,210,3,210,2556,8,210,1,210,1,210,3,210,2560,8,210,1,210,
1,210,1,211,1,211,3,211,2566,8,211,1,211,1,211,3,211,2570,8,211,1,211,1,
211,3,211,2574,8,211,1,211,1,211,1,211,1,211,1,211,3,211,2581,8,211,1,212,
1,212,1,212,1,212,1,212,3,212,2588,8,212,1,212,3,212,2591,8,212,1,212,1,
212,5,212,2595,8,212,10,212,12,212,2598,9,212,1,213,1,213,1,213,1,213,3,
213,2604,8,213,1,213,1,213,1,213,3,213,2609,8,213,1,213,3,213,2612,8,213,
1,213,1,213,1,213,1,213,1,213,1,213,3,213,2620,8,213,1,214,1,214,1,214,1,
214,3,214,2626,8,214,1,215,1,215,3,215,2630,8,215,1,215,1,215,1,216,1,216,
3,216,2636,8,216,1,216,1,216,3,216,2640,8,216,1,217,1,217,1,217,0,0,218,
0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,
424,426,428,430,432,434,0,19,8,0,21,21,24,24,55,55,63,63,83,83,87,87,99,
100,104,104,2,0,34,34,45,45,3,0,54,54,72,72,80,80,1,0,156,157,2,0,146,147,
158,159,1,0,135,136,1,0,137,139,14,0,18,18,21,21,24,24,29,29,34,34,45,45,
55,55,63,63,68,68,83,83,87,87,91,91,99,100,104,104,2,0,14,14,32,32,2,0,15,
15,103,103,12,0,9,9,15,15,41,41,57,57,66,66,73,73,75,79,84,84,90,90,103,
103,107,107,109,109,2,0,40,40,53,53,2,0,17,17,94,94,2,0,137,137,148,148,
2,0,54,54,72,72,2,0,42,42,96,96,19,0,9,9,13,13,17,19,21,31,33,34,36,37,39,
47,50,50,52,57,59,59,62,63,65,68,70,70,72,74,76,80,82,84,87,105,107,109,
112,112,1,0,79,80,20,0,10,12,14,16,20,20,32,32,35,35,38,38,48,49,51,51,58,
58,60,61,64,64,69,69,71,71,75,75,81,81,85,86,102,102,106,106,110,111,113,
114,2914,0,437,1,0,0,0,2,461,1,0,0,0,4,473,1,0,0,0,6,487,1,0,0,0,8,489,1,
0,0,0,10,499,1,0,0,0,12,505,1,0,0,0,14,510,1,0,0,0,16,512,1,0,0,0,18,514,
1,0,0,0,20,520,1,0,0,0,22,522,1,0,0,0,24,533,1,0,0,0,26,544,1,0,0,0,28,559,
1,0,0,0,30,564,1,0,0,0,32,574,1,0,0,0,34,587,1,0,0,0,36,589,1,0,0,0,38,597,
1,0,0,0,40,605,1,0,0,0,42,613,1,0,0,0,44,621,1,0,0,0,46,629,1,0,0,0,48,637,
1,0,0,0,50,645,1,0,0,0,52,653,1,0,0,0,54,665,1,0,0,0,56,676,1,0,0,0,58,684,
1,0,0,0,60,692,1,0,0,0,62,704,1,0,0,0,64,712,1,0,0,0,66,727,1,0,0,0,68,755,
1,0,0,0,70,757,1,0,0,0,72,916,1,0,0,0,74,920,1,0,0,0,76,922,1,0,0,0,78,926,
1,0,0,0,80,934,1,0,0,0,82,950,1,0,0,0,84,954,1,0,0,0,86,956,1,0,0,0,88,966,
1,0,0,0,90,968,1,0,0,0,92,977,1,0,0,0,94,990,1,0,0,0,96,997,1,0,0,0,98,999,
1,0,0,0,100,1018,1,0,0,0,102,1020,1,0,0,0,104,1029,1,0,0,0,106,1042,1,0,
0,0,108,1044,1,0,0,0,110,1065,1,0,0,0,112,1074,1,0,0,0,114,1091,1,0,0,0,
116,1102,1,0,0,0,118,1107,1,0,0,0,120,1124,1,0,0,0,122,1126,1,0,0,0,124,
1135,1,0,0,0,126,1140,1,0,0,0,128,1150,1,0,0,0,130,1152,1,0,0,0,132,1155,
1,0,0,0,134,1166,1,0,0,0,136,1178,1,0,0,0,138,1180,1,0,0,0,140,1185,1,0,
0,0,142,1188,1,0,0,0,144,1203,1,0,0,0,146,1212,1,0,0,0,148,1223,1,0,0,0,
150,1225,1,0,0,0,152,1232,1,0,0,0,154,1241,1,0,0,0,156,1243,1,0,0,0,158,
1247,1,0,0,0,160,1268,1,0,0,0,162,1275,1,0,0,0,164,1277,1,0,0,0,166,1283,
1,0,0,0,168,1415,1,0,0,0,170,1417,1,0,0,0,172,1444,1,0,0,0,174,1448,1,0,
0,0,176,1450,1,0,0,0,178,1461,1,0,0,0,180,1463,1,0,0,0,182,1469,1,0,0,0,
184,1472,1,0,0,0,186,1487,1,0,0,0,188,1489,1,0,0,0,190,1493,1,0,0,0,192,
1506,1,0,0,0,194,1508,1,0,0,0,196,1527,1,0,0,0,198,1529,1,0,0,0,200,1541,
1,0,0,0,202,1547,1,0,0,0,204,1552,1,0,0,0,206,1557,1,0,0,0,208,1559,1,0,
0,0,210,1565,1,0,0,0,212,1573,1,0,0,0,214,1586,1,0,0,0,216,1590,1,0,0,0,
218,1596,1,0,0,0,220,1615,1,0,0,0,222,1618,1,0,0,0,224,1624,1,0,0,0,226,
1627,1,0,0,0,228,1639,1,0,0,0,230,1645,1,0,0,0,232,1657,1,0,0,0,234,1661,
1,0,0,0,236,1670,1,0,0,0,238,1679,1,0,0,0,240,1683,1,0,0,0,242,1698,1,0,
0,0,244,1707,1,0,0,0,246,1709,1,0,0,0,248,1717,1,0,0,0,250,1721,1,0,0,0,
252,1728,1,0,0,0,254,1733,1,0,0,0,256,1743,1,0,0,0,258,1747,1,0,0,0,260,
1768,1,0,0,0,262,1775,1,0,0,0,264,1789,1,0,0,0,266,1797,1,0,0,0,268,1801,
1,0,0,0,270,1809,1,0,0,0,272,1816,1,0,0,0,274,1820,1,0,0,0,276,1822,1,0,
0,0,278,1826,1,0,0,0,280,1834,1,0,0,0,282,1836,1,0,0,0,284,1852,1,0,0,0,
286,1862,1,0,0,0,288,1865,1,0,0,0,290,1872,1,0,0,0,292,1890,1,0,0,0,294,
1899,1,0,0,0,296,1914,1,0,0,0,298,1918,1,0,0,0,300,1921,1,0,0,0,302,1934,
1,0,0,0,304,1940,1,0,0,0,306,1967,1,0,0,0,308,1969,1,0,0,0,310,1976,1,0,
0,0,312,1986,1,0,0,0,314,1988,1,0,0,0,316,1991,1,0,0,0,318,2001,1,0,0,0,
320,2018,1,0,0,0,322,2030,1,0,0,0,324,2039,1,0,0,0,326,2055,1,0,0,0,328,
2067,1,0,0,0,330,2074,1,0,0,0,332,2076,1,0,0,0,334,2079,1,0,0,0,336,2089,
1,0,0,0,338,2160,1,0,0,0,340,2182,1,0,0,0,342,2185,1,0,0,0,344,2202,1,0,
0,0,346,2209,1,0,0,0,348,2220,1,0,0,0,350,2223,1,0,0,0,352,2227,1,0,0,0,
354,2241,1,0,0,0,356,2243,1,0,0,0,358,2251,1,0,0,0,360,2269,1,0,0,0,362,
2288,1,0,0,0,364,2290,1,0,0,0,366,2298,1,0,0,0,368,2307,1,0,0,0,370,2309,
1,0,0,0,372,2343,1,0,0,0,374,2345,1,0,0,0,376,2349,1,0,0,0,378,2353,1,0,
0,0,380,2365,1,0,0,0,382,2367,1,0,0,0,384,2373,1,0,0,0,386,2375,1,0,0,0,
388,2384,1,0,0,0,390,2397,1,0,0,0,392,2403,1,0,0,0,394,2405,1,0,0,0,396,
2421,1,0,0,0,398,2423,1,0,0,0,400,2439,1,0,0,0,402,2456,1,0,0,0,404,2471,
1,0,0,0,406,2480,1,0,0,0,408,2496,1,0,0,0,410,2508,1,0,0,0,412,2511,1,0,
0,0,414,2527,1,0,0,0,416,2532,1,0,0,0,418,2546,1,0,0,0,420,2552,1,0,0,0,
422,2563,1,0,0,0,424,2587,1,0,0,0,426,2599,1,0,0,0,428,2621,1,0,0,0,430,
2627,1,0,0,0,432,2633,1,0,0,0,434,2641,1,0,0,0,436,438,5,1,0,0,437,436,1,
0,0,0,437,438,1,0,0,0,438,440,1,0,0,0,439,441,3,214,107,0,440,439,1,0,0,
0,440,441,1,0,0,0,441,443,1,0,0,0,442,444,3,218,109,0,443,442,1,0,0,0,443,
444,1,0,0,0,444,448,1,0,0,0,445,447,3,346,173,0,446,445,1,0,0,0,447,450,
1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,
451,453,3,222,111,0,452,451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,
455,5,0,0,1,455,1,1,0,0,0,456,458,3,434,217,0,457,459,3,22,11,0,458,457,
1,0,0,0,458,459,1,0,0,0,459,462,1,0,0,0,460,462,3,228,114,0,461,456,1,0,
0,0,461,460,1,0,0,0,462,470,1,0,0,0,463,464,5,131,0,0,464,466,3,434,217,
0,465,467,3,22,11,0,466,465,1,0,0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,
463,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,3,1,0,0,
0,472,470,1,0,0,0,473,479,3,6,3,0,474,478,5,148,0,0,475,478,3,322,161,0,
476,478,5,137,0,0,477,474,1,0,0,0,477,475,1,0,0,0,477,476,1,0,0,0,478,481,
1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,5,1,0,0,0,481,479,1,0,0,0,482,
488,3,12,6,0,483,488,3,20,10,0,484,485,5,108,0,0,485,488,5,137,0,0,486,488,
3,8,4,0,487,482,1,0,0,0,487,483,1,0,0,0,487,484,1,0,0,0,487,486,1,0,0,0,
488,7,1,0,0,0,489,490,5,129,0,0,490,493,3,10,5,0,491,492,5,132,0,0,492,494,
3,10,5,0,493,491,1,0,0,0,494,495,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,
496,497,1,0,0,0,497,498,5,130,0,0,498,9,1,0,0,0,499,501,3,4,2,0,500,502,
3,434,217,0,501,500,1,0,0,0,501,502,1,0,0,0,502,11,1,0,0,0,503,506,3,14,
7,0,504,506,5,18,0,0,505,503,1,0,0,0,505,504,1,0,0,0,506,13,1,0,0,0,507,
511,3,16,8,0,508,511,3,18,9,0,509,511,5,29,0,0,510,507,1,0,0,0,510,508,1,
0,0,0,510,509,1,0,0,0,511,15,1,0,0,0,512,513,7,0,0,0,513,17,1,0,0,0,514,
515,7,1,0,0,515,19,1,0,0,0,516,521,3,2,1,0,517,521,5,68,0,0,518,521,5,35,
0,0,519,521,5,91,0,0,520,516,1,0,0,0,520,517,1,0,0,0,520,518,1,0,0,0,520,
519,1,0,0,0,521,21,1,0,0,0,522,523,5,146,0,0,523,528,3,4,2,0,524,525,5,132,
0,0,525,527,3,4,2,0,526,524,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,
529,1,0,0,0,529,531,1,0,0,0,530,528,1,0,0,0,531,532,5,147,0,0,532,23,1,0,
0,0,533,538,3,26,13,0,534,535,5,132,0,0,535,537,3,26,13,0,536,534,1,0,0,
0,537,540,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,25,1,0,0,0,540,538,
1,0,0,0,541,542,3,434,217,0,542,543,5,133,0,0,543,545,1,0,0,0,544,541,1,
0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,548,7,2,0,0,547,546,1,0,0,0,547,
548,1,0,0,0,548,551,1,0,0,0,549,552,5,106,0,0,550,552,3,4,2,0,551,549,1,
0,0,0,551,550,1,0,0,0,551,552,1,0,0,0,552,553,1,0,0,0,553,554,3,28,14,0,
554,27,1,0,0,0,555,560,3,32,16,0,556,560,3,30,15,0,557,558,5,80,0,0,558,
560,3,30,15,0,559,555,1,0,0,0,559,556,1,0,0,0,559,557,1,0,0,0,560,29,1,0,
0,0,561,565,3,118,59,0,562,565,3,130,65,0,563,565,3,36,18,0,564,561,1,0,
0,0,564,562,1,0,0,0,564,563,1,0,0,0,565,31,1,0,0,0,566,567,3,68,34,0,567,
568,3,34,17,0,568,569,3,28,14,0,569,575,1,0,0,0,570,571,3,68,34,0,571,572,
5,170,0,0,572,573,3,74,37,0,573,575,1,0,0,0,574,566,1,0,0,0,574,570,1,0,
0,0,575,33,1,0,0,0,576,588,5,145,0,0,577,588,5,160,0,0,578,588,5,161,0,0,
579,588,5,162,0,0,580,588,5,163,0,0,581,588,5,164,0,0,582,588,5,165,0,0,
583,588,5,166,0,0,584,588,5,167,0,0,585,588,5,169,0,0,586,588,3,378,189,
0,587,576,1,0,0,0,587,577,1,0,0,0,587,578,1,0,0,0,587,579,1,0,0,0,587,580,
1,0,0,0,587,581,1,0,0,0,587,582,1,0,0,0,587,583,1,0,0,0,587,584,1,0,0,0,
587,585,1,0,0,0,587,586,1,0,0,0,588,35,1,0,0,0,589,595,3,38,19,0,590,591,
5,148,0,0,591,592,3,74,37,0,592,593,5,133,0,0,593,594,3,74,37,0,594,596,
1,0,0,0,595,590,1,0,0,0,595,596,1,0,0,0,596,37,1,0,0,0,597,603,3,40,20,0,
598,601,5,150,0,0,599,602,3,38,19,0,600,602,3,76,38,0,601,599,1,0,0,0,601,
600,1,0,0,0,602,604,1,0,0,0,603,598,1,0,0,0,603,604,1,0,0,0,604,39,1,0,0,
0,605,610,3,42,21,0,606,607,5,154,0,0,607,609,3,42,21,0,608,606,1,0,0,0,
609,612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,41,1,0,0,0,612,610,1,
0,0,0,613,618,3,44,22,0,614,615,5,153,0,0,615,617,3,44,22,0,616,614,1,0,
0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,43,1,0,0,0,620,618,
1,0,0,0,621,626,3,46,23,0,622,623,5,141,0,0,623,625,3,46,23,0,624,622,1,
0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,45,1,0,0,0,628,
626,1,0,0,0,629,634,3,48,24,0,630,631,5,142,0,0,631,633,3,48,24,0,632,630,
1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,47,1,0,0,0,636,
634,1,0,0,0,637,642,3,50,25,0,638,639,5,140,0,0,639,641,3,50,25,0,640,638,
1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,0,642,643,1,0,0,0,643,49,1,0,0,0,644,
642,1,0,0,0,645,650,3,52,26,0,646,647,7,3,0,0,647,649,3,52,26,0,648,646,
1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,51,1,0,0,0,652,
650,1,0,0,0,653,662,3,54,27,0,654,655,7,4,0,0,655,661,3,54,27,0,656,657,
5,59,0,0,657,661,3,112,56,0,658,659,5,13,0,0,659,661,3,4,2,0,660,654,1,0,
0,0,660,656,1,0,0,0,660,658,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,
663,1,0,0,0,663,53,1,0,0,0,664,662,1,0,0,0,665,673,3,56,28,0,666,669,5,168,
0,0,667,669,3,376,188,0,668,666,1,0,0,0,668,667,1,0,0,0,669,670,1,0,0,0,
670,672,3,56,28,0,671,668,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,673,674,
1,0,0,0,674,55,1,0,0,0,675,673,1,0,0,0,676,681,3,58,29,0,677,678,7,5,0,0,
678,680,3,58,29,0,679,677,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,682,
1,0,0,0,682,57,1,0,0,0,683,681,1,0,0,0,684,689,3,60,30,0,685,686,7,6,0,0,
686,688,3,60,30,0,687,685,1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,689,690,
1,0,0,0,690,59,1,0,0,0,691,689,1,0,0,0,692,702,3,66,33,0,693,694,5,93,0,
0,694,699,5,125,0,0,695,697,3,62,31,0,696,698,5,132,0,0,697,696,1,0,0,0,
697,698,1,0,0,0,698,700,1,0,0,0,699,695,1,0,0,0,699,700,1,0,0,0,700,701,
1,0,0,0,701,703,5,126,0,0,702,693,1,0,0,0,702,703,1,0,0,0,703,61,1,0,0,0,
704,709,3,64,32,0,705,706,5,132,0,0,706,708,3,64,32,0,707,705,1,0,0,0,708,
711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,63,1,0,0,0,711,709,1,0,0,
0,712,714,3,28,14,0,713,715,3,188,94,0,714,713,1,0,0,0,714,715,1,0,0,0,715,
716,1,0,0,0,716,717,3,374,187,0,717,718,3,74,37,0,718,65,1,0,0,0,719,728,
3,68,34,0,720,722,3,68,34,0,721,720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,
0,0,723,725,5,171,0,0,724,726,3,68,34,0,725,724,1,0,0,0,725,726,1,0,0,0,
726,728,1,0,0,0,727,719,1,0,0,0,727,721,1,0,0,0,728,67,1,0,0,0,729,756,3,
70,35,0,730,731,5,135,0,0,731,756,3,68,34,0,732,733,5,136,0,0,733,756,3,
68,34,0,734,735,5,143,0,0,735,756,3,68,34,0,736,737,5,144,0,0,737,756,3,
68,34,0,738,739,5,151,0,0,739,756,3,68,34,0,740,741,5,152,0,0,741,756,3,
68,34,0,742,743,5,129,0,0,743,744,3,4,2,0,744,745,5,130,0,0,745,746,3,68,
34,0,746,756,1,0,0,0,747,748,5,16,0,0,748,756,3,68,34,0,749,750,5,140,0,
0,750,756,3,68,34,0,751,752,5,137,0,0,752,756,3,68,34,0,753,754,5,142,0,
0,754,756,3,68,34,0,755,729,1,0,0,0,755,730,1,0,0,0,755,732,1,0,0,0,755,
734,1,0,0,0,755,736,1,0,0,0,755,738,1,0,0,0,755,740,1,0,0,0,755,742,1,0,
0,0,755,747,1,0,0,0,755,749,1,0,0,0,755,751,1,0,0,0,755,753,1,0,0,0,756,
69,1,0,0,0,757,759,3,72,36,0,758,760,5,143,0,0,759,758,1,0,0,0,759,760,1,
0,0,0,760,764,1,0,0,0,761,763,3,80,40,0,762,761,1,0,0,0,763,766,1,0,0,0,
764,762,1,0,0,0,764,765,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,767,769,
5,143,0,0,768,767,1,0,0,0,768,769,1,0,0,0,769,792,1,0,0,0,770,777,3,78,39,
0,771,777,3,430,215,0,772,777,5,151,0,0,773,777,5,152,0,0,774,775,5,155,
0,0,775,777,3,434,217,0,776,770,1,0,0,0,776,771,1,0,0,0,776,772,1,0,0,0,
776,773,1,0,0,0,776,774,1,0,0,0,777,779,1,0,0,0,778,780,5,143,0,0,779,778,
1,0,0,0,779,780,1,0,0,0,780,784,1,0,0,0,781,783,3,80,40,0,782,781,1,0,0,
0,783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,788,1,0,0,0,786,784,
1,0,0,0,787,789,5,143,0,0,788,787,1,0,0,0,788,789,1,0,0,0,789,791,1,0,0,
0,790,776,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,71,
1,0,0,0,794,792,1,0,0,0,795,917,3,380,190,0,796,798,3,434,217,0,797,799,
3,22,11,0,798,797,1,0,0,0,798,799,1,0,0,0,799,917,1,0,0,0,800,801,5,129,
0,0,801,802,3,28,14,0,802,803,5,130,0,0,803,917,1,0,0,0,804,917,3,84,42,
0,805,917,3,228,114,0,806,917,5,115,0,0,807,917,5,94,0,0,808,818,5,17,0,
0,809,810,5,131,0,0,810,812,3,434,217,0,811,813,3,22,11,0,812,811,1,0,0,
0,812,813,1,0,0,0,813,819,1,0,0,0,814,815,5,127,0,0,815,816,3,86,43,0,816,
817,5,128,0,0,817,819,1,0,0,0,818,809,1,0,0,0,818,814,1,0,0,0,819,917,1,
0,0,0,820,849,5,66,0,0,821,843,3,4,2,0,822,844,3,432,216,0,823,844,3,88,
44,0,824,825,5,127,0,0,825,826,3,86,43,0,826,830,5,128,0,0,827,829,3,322,
161,0,828,827,1,0,0,0,829,832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,
834,1,0,0,0,832,830,1,0,0,0,833,835,3,324,162,0,834,833,1,0,0,0,834,835,
1,0,0,0,835,844,1,0,0,0,836,838,3,322,161,0,837,836,1,0,0,0,838,839,1,0,
0,0,839,837,1,0,0,0,839,840,1,0,0,0,840,841,1,0,0,0,841,842,3,324,162,0,
842,844,1,0,0,0,843,822,1,0,0,0,843,823,1,0,0,0,843,824,1,0,0,0,843,837,
1,0,0,0,844,850,1,0,0,0,845,850,3,102,51,0,846,847,3,322,161,0,847,848,3,
324,162,0,848,850,1,0,0,0,849,821,1,0,0,0,849,845,1,0,0,0,849,846,1,0,0,
0,850,917,1,0,0,0,851,852,5,129,0,0,852,855,3,26,13,0,853,854,5,132,0,0,
854,856,3,26,13,0,855,853,1,0,0,0,856,857,1,0,0,0,857,855,1,0,0,0,857,858,
1,0,0,0,858,859,1,0,0,0,859,860,5,130,0,0,860,917,1,0,0,0,861,862,5,98,0,
0,862,866,5,129,0,0,863,867,3,108,54,0,864,867,3,4,2,0,865,867,5,108,0,0,
866,863,1,0,0,0,866,864,1,0,0,0,866,865,1,0,0,0,867,868,1,0,0,0,868,917,
5,130,0,0,869,870,5,25,0,0,870,871,5,129,0,0,871,872,3,28,14,0,872,873,5,
130,0,0,873,917,1,0,0,0,874,875,5,101,0,0,875,876,5,129,0,0,876,877,3,28,
14,0,877,878,5,130,0,0,878,917,1,0,0,0,879,884,5,30,0,0,880,881,5,129,0,
0,881,882,3,4,2,0,882,883,5,130,0,0,883,885,1,0,0,0,884,880,1,0,0,0,884,
885,1,0,0,0,885,917,1,0,0,0,886,888,5,15,0,0,887,886,1,0,0,0,887,888,1,0,
0,0,888,889,1,0,0,0,889,895,5,31,0,0,890,892,5,129,0,0,891,893,3,122,61,
0,892,891,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,896,5,130,0,0,895,
890,1,0,0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,917,3,170,85,0,898,899,5,
88,0,0,899,900,5,129,0,0,900,901,3,4,2,0,901,902,5,130,0,0,902,917,1,0,0,
0,903,904,5,64,0,0,904,910,5,129,0,0,905,906,3,434,217,0,906,907,5,131,0,
0,907,909,1,0,0,0,908,905,1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,0,910,911,
1,0,0,0,911,913,1,0,0,0,912,910,1,0,0,0,913,914,3,434,217,0,914,915,5,130,
0,0,915,917,1,0,0,0,916,795,1,0,0,0,916,796,1,0,0,0,916,800,1,0,0,0,916,
804,1,0,0,0,916,805,1,0,0,0,916,806,1,0,0,0,916,807,1,0,0,0,916,808,1,0,
0,0,916,820,1,0,0,0,916,851,1,0,0,0,916,861,1,0,0,0,916,869,1,0,0,0,916,
874,1,0,0,0,916,879,1,0,0,0,916,887,1,0,0,0,916,898,1,0,0,0,916,903,1,0,
0,0,917,73,1,0,0,0,918,921,3,28,14,0,919,921,3,76,38,0,920,918,1,0,0,0,920,
919,1,0,0,0,921,75,1,0,0,0,922,923,5,95,0,0,923,924,3,28,14,0,924,77,1,0,
0,0,925,927,5,148,0,0,926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,
929,5,131,0,0,929,931,3,434,217,0,930,932,3,22,11,0,931,930,1,0,0,0,931,
932,1,0,0,0,932,79,1,0,0,0,933,935,5,148,0,0,934,933,1,0,0,0,934,935,1,0,
0,0,935,936,1,0,0,0,936,937,5,127,0,0,937,942,3,82,41,0,938,939,5,132,0,
0,939,941,3,82,41,0,940,938,1,0,0,0,941,944,1,0,0,0,942,940,1,0,0,0,942,
943,1,0,0,0,943,945,1,0,0,0,944,942,1,0,0,0,945,946,5,128,0,0,946,81,1,0,
0,0,947,948,3,434,217,0,948,949,5,133,0,0,949,951,1,0,0,0,950,947,1,0,0,
0,950,951,1,0,0,0,951,952,1,0,0,0,952,953,3,28,14,0,953,83,1,0,0,0,954,955,
7,7,0,0,955,85,1,0,0,0,956,961,3,28,14,0,957,958,5,132,0,0,958,960,3,28,
14,0,959,957,1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,962,
87,1,0,0,0,963,961,1,0,0,0,964,967,3,90,45,0,965,967,3,98,49,0,966,964,1,
0,0,0,966,965,1,0,0,0,967,89,1,0,0,0,968,973,5,125,0,0,969,971,3,92,46,0,
970,972,5,132,0,0,971,970,1,0,0,0,971,972,1,0,0,0,972,974,1,0,0,0,973,969,
1,0,0,0,973,974,1,0,0,0,974,975,1,0,0,0,975,976,5,126,0,0,976,91,1,0,0,0,
977,982,3,94,47,0,978,979,5,132,0,0,979,981,3,94,47,0,980,978,1,0,0,0,981,
984,1,0,0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,93,1,0,0,0,984,982,1,0,0,
0,985,991,3,434,217,0,986,987,5,127,0,0,987,988,3,28,14,0,988,989,5,128,
0,0,989,991,1,0,0,0,990,985,1,0,0,0,990,986,1,0,0,0,991,992,1,0,0,0,992,
993,5,145,0,0,993,994,3,96,48,0,994,95,1,0,0,0,995,998,3,28,14,0,996,998,
3,88,44,0,997,995,1,0,0,0,997,996,1,0,0,0,998,97,1,0,0,0,999,1000,5,125,
0,0,1000,1005,3,100,50,0,1001,1002,5,132,0,0,1002,1004,3,100,50,0,1003,1001,
1,0,0,0,1004,1007,1,0,0,0,1005,1003,1,0,0,0,1005,1006,1,0,0,0,1006,1009,
1,0,0,0,1007,1005,1,0,0,0,1008,1010,5,132,0,0,1009,1008,1,0,0,0,1009,1010,
1,0,0,0,1010,1011,1,0,0,0,1011,1012,5,126,0,0,1012,99,1,0,0,0,1013,1019,
3,30,15,0,1014,1015,5,125,0,0,1015,1016,3,86,43,0,1016,1017,5,126,0,0,1017,
1019,1,0,0,0,1018,1013,1,0,0,0,1018,1014,1,0,0,0,1019,101,1,0,0,0,1020,1025,
5,125,0,0,1021,1023,3,104,52,0,1022,1024,5,132,0,0,1023,1022,1,0,0,0,1023,
1024,1,0,0,0,1024,1026,1,0,0,0,1025,1021,1,0,0,0,1025,1026,1,0,0,0,1026,
1027,1,0,0,0,1027,1028,5,126,0,0,1028,103,1,0,0,0,1029,1034,3,106,53,0,1030,
1031,5,132,0,0,1031,1033,3,106,53,0,1032,1030,1,0,0,0,1033,1036,1,0,0,0,
1034,1032,1,0,0,0,1034,1035,1,0,0,0,1035,105,1,0,0,0,1036,1034,1,0,0,0,1037,
1043,3,70,35,0,1038,1039,3,434,217,0,1039,1040,5,145,0,0,1040,1041,3,28,
14,0,1041,1043,1,0,0,0,1042,1037,1,0,0,0,1042,1038,1,0,0,0,1043,107,1,0,
0,0,1044,1053,3,434,217,0,1045,1047,3,110,55,0,1046,1045,1,0,0,0,1046,1047,
1,0,0,0,1047,1054,1,0,0,0,1048,1049,5,149,0,0,1049,1051,3,434,217,0,1050,
1052,3,110,55,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,1054,1,0,0,0,1053,
1046,1,0,0,0,1053,1048,1,0,0,0,1054,1062,1,0,0,0,1055,1056,5,131,0,0,1056,
1058,3,434,217,0,1057,1059,3,110,55,0,1058,1057,1,0,0,0,1058,1059,1,0,0,
0,1059,1061,1,0,0,0,1060,1055,1,0,0,0,1061,1064,1,0,0,0,1062,1060,1,0,0,
0,1062,1063,1,0,0,0,1063,109,1,0,0,0,1064,1062,1,0,0,0,1065,1069,5,146,0,
0,1066,1068,5,132,0,0,1067,1066,1,0,0,0,1068,1071,1,0,0,0,1069,1067,1,0,
0,0,1069,1070,1,0,0,0,1070,1072,1,0,0,0,1071,1069,1,0,0,0,1072,1073,5,147,
0,0,1073,111,1,0,0,0,1074,1079,3,6,3,0,1075,1078,3,322,161,0,1076,1078,5,
137,0,0,1077,1075,1,0,0,0,1077,1076,1,0,0,0,1078,1081,1,0,0,0,1079,1077,
1,0,0,0,1079,1080,1,0,0,0,1080,1083,1,0,0,0,1081,1079,1,0,0,0,1082,1084,
5,148,0,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,1086,1,0,0,0,1085,1087,
3,114,57,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,1089,1,0,0,0,1088,1090,
3,434,217,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,113,1,0,0,0,1091,1092,
5,125,0,0,1092,1097,3,116,58,0,1093,1094,5,132,0,0,1094,1096,3,116,58,0,
1095,1093,1,0,0,0,1096,1099,1,0,0,0,1097,1095,1,0,0,0,1097,1098,1,0,0,0,
1098,1100,1,0,0,0,1099,1097,1,0,0,0,1100,1101,5,126,0,0,1101,115,1,0,0,0,
1102,1103,3,434,217,0,1103,1104,5,133,0,0,1104,1105,3,28,14,0,1105,117,1,
0,0,0,1106,1108,5,15,0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,
0,0,0,1109,1110,3,120,60,0,1110,1111,3,374,187,0,1111,1112,3,128,64,0,1112,
119,1,0,0,0,1113,1114,5,129,0,0,1114,1125,5,130,0,0,1115,1116,5,129,0,0,
1116,1117,3,122,61,0,1117,1118,5,130,0,0,1118,1125,1,0,0,0,1119,1120,5,129,
0,0,1120,1121,3,126,63,0,1121,1122,5,130,0,0,1122,1125,1,0,0,0,1123,1125,
3,434,217,0,1124,1113,1,0,0,0,1124,1115,1,0,0,0,1124,1119,1,0,0,0,1124,1123,
1,0,0,0,1125,121,1,0,0,0,1126,1131,3,124,62,0,1127,1128,5,132,0,0,1128,1130,
3,124,62,0,1129,1127,1,0,0,0,1130,1133,1,0,0,0,1131,1129,1,0,0,0,1131,1132,
1,0,0,0,1132,123,1,0,0,0,1133,1131,1,0,0,0,1134,1136,7,2,0,0,1135,1134,1,
0,0,0,1135,1136,1,0,0,0,1136,1137,1,0,0,0,1137,1138,3,4,2,0,1138,1139,3,
434,217,0,1139,125,1,0,0,0,1140,1145,3,434,217,0,1141,1142,5,132,0,0,1142,
1144,3,434,217,0,1143,1141,1,0,0,0,1144,1147,1,0,0,0,1145,1143,1,0,0,0,1145,
1146,1,0,0,0,1146,127,1,0,0,0,1147,1145,1,0,0,0,1148,1151,3,74,37,0,1149,
1151,3,170,85,0,1150,1148,1,0,0,0,1150,1149,1,0,0,0,1151,129,1,0,0,0,1152,
1153,3,132,66,0,1153,1154,3,134,67,0,1154,131,1,0,0,0,1155,1157,5,48,0,0,
1156,1158,3,4,2,0,1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,0,0,
1159,1160,3,434,217,0,1160,1161,5,54,0,0,1161,1162,3,28,14,0,1162,133,1,
0,0,0,1163,1165,3,136,68,0,1164,1163,1,0,0,0,1165,1168,1,0,0,0,1166,1164,
1,0,0,0,1166,1167,1,0,0,0,1167,1169,1,0,0,0,1168,1166,1,0,0,0,1169,1171,
3,148,74,0,1170,1172,3,150,75,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,
135,1,0,0,0,1173,1179,3,132,66,0,1174,1179,3,138,69,0,1175,1179,3,140,70,
0,1176,1179,3,142,71,0,1177,1179,3,144,72,0,1178,1173,1,0,0,0,1178,1174,
1,0,0,0,1178,1175,1,0,0,0,1178,1176,1,0,0,0,1178,1177,1,0,0,0,1179,137,1,
0,0,0,1180,1181,5,61,0,0,1181,1182,3,434,217,0,1182,1183,5,145,0,0,1183,
1184,3,28,14,0,1184,139,1,0,0,0,1185,1186,5,111,0,0,1186,1187,3,28,14,0,
1187,141,1,0,0,0,1188,1190,5,60,0,0,1189,1191,3,4,2,0,1190,1189,1,0,0,0,
1190,1191,1,0,0,0,1191,1192,1,0,0,0,1192,1193,3,434,217,0,1193,1194,5,54,
0,0,1194,1195,3,28,14,0,1195,1196,5,69,0,0,1196,1197,3,28,14,0,1197,1198,
5,38,0,0,1198,1201,3,28,14,0,1199,1200,5,58,0,0,1200,1202,3,434,217,0,1201,
1199,1,0,0,0,1201,1202,1,0,0,0,1202,143,1,0,0,0,1203,1204,5,71,0,0,1204,
1209,3,146,73,0,1205,1206,5,132,0,0,1206,1208,3,146,73,0,1207,1205,1,0,0,
0,1208,1211,1,0,0,0,1209,1207,1,0,0,0,1209,1210,1,0,0,0,1210,145,1,0,0,0,
1211,1209,1,0,0,0,1212,1214,3,28,14,0,1213,1215,7,8,0,0,1214,1213,1,0,0,
0,1214,1215,1,0,0,0,1215,147,1,0,0,0,1216,1217,5,85,0,0,1217,1224,3,28,14,
0,1218,1219,5,51,0,0,1219,1220,3,28,14,0,1220,1221,5,20,0,0,1221,1222,3,
28,14,0,1222,1224,1,0,0,0,1223,1216,1,0,0,0,1223,1218,1,0,0,0,1224,149,1,
0,0,0,1225,1226,5,58,0,0,1226,1227,3,434,217,0,1227,1228,3,134,67,0,1228,
151,1,0,0,0,1229,1233,3,164,82,0,1230,1233,3,154,77,0,1231,1233,3,166,83,
0,1232,1229,1,0,0,0,1232,1230,1,0,0,0,1232,1231,1,0,0,0,1233,153,1,0,0,0,
1234,1235,3,172,86,0,1235,1236,5,134,0,0,1236,1242,1,0,0,0,1237,1238,3,180,
90,0,1238,1239,5,134,0,0,1239,1242,1,0,0,0,1240,1242,3,156,78,0,1241,1234,
1,0,0,0,1241,1237,1,0,0,0,1241,1240,1,0,0,0,1242,155,1,0,0,0,1243,1244,3,
158,79,0,1244,1245,3,162,81,0,1245,157,1,0,0,0,1246,1248,3,160,80,0,1247,
1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1250,3,274,137,0,1250,
1252,3,434,217,0,1251,1253,3,230,115,0,1252,1251,1,0,0,0,1252,1253,1,0,0,
0,1253,1254,1,0,0,0,1254,1256,5,129,0,0,1255,1257,3,280,140,0,1256,1255,
1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1260,5,130,0,0,1259,1261,
3,238,119,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,159,1,0,0,0,1262,1264,
7,9,0,0,1263,1265,5,90,0,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,1265,1269,
1,0,0,0,1266,1267,5,90,0,0,1267,1269,7,9,0,0,1268,1262,1,0,0,0,1268,1266,
1,0,0,0,1269,161,1,0,0,0,1270,1276,3,170,85,0,1271,1272,3,374,187,0,1272,
1273,3,74,37,0,1273,1274,5,134,0,0,1274,1276,1,0,0,0,1275,1270,1,0,0,0,1275,
1271,1,0,0,0,1276,163,1,0,0,0,1277,1278,3,434,217,0,1278,1279,5,133,0,0,
1279,1280,3,152,76,0,1280,165,1,0,0,0,1281,1284,3,170,85,0,1282,1284,3,168,
84,0,1283,1281,1,0,0,0,1283,1282,1,0,0,0,1284,167,1,0,0,0,1285,1416,5,134,
0,0,1286,1287,3,28,14,0,1287,1288,5,134,0,0,1288,1416,1,0,0,0,1289,1290,
5,52,0,0,1290,1291,5,129,0,0,1291,1292,3,28,14,0,1292,1293,5,130,0,0,1293,
1296,3,182,91,0,1294,1295,5,36,0,0,1295,1297,3,182,91,0,1296,1294,1,0,0,
0,1296,1297,1,0,0,0,1297,1416,1,0,0,0,1298,1299,5,93,0,0,1299,1300,5,129,
0,0,1300,1301,3,28,14,0,1301,1302,5,130,0,0,1302,1306,5,125,0,0,1303,1305,
3,184,92,0,1304,1303,1,0,0,0,1305,1308,1,0,0,0,1306,1304,1,0,0,0,1306,1307,
1,0,0,0,1307,1309,1,0,0,0,1308,1306,1,0,0,0,1309,1310,5,126,0,0,1310,1416,
1,0,0,0,1311,1312,5,112,0,0,1312,1313,5,129,0,0,1313,1314,3,28,14,0,1314,
1315,5,130,0,0,1315,1316,3,166,83,0,1316,1416,1,0,0,0,1317,1318,5,33,0,0,
1318,1319,3,166,83,0,1319,1320,5,112,0,0,1320,1321,5,129,0,0,1321,1322,3,
28,14,0,1322,1323,5,130,0,0,1323,1324,5,134,0,0,1324,1416,1,0,0,0,1325,1326,
5,46,0,0,1326,1328,5,129,0,0,1327,1329,3,192,96,0,1328,1327,1,0,0,0,1328,
1329,1,0,0,0,1329,1330,1,0,0,0,1330,1332,5,134,0,0,1331,1333,3,28,14,0,1332,
1331,1,0,0,0,1332,1333,1,0,0,0,1333,1334,1,0,0,0,1334,1336,5,134,0,0,1335,
1337,3,194,97,0,1336,1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,
1339,5,130,0,0,1339,1416,3,166,83,0,1340,1342,5,16,0,0,1341,1340,1,0,0,0,
1341,1342,1,0,0,0,1342,1343,1,0,0,0,1343,1344,5,47,0,0,1344,1345,5,129,0,
0,1345,1346,3,174,87,0,1346,1347,3,434,217,0,1347,1348,5,54,0,0,1348,1349,
3,28,14,0,1349,1350,5,130,0,0,1350,1351,3,166,83,0,1351,1416,1,0,0,0,1352,
1353,5,19,0,0,1353,1416,5,134,0,0,1354,1355,5,28,0,0,1355,1416,5,134,0,0,
1356,1361,5,50,0,0,1357,1362,3,434,217,0,1358,1359,5,22,0,0,1359,1362,3,
28,14,0,1360,1362,5,30,0,0,1361,1357,1,0,0,0,1361,1358,1,0,0,0,1361,1360,
1,0,0,0,1362,1363,1,0,0,0,1363,1416,5,134,0,0,1364,1366,5,82,0,0,1365,1367,
3,28,14,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,0,0,1368,1416,
5,134,0,0,1369,1371,5,95,0,0,1370,1372,3,28,14,0,1371,1370,1,0,0,0,1371,
1372,1,0,0,0,1372,1373,1,0,0,0,1373,1416,5,134,0,0,1374,1375,5,97,0,0,1375,
1381,3,170,85,0,1376,1378,3,196,98,0,1377,1379,3,204,102,0,1378,1377,1,0,
0,0,1378,1379,1,0,0,0,1379,1382,1,0,0,0,1380,1382,3,204,102,0,1381,1376,
1,0,0,0,1381,1380,1,0,0,0,1382,1416,1,0,0,0,1383,1384,5,25,0,0,1384,1416,
3,170,85,0,1385,1386,5,101,0,0,1386,1416,3,170,85,0,1387,1388,5,62,0,0,1388,
1389,5,129,0,0,1389,1390,3,28,14,0,1390,1391,5,130,0,0,1391,1392,3,166,83,
0,1392,1416,1,0,0,0,1393,1394,5,105,0,0,1394,1395,5,129,0,0,1395,1396,3,
206,103,0,1396,1397,5,130,0,0,1397,1398,3,166,83,0,1398,1416,1,0,0,0,1399,
1403,5,113,0,0,1400,1401,5,82,0,0,1401,1404,3,28,14,0,1402,1404,5,19,0,0,
1403,1400,1,0,0,0,1403,1402,1,0,0,0,1404,1405,1,0,0,0,1405,1416,5,134,0,
0,1406,1407,5,103,0,0,1407,1416,3,170,85,0,1408,1409,5,44,0,0,1409,1410,
5,129,0,0,1410,1411,3,362,181,0,1411,1412,3,364,182,0,1412,1413,5,130,0,
0,1413,1414,3,166,83,0,1414,1416,1,0,0,0,1415,1285,1,0,0,0,1415,1286,1,0,
0,0,1415,1289,1,0,0,0,1415,1298,1,0,0,0,1415,1311,1,0,0,0,1415,1317,1,0,
0,0,1415,1325,1,0,0,0,1415,1341,1,0,0,0,1415,1352,1,0,0,0,1415,1354,1,0,
0,0,1415,1356,1,0,0,0,1415,1364,1,0,0,0,1415,1369,1,0,0,0,1415,1374,1,0,
0,0,1415,1383,1,0,0,0,1415,1385,1,0,0,0,1415,1387,1,0,0,0,1415,1393,1,0,
0,0,1415,1399,1,0,0,0,1415,1406,1,0,0,0,1415,1408,1,0,0,0,1416,169,1,0,0,
0,1417,1419,5,125,0,0,1418,1420,3,190,95,0,1419,1418,1,0,0,0,1419,1420,1,
0,0,0,1420,1421,1,0,0,0,1421,1422,5,126,0,0,1422,171,1,0,0,0,1423,1428,5,
105,0,0,1424,1428,5,80,0,0,1425,1426,5,80,0,0,1426,1428,5,79,0,0,1427,1423,
1,0,0,0,1427,1424,1,0,0,0,1427,1425,1,0,0,0,1427,1428,1,0,0,0,1428,1429,
1,0,0,0,1429,1430,3,174,87,0,1430,1437,3,176,88,0,1431,1432,5,132,0,0,1432,
1433,3,176,88,0,1433,1434,4,86,0,0,1434,1436,1,0,0,0,1435,1431,1,0,0,0,1436,
1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,0,1438,1445,1,0,0,0,1439,
1437,1,0,0,0,1440,1441,5,44,0,0,1441,1442,3,362,181,0,1442,1443,3,364,182,
0,1443,1445,1,0,0,0,1444,1427,1,0,0,0,1444,1440,1,0,0,0,1445,173,1,0,0,0,
1446,1449,5,106,0,0,1447,1449,3,4,2,0,1448,1446,1,0,0,0,1448,1447,1,0,0,
0,1449,175,1,0,0,0,1450,1456,3,434,217,0,1451,1453,5,145,0,0,1452,1454,5,
80,0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,1454,1455,1,0,0,0,1455,1457,3,
178,89,0,1456,1451,1,0,0,0,1456,1457,1,0,0,0,1457,177,1,0,0,0,1458,1462,
3,28,14,0,1459,1462,3,324,162,0,1460,1462,3,372,186,0,1461,1458,1,0,0,0,
1461,1459,1,0,0,0,1461,1460,1,0,0,0,1462,179,1,0,0,0,1463,1464,5,27,0,0,
1464,1465,3,4,2,0,1465,1466,3,264,132,0,1466,181,1,0,0,0,1467,1470,3,170,
85,0,1468,1470,3,168,84,0,1469,1467,1,0,0,0,1469,1468,1,0,0,0,1470,183,1,
0,0,0,1471,1473,3,186,93,0,1472,1471,1,0,0,0,1473,1474,1,0,0,0,1474,1472,
1,0,0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,1477,3,190,95,0,1477,185,
1,0,0,0,1478,1479,5,22,0,0,1479,1481,3,28,14,0,1480,1482,3,188,94,0,1481,
1480,1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,0,0,1483,1484,5,133,0,0,1484,
1488,1,0,0,0,1485,1486,5,30,0,0,1486,1488,5,133,0,0,1487,1478,1,0,0,0,1487,
1485,1,0,0,0,1488,187,1,0,0,0,1489,1490,5,110,0,0,1490,1491,3,28,14,0,1491,
189,1,0,0,0,1492,1494,3,152,76,0,1493,1492,1,0,0,0,1494,1495,1,0,0,0,1495,
1493,1,0,0,0,1495,1496,1,0,0,0,1496,191,1,0,0,0,1497,1507,3,172,86,0,1498,
1503,3,28,14,0,1499,1500,5,132,0,0,1500,1502,3,28,14,0,1501,1499,1,0,0,0,
1502,1505,1,0,0,0,1503,1501,1,0,0,0,1503,1504,1,0,0,0,1504,1507,1,0,0,0,
1505,1503,1,0,0,0,1506,1497,1,0,0,0,1506,1498,1,0,0,0,1507,193,1,0,0,0,1508,
1513,3,28,14,0,1509,1510,5,132,0,0,1510,1512,3,28,14,0,1511,1509,1,0,0,0,
1512,1515,1,0,0,0,1513,1511,1,0,0,0,1513,1514,1,0,0,0,1514,195,1,0,0,0,1515,
1513,1,0,0,0,1516,1520,3,198,99,0,1517,1519,3,198,99,0,1518,1517,1,0,0,0,
1519,1522,1,0,0,0,1520,1518,1,0,0,0,1520,1521,1,0,0,0,1521,1524,1,0,0,0,
1522,1520,1,0,0,0,1523,1525,3,200,100,0,1524,1523,1,0,0,0,1524,1525,1,0,
0,0,1525,1528,1,0,0,0,1526,1528,3,200,100,0,1527,1516,1,0,0,0,1527,1526,
1,0,0,0,1528,197,1,0,0,0,1529,1530,5,23,0,0,1530,1531,5,129,0,0,1531,1533,
3,20,10,0,1532,1534,3,434,217,0,1533,1532,1,0,0,0,1533,1534,1,0,0,0,1534,
1535,1,0,0,0,1535,1537,5,130,0,0,1536,1538,3,202,101,0,1537,1536,1,0,0,0,
1537,1538,1,0,0,0,1538,1539,1,0,0,0,1539,1540,3,170,85,0,1540,199,1,0,0,
0,1541,1543,5,23,0,0,1542,1544,3,202,101,0,1543,1542,1,0,0,0,1543,1544,1,
0,0,0,1544,1545,1,0,0,0,1545,1546,3,170,85,0,1546,201,1,0,0,0,1547,1548,
5,110,0,0,1548,1549,5,129,0,0,1549,1550,3,28,14,0,1550,1551,5,130,0,0,1551,
203,1,0,0,0,1552,1553,5,43,0,0,1553,1554,3,170,85,0,1554,205,1,0,0,0,1555,
1558,3,172,86,0,1556,1558,3,28,14,0,1557,1555,1,0,0,0,1557,1556,1,0,0,0,
1558,207,1,0,0,0,1559,1560,5,65,0,0,1560,1561,3,210,105,0,1561,1563,3,212,
106,0,1562,1564,5,134,0,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,209,1,
0,0,0,1565,1570,3,434,217,0,1566,1567,5,131,0,0,1567,1569,3,434,217,0,1568,
1566,1,0,0,0,1569,1572,1,0,0,0,1570,1568,1,0,0,0,1570,1571,1,0,0,0,1571,
211,1,0,0,0,1572,1570,1,0,0,0,1573,1575,5,125,0,0,1574,1576,3,214,107,0,
1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1578,1,0,0,0,1577,1579,3,218,109,
0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,1581,1,0,0,0,1580,1582,3,222,
111,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,0,0,0,1583,1584,5,
126,0,0,1584,213,1,0,0,0,1585,1587,3,216,108,0,1586,1585,1,0,0,0,1587,1588,
1,0,0,0,1588,1586,1,0,0,0,1588,1589,1,0,0,0,1589,215,1,0,0,0,1590,1591,5,
41,0,0,1591,1592,5,11,0,0,1592,1593,3,434,217,0,1593,1594,5,134,0,0,1594,
217,1,0,0,0,1595,1597,3,220,110,0,1596,1595,1,0,0,0,1597,1598,1,0,0,0,1598,
1596,1,0,0,0,1598,1599,1,0,0,0,1599,219,1,0,0,0,1600,1601,5,105,0,0,1601,
1602,3,434,217,0,1602,1603,5,145,0,0,1603,1604,3,2,1,0,1604,1605,5,134,0,
0,1605,1616,1,0,0,0,1606,1607,5,105,0,0,1607,1608,3,2,1,0,1608,1609,5,134,
0,0,1609,1616,1,0,0,0,1610,1611,5,105,0,0,1611,1612,5,90,0,0,1612,1613,3,
2,1,0,1613,1614,5,134,0,0,1614,1616,1,0,0,0,1615,1600,1,0,0,0,1615,1606,
1,0,0,0,1615,1610,1,0,0,0,1616,221,1,0,0,0,1617,1619,3,224,112,0,1618,1617,
1,0,0,0,1619,1620,1,0,0,0,1620,1618,1,0,0,0,1620,1621,1,0,0,0,1621,223,1,
0,0,0,1622,1625,3,208,104,0,1623,1625,3,226,113,0,1624,1622,1,0,0,0,1624,
1623,1,0,0,0,1625,225,1,0,0,0,1626,1628,3,350,175,0,1627,1626,1,0,0,0,1627,
1628,1,0,0,0,1628,1630,1,0,0,0,1629,1631,3,256,128,0,1630,1629,1,0,0,0,1630,
1631,1,0,0,0,1631,1637,1,0,0,0,1632,1638,3,398,199,0,1633,1638,3,400,200,
0,1634,1638,3,402,201,0,1635,1638,3,404,202,0,1636,1638,3,406,203,0,1637,
1632,1,0,0,0,1637,1633,1,0,0,0,1637,1634,1,0,0,0,1637,1635,1,0,0,0,1637,
1636,1,0,0,0,1638,227,1,0,0,0,1639,1640,3,434,217,0,1640,1641,5,149,0,0,
1641,1643,3,434,217,0,1642,1644,3,22,11,0,1643,1642,1,0,0,0,1643,1644,1,
0,0,0,1644,229,1,0,0,0,1645,1646,5,146,0,0,1646,1651,3,232,116,0,1647,1648,
5,132,0,0,1648,1650,3,232,116,0,1649,1647,1,0,0,0,1650,1653,1,0,0,0,1651,
1649,1,0,0,0,1651,1652,1,0,0,0,1652,1654,1,0,0,0,1653,1651,1,0,0,0,1654,
1655,5,147,0,0,1655,231,1,0,0,0,1656,1658,3,350,175,0,1657,1656,1,0,0,0,
1657,1658,1,0,0,0,1658,1659,1,0,0,0,1659,1660,3,434,217,0,1660,233,1,0,0,
0,1661,1662,5,133,0,0,1662,1667,3,20,10,0,1663,1664,5,132,0,0,1664,1666,
3,2,1,0,1665,1663,1,0,0,0,1666,1669,1,0,0,0,1667,1665,1,0,0,0,1667,1668,
1,0,0,0,1668,235,1,0,0,0,1669,1667,1,0,0,0,1670,1675,3,2,1,0,1671,1672,5,
132,0,0,1672,1674,3,2,1,0,1673,1671,1,0,0,0,1674,1677,1,0,0,0,1675,1673,
1,0,0,0,1675,1676,1,0,0,0,1676,237,1,0,0,0,1677,1675,1,0,0,0,1678,1680,3,
240,120,0,1679,1678,1,0,0,0,1680,1681,1,0,0,0,1681,1679,1,0,0,0,1681,1682,
1,0,0,0,1682,239,1,0,0,0,1683,1684,5,111,0,0,1684,1685,3,434,217,0,1685,
1686,5,133,0,0,1686,1687,3,242,121,0,1687,241,1,0,0,0,1688,1699,3,248,124,
0,1689,1692,3,244,122,0,1690,1691,5,132,0,0,1691,1693,3,246,123,0,1692,1690,
1,0,0,0,1692,1693,1,0,0,0,1693,1696,1,0,0,0,1694,1695,5,132,0,0,1695,1697,
3,248,124,0,1696,1694,1,0,0,0,1696,1697,1,0,0,0,1697,1699,1,0,0,0,1698,1688,
1,0,0,0,1698,1689,1,0,0,0,1699,243,1,0,0,0,1700,1708,3,20,10,0,1701,1703,
5,26,0,0,1702,1704,5,148,0,0,1703,1702,1,0,0,0,1703,1704,1,0,0,0,1704,1708,
1,0,0,0,1705,1708,5,92,0,0,1706,1708,5,102,0,0,1707,1700,1,0,0,0,1707,1701,
1,0,0,0,1707,1705,1,0,0,0,1707,1706,1,0,0,0,1708,245,1,0,0,0,1709,1714,3,
2,1,0,1710,1711,5,132,0,0,1711,1713,3,2,1,0,1712,1710,1,0,0,0,1713,1716,
1,0,0,0,1714,1712,1,0,0,0,1714,1715,1,0,0,0,1715,247,1,0,0,0,1716,1714,1,
0,0,0,1717,1718,5,66,0,0,1718,1719,5,129,0,0,1719,1720,5,130,0,0,1720,249,
1,0,0,0,1721,1723,5,125,0,0,1722,1724,3,252,126,0,1723,1722,1,0,0,0,1723,
1724,1,0,0,0,1724,1725,1,0,0,0,1725,1726,5,126,0,0,1726,251,1,0,0,0,1727,
1729,3,254,127,0,1728,1727,1,0,0,0,1729,1730,1,0,0,0,1730,1728,1,0,0,0,1730,
1731,1,0,0,0,1731,253,1,0,0,0,1732,1734,3,350,175,0,1733,1732,1,0,0,0,1733,
1734,1,0,0,0,1734,1736,1,0,0,0,1735,1737,3,256,128,0,1736,1735,1,0,0,0,1736,
1737,1,0,0,0,1737,1740,1,0,0,0,1738,1741,3,260,130,0,1739,1741,3,418,209,
0,1740,1738,1,0,0,0,1740,1739,1,0,0,0,1741,255,1,0,0,0,1742,1744,3,258,129,
0,1743,1742,1,0,0,0,1744,1745,1,0,0,0,1745,1743,1,0,0,0,1745,1746,1,0,0,
0,1746,257,1,0,0,0,1747,1748,7,10,0,0,1748,259,1,0,0,0,1749,1769,3,414,207,
0,1750,1769,3,262,131,0,1751,1769,3,408,204,0,1752,1758,3,308,154,0,1753,
1759,3,312,156,0,1754,1755,3,374,187,0,1755,1756,3,74,37,0,1756,1757,5,134,
0,0,1757,1759,1,0,0,0,1758,1753,1,0,0,0,1758,1754,1,0,0,0,1759,1769,1,0,
0,0,1760,1769,3,420,210,0,1761,1762,5,108,0,0,1762,1769,3,422,211,0,1763,
1769,3,398,199,0,1764,1769,3,400,200,0,1765,1769,3,402,201,0,1766,1769,3,
404,202,0,1767,1769,3,406,203,0,1768,1749,1,0,0,0,1768,1750,1,0,0,0,1768,
1751,1,0,0,0,1768,1752,1,0,0,0,1768,1760,1,0,0,0,1768,1761,1,0,0,0,1768,
1763,1,0,0,0,1768,1764,1,0,0,0,1768,1765,1,0,0,0,1768,1766,1,0,0,0,1768,
1767,1,0,0,0,1769,261,1,0,0,0,1770,1776,5,80,0,0,1771,1772,5,79,0,0,1772,
1776,5,80,0,0,1773,1774,5,80,0,0,1774,1776,5,79,0,0,1775,1770,1,0,0,0,1775,
1771,1,0,0,0,1775,1773,1,0,0,0,1775,1776,1,0,0,0,1776,1777,1,0,0,0,1777,
1787,3,4,2,0,1778,1779,3,2,1,0,1779,1780,5,131,0,0,1780,1781,3,416,208,0,
1781,1788,1,0,0,0,1782,1788,3,422,211,0,1783,1788,3,412,206,0,1784,1788,
3,416,208,0,1785,1788,3,426,213,0,1786,1788,3,410,205,0,1787,1778,1,0,0,
0,1787,1782,1,0,0,0,1787,1783,1,0,0,0,1787,1784,1,0,0,0,1787,1785,1,0,0,
0,1787,1786,1,0,0,0,1788,263,1,0,0,0,1789,1794,3,266,133,0,1790,1791,5,132,
0,0,1791,1793,3,266,133,0,1792,1790,1,0,0,0,1793,1796,1,0,0,0,1794,1792,
1,0,0,0,1794,1795,1,0,0,0,1795,265,1,0,0,0,1796,1794,1,0,0,0,1797,1798,3,
434,217,0,1798,1799,5,145,0,0,1799,1800,3,28,14,0,1800,267,1,0,0,0,1801,
1806,3,270,135,0,1802,1803,5,132,0,0,1803,1805,3,270,135,0,1804,1802,1,0,
0,0,1805,1808,1,0,0,0,1806,1804,1,0,0,0,1806,1807,1,0,0,0,1807,269,1,0,0,
0,1808,1806,1,0,0,0,1809,1812,3,434,217,0,1810,1811,5,145,0,0,1811,1813,
3,272,136,0,1812,1810,1,0,0,0,1812,1813,1,0,0,0,1813,271,1,0,0,0,1814,1817,
3,28,14,0,1815,1817,3,324,162,0,1816,1814,1,0,0,0,1816,1815,1,0,0,0,1817,
273,1,0,0,0,1818,1821,3,4,2,0,1819,1821,5,108,0,0,1820,1818,1,0,0,0,1820,
1819,1,0,0,0,1821,275,1,0,0,0,1822,1823,3,2,1,0,1823,277,1,0,0,0,1824,1827,
3,170,85,0,1825,1827,5,134,0,0,1826,1824,1,0,0,0,1826,1825,1,0,0,0,1827,
279,1,0,0,0,1828,1835,3,288,144,0,1829,1832,3,282,141,0,1830,1831,5,132,
0,0,1831,1833,3,288,144,0,1832,1830,1,0,0,0,1832,1833,1,0,0,0,1833,1835,
1,0,0,0,1834,1828,1,0,0,0,1834,1829,1,0,0,0,1835,281,1,0,0,0,1836,1841,3,
284,142,0,1837,1838,5,132,0,0,1838,1840,3,284,142,0,1839,1837,1,0,0,0,1840,
1843,1,0,0,0,1841,1839,1,0,0,0,1841,1842,1,0,0,0,1842,283,1,0,0,0,1843,1841,
1,0,0,0,1844,1846,3,350,175,0,1845,1844,1,0,0,0,1845,1846,1,0,0,0,1846,1848,
1,0,0,0,1847,1849,3,286,143,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1850,
1,0,0,0,1850,1853,3,428,214,0,1851,1853,5,12,0,0,1852,1845,1,0,0,0,1852,
1851,1,0,0,0,1853,285,1,0,0,0,1854,1863,5,80,0,0,1855,1863,5,72,0,0,1856,
1863,5,54,0,0,1857,1858,5,80,0,0,1858,1863,5,94,0,0,1859,1860,5,54,0,0,1860,
1863,5,94,0,0,1861,1863,5,94,0,0,1862,1854,1,0,0,0,1862,1855,1,0,0,0,1862,
1856,1,0,0,0,1862,1857,1,0,0,0,1862,1859,1,0,0,0,1862,1861,1,0,0,0,1863,
287,1,0,0,0,1864,1866,3,350,175,0,1865,1864,1,0,0,0,1865,1866,1,0,0,0,1866,
1867,1,0,0,0,1867,1868,5,74,0,0,1868,1869,3,320,160,0,1869,1870,3,434,217,
0,1870,289,1,0,0,0,1871,1873,3,350,175,0,1872,1871,1,0,0,0,1872,1873,1,0,
0,0,1873,1875,1,0,0,0,1874,1876,3,296,148,0,1875,1874,1,0,0,0,1875,1876,
1,0,0,0,1876,1887,1,0,0,0,1877,1878,5,49,0,0,1878,1880,3,298,149,0,1879,
1881,3,294,147,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,1881,1888,1,0,0,0,1882,
1883,5,86,0,0,1883,1885,3,298,149,0,1884,1886,3,292,146,0,1885,1884,1,0,
0,0,1885,1886,1,0,0,0,1886,1888,1,0,0,0,1887,1877,1,0,0,0,1887,1882,1,0,
0,0,1888,291,1,0,0,0,1889,1891,3,350,175,0,1890,1889,1,0,0,0,1890,1891,1,
0,0,0,1891,1893,1,0,0,0,1892,1894,3,296,148,0,1893,1892,1,0,0,0,1893,1894,
1,0,0,0,1894,1895,1,0,0,0,1895,1896,5,49,0,0,1896,1897,3,298,149,0,1897,
293,1,0,0,0,1898,1900,3,350,175,0,1899,1898,1,0,0,0,1899,1900,1,0,0,0,1900,
1902,1,0,0,0,1901,1903,3,296,148,0,1902,1901,1,0,0,0,1902,1903,1,0,0,0,1903,
1904,1,0,0,0,1904,1905,5,86,0,0,1905,1906,3,298,149,0,1906,295,1,0,0,0,1907,
1915,5,77,0,0,1908,1915,5,57,0,0,1909,1915,5,76,0,0,1910,1911,5,77,0,0,1911,
1915,5,57,0,0,1912,1913,5,57,0,0,1913,1915,5,77,0,0,1914,1907,1,0,0,0,1914,
1908,1,0,0,0,1914,1909,1,0,0,0,1914,1910,1,0,0,0,1914,1912,1,0,0,0,1915,
297,1,0,0,0,1916,1919,3,170,85,0,1917,1919,5,134,0,0,1918,1916,1,0,0,0,1918,
1917,1,0,0,0,1919,299,1,0,0,0,1920,1922,3,350,175,0,1921,1920,1,0,0,0,1921,
1922,1,0,0,0,1922,1931,1,0,0,0,1923,1924,5,10,0,0,1924,1925,3,170,85,0,1925,
1926,3,304,152,0,1926,1932,1,0,0,0,1927,1928,5,81,0,0,1928,1929,3,170,85,
0,1929,1930,3,302,151,0,1930,1932,1,0,0,0,1931,1923,1,0,0,0,1931,1927,1,
0,0,0,1932,301,1,0,0,0,1933,1935,3,350,175,0,1934,1933,1,0,0,0,1934,1935,
1,0,0,0,1935,1936,1,0,0,0,1936,1937,5,10,0,0,1937,1938,3,170,85,0,1938,303,
1,0,0,0,1939,1941,3,350,175,0,1940,1939,1,0,0,0,1940,1941,1,0,0,0,1941,1942,
1,0,0,0,1942,1943,5,81,0,0,1943,1944,3,170,85,0,1944,305,1,0,0,0,1945,1968,
5,135,0,0,1946,1968,5,136,0,0,1947,1968,5,143,0,0,1948,1968,5,144,0,0,1949,
1968,5,151,0,0,1950,1968,5,152,0,0,1951,1968,5,96,0,0,1952,1968,5,42,0,0,
1953,1968,5,137,0,0,1954,1968,5,138,0,0,1955,1968,5,139,0,0,1956,1968,5,
140,0,0,1957,1968,5,141,0,0,1958,1968,5,142,0,0,1959,1968,5,168,0,0,1960,
1968,3,376,188,0,1961,1968,5,156,0,0,1962,1968,5,157,0,0,1963,1968,5,147,
0,0,1964,1968,5,146,0,0,1965,1968,5,159,0,0,1966,1968,5,158,0,0,1967,1945,
1,0,0,0,1967,1946,1,0,0,0,1967,1947,1,0,0,0,1967,1948,1,0,0,0,1967,1949,
1,0,0,0,1967,1950,1,0,0,0,1967,1951,1,0,0,0,1967,1952,1,0,0,0,1967,1953,
1,0,0,0,1967,1954,1,0,0,0,1967,1955,1,0,0,0,1967,1956,1,0,0,0,1967,1957,
1,0,0,0,1967,1958,1,0,0,0,1967,1959,1,0,0,0,1967,1960,1,0,0,0,1967,1961,
1,0,0,0,1967,1962,1,0,0,0,1967,1963,1,0,0,0,1967,1964,1,0,0,0,1967,1965,
1,0,0,0,1967,1966,1,0,0,0,1968,307,1,0,0,0,1969,1970,7,11,0,0,1970,1971,
5,70,0,0,1971,1972,3,4,2,0,1972,1973,5,129,0,0,1973,1974,3,428,214,0,1974,
1975,5,130,0,0,1975,309,1,0,0,0,1976,1977,5,133,0,0,1977,1978,7,12,0,0,1978,
1980,5,129,0,0,1979,1981,3,24,12,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,
1982,1,0,0,0,1982,1983,5,130,0,0,1983,311,1,0,0,0,1984,1987,3,170,85,0,1985,
1987,5,134,0,0,1986,1984,1,0,0,0,1986,1985,1,0,0,0,1987,313,1,0,0,0,1988,
1989,5,133,0,0,1989,1990,3,236,118,0,1990,315,1,0,0,0,1991,1995,5,125,0,
0,1992,1994,3,318,159,0,1993,1992,1,0,0,0,1994,1997,1,0,0,0,1995,1993,1,
0,0,0,1995,1996,1,0,0,0,1996,1998,1,0,0,0,1997,1995,1,0,0,0,1998,1999,5,
126,0,0,1999,317,1,0,0,0,2000,2002,3,350,175,0,2001,2000,1,0,0,0,2001,2002,
1,0,0,0,2002,2004,1,0,0,0,2003,2005,3,256,128,0,2004,2003,1,0,0,0,2004,2005,
1,0,0,0,2005,2016,1,0,0,0,2006,2017,3,260,130,0,2007,2008,5,44,0,0,2008,
2010,3,4,2,0,2009,2011,3,370,185,0,2010,2009,1,0,0,0,2011,2012,1,0,0,0,2012,
2010,1,0,0,0,2012,2013,1,0,0,0,2013,2014,1,0,0,0,2014,2015,5,134,0,0,2015,
2017,1,0,0,0,2016,2006,1,0,0,0,2016,2007,1,0,0,0,2017,319,1,0,0,0,2018,2026,
3,6,3,0,2019,2021,7,13,0,0,2020,2019,1,0,0,0,2021,2024,1,0,0,0,2022,2020,
1,0,0,0,2022,2023,1,0,0,0,2023,2025,1,0,0,0,2024,2022,1,0,0,0,2025,2027,
3,322,161,0,2026,2022,1,0,0,0,2027,2028,1,0,0,0,2028,2026,1,0,0,0,2028,2029,
1,0,0,0,2029,321,1,0,0,0,2030,2034,5,127,0,0,2031,2033,5,132,0,0,2032,2031,
1,0,0,0,2033,2036,1,0,0,0,2034,2032,1,0,0,0,2034,2035,1,0,0,0,2035,2037,
1,0,0,0,2036,2034,1,0,0,0,2037,2038,5,128,0,0,2038,323,1,0,0,0,2039,2051,
5,125,0,0,2040,2045,3,272,136,0,2041,2042,5,132,0,0,2042,2044,3,272,136,
0,2043,2041,1,0,0,0,2044,2047,1,0,0,0,2045,2043,1,0,0,0,2045,2046,1,0,0,
0,2046,2049,1,0,0,0,2047,2045,1,0,0,0,2048,2050,5,132,0,0,2049,2048,1,0,
0,0,2049,2050,1,0,0,0,2050,2052,1,0,0,0,2051,2040,1,0,0,0,2051,2052,1,0,
0,0,2052,2053,1,0,0,0,2053,2054,5,126,0,0,2054,325,1,0,0,0,2055,2056,5,146,
0,0,2056,2061,3,328,164,0,2057,2058,5,132,0,0,2058,2060,3,328,164,0,2059,
2057,1,0,0,0,2060,2063,1,0,0,0,2061,2059,1,0,0,0,2061,2062,1,0,0,0,2062,
2064,1,0,0,0,2063,2061,1,0,0,0,2064,2065,5,147,0,0,2065,327,1,0,0,0,2066,
2068,3,350,175,0,2067,2066,1,0,0,0,2067,2068,1,0,0,0,2068,2070,1,0,0,0,2069,
2071,3,330,165,0,2070,2069,1,0,0,0,2070,2071,1,0,0,0,2071,2072,1,0,0,0,2072,
2073,3,434,217,0,2073,329,1,0,0,0,2074,2075,7,14,0,0,2075,331,1,0,0,0,2076,
2077,5,133,0,0,2077,2078,3,236,118,0,2078,333,1,0,0,0,2079,2083,5,125,0,
0,2080,2082,3,336,168,0,2081,2080,1,0,0,0,2082,2085,1,0,0,0,2083,2081,1,
0,0,0,2083,2084,1,0,0,0,2084,2086,1,0,0,0,2085,2083,1,0,0,0,2086,2087,5,
126,0,0,2087,335,1,0,0,0,2088,2090,3,350,175,0,2089,2088,1,0,0,0,2089,2090,
1,0,0,0,2090,2092,1,0,0,0,2091,2093,5,66,0,0,2092,2091,1,0,0,0,2092,2093,
1,0,0,0,2093,2157,1,0,0,0,2094,2096,5,103,0,0,2095,2094,1,0,0,0,2095,2096,
1,0,0,0,2096,2102,1,0,0,0,2097,2103,5,80,0,0,2098,2099,5,80,0,0,2099,2103,
5,79,0,0,2100,2101,5,79,0,0,2101,2103,5,80,0,0,2102,2097,1,0,0,0,2102,2098,
1,0,0,0,2102,2100,1,0,0,0,2102,2103,1,0,0,0,2103,2104,1,0,0,0,2104,2132,
3,4,2,0,2105,2107,3,434,217,0,2106,2108,3,230,115,0,2107,2106,1,0,0,0,2107,
2108,1,0,0,0,2108,2109,1,0,0,0,2109,2111,5,129,0,0,2110,2112,3,280,140,0,
2111,2110,1,0,0,0,2111,2112,1,0,0,0,2112,2113,1,0,0,0,2113,2115,5,130,0,
0,2114,2116,3,238,119,0,2115,2114,1,0,0,0,2115,2116,1,0,0,0,2116,2117,1,
0,0,0,2117,2118,5,134,0,0,2118,2133,1,0,0,0,2119,2120,3,434,217,0,2120,2121,
5,125,0,0,2121,2122,3,338,169,0,2122,2123,5,126,0,0,2123,2133,1,0,0,0,2124,
2125,5,94,0,0,2125,2126,5,127,0,0,2126,2127,3,280,140,0,2127,2128,5,128,
0,0,2128,2129,5,125,0,0,2129,2130,3,338,169,0,2130,2131,5,126,0,0,2131,2133,
1,0,0,0,2132,2105,1,0,0,0,2132,2119,1,0,0,0,2132,2124,1,0,0,0,2133,2158,
1,0,0,0,2134,2136,5,103,0,0,2135,2134,1,0,0,0,2135,2136,1,0,0,0,2136,2137,
1,0,0,0,2137,2138,5,108,0,0,2138,2140,3,434,217,0,2139,2141,3,230,115,0,
2140,2139,1,0,0,0,2140,2141,1,0,0,0,2141,2142,1,0,0,0,2142,2144,5,129,0,
0,2143,2145,3,280,140,0,2144,2143,1,0,0,0,2144,2145,1,0,0,0,2145,2146,1,
0,0,0,2146,2148,5,130,0,0,2147,2149,3,238,119,0,2148,2147,1,0,0,0,2148,2149,
1,0,0,0,2149,2150,1,0,0,0,2150,2151,5,134,0,0,2151,2158,1,0,0,0,2152,2153,
5,39,0,0,2153,2154,3,4,2,0,2154,2155,3,434,217,0,2155,2156,5,134,0,0,2156,
2158,1,0,0,0,2157,2095,1,0,0,0,2157,2135,1,0,0,0,2157,2152,1,0,0,0,2158,
337,1,0,0,0,2159,2161,3,350,175,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,2161,
2180,1,0,0,0,2162,2163,5,49,0,0,2163,2169,5,134,0,0,2164,2166,3,350,175,
0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,2167,2168,5,86,0,
0,2168,2170,5,134,0,0,2169,2165,1,0,0,0,2169,2170,1,0,0,0,2170,2181,1,0,
0,0,2171,2172,5,86,0,0,2172,2178,5,134,0,0,2173,2175,3,350,175,0,2174,2173,
1,0,0,0,2174,2175,1,0,0,0,2175,2176,1,0,0,0,2176,2177,5,49,0,0,2177,2179,
5,134,0,0,2178,2174,1,0,0,0,2178,2179,1,0,0,0,2179,2181,1,0,0,0,2180,2162,
1,0,0,0,2180,2171,1,0,0,0,2181,339,1,0,0,0,2182,2183,5,133,0,0,2183,2184,
3,4,2,0,2184,341,1,0,0,0,2185,2197,5,125,0,0,2186,2191,3,344,172,0,2187,
2188,5,132,0,0,2188,2190,3,344,172,0,2189,2187,1,0,0,0,2190,2193,1,0,0,0,
2191,2189,1,0,0,0,2191,2192,1,0,0,0,2192,2195,1,0,0,0,2193,2191,1,0,0,0,
2194,2196,5,132,0,0,2195,2194,1,0,0,0,2195,2196,1,0,0,0,2196,2198,1,0,0,
0,2197,2186,1,0,0,0,2197,2198,1,0,0,0,2198,2199,1,0,0,0,2199,2200,5,126,
0,0,2200,343,1,0,0,0,2201,2203,3,350,175,0,2202,2201,1,0,0,0,2202,2203,1,
0,0,0,2203,2204,1,0,0,0,2204,2207,3,434,217,0,2205,2206,5,145,0,0,2206,2208,
3,28,14,0,2207,2205,1,0,0,0,2207,2208,1,0,0,0,2208,345,1,0,0,0,2209,2210,
5,127,0,0,2210,2211,3,348,174,0,2211,2212,5,133,0,0,2212,2214,3,356,178,
0,2213,2215,5,132,0,0,2214,2213,1,0,0,0,2214,2215,1,0,0,0,2215,2216,1,0,
0,0,2216,2217,5,128,0,0,2217,347,1,0,0,0,2218,2221,3,396,198,0,2219,2221,
3,434,217,0,2220,2218,1,0,0,0,2220,2219,1,0,0,0,2221,349,1,0,0,0,2222,2224,
3,352,176,0,2223,2222,1,0,0,0,2224,2225,1,0,0,0,2225,2223,1,0,0,0,2225,2226,
1,0,0,0,2226,351,1,0,0,0,2227,2231,5,127,0,0,2228,2229,3,354,177,0,2229,
2230,5,133,0,0,2230,2232,1,0,0,0,2231,2228,1,0,0,0,2231,2232,1,0,0,0,2232,
2233,1,0,0,0,2233,2235,3,356,178,0,2234,2236,5,132,0,0,2235,2234,1,0,0,0,
2235,2236,1,0,0,0,2236,2237,1,0,0,0,2237,2238,5,128,0,0,2238,353,1,0,0,0,
2239,2242,3,396,198,0,2240,2242,3,434,217,0,2241,2239,1,0,0,0,2241,2240,
1,0,0,0,2242,355,1,0,0,0,2243,2248,3,358,179,0,2244,2245,5,132,0,0,2245,
2247,3,358,179,0,2246,2244,1,0,0,0,2247,2250,1,0,0,0,2248,2246,1,0,0,0,2248,
2249,1,0,0,0,2249,357,1,0,0,0,2250,2248,1,0,0,0,2251,2264,3,2,1,0,2252,2261,
5,129,0,0,2253,2258,3,360,180,0,2254,2255,5,132,0,0,2255,2257,3,360,180,
0,2256,2254,1,0,0,0,2257,2260,1,0,0,0,2258,2256,1,0,0,0,2258,2259,1,0,0,
0,2259,2262,1,0,0,0,2260,2258,1,0,0,0,2261,2253,1,0,0,0,2261,2262,1,0,0,
0,2262,2263,1,0,0,0,2263,2265,5,130,0,0,2264,2252,1,0,0,0,2264,2265,1,0,
0,0,2265,359,1,0,0,0,2266,2267,3,434,217,0,2267,2268,5,133,0,0,2268,2270,
1,0,0,0,2269,2266,1,0,0,0,2269,2270,1,0,0,0,2270,2271,1,0,0,0,2271,2272,
3,28,14,0,2272,361,1,0,0,0,2273,2276,3,12,6,0,2274,2276,3,20,10,0,2275,2273,
1,0,0,0,2275,2274,1,0,0,0,2276,2281,1,0,0,0,2277,2280,3,322,161,0,2278,2280,
5,148,0,0,2279,2277,1,0,0,0,2279,2278,1,0,0,0,2280,2283,1,0,0,0,2281,2279,
1,0,0,0,2281,2282,1,0,0,0,2282,2284,1,0,0,0,2283,2281,1,0,0,0,2284,2285,
5,137,0,0,2285,2289,1,0,0,0,2286,2287,5,108,0,0,2287,2289,5,137,0,0,2288,
2275,1,0,0,0,2288,2286,1,0,0,0,2289,363,1,0,0,0,2290,2295,3,366,183,0,2291,
2292,5,132,0,0,2292,2294,3,366,183,0,2293,2291,1,0,0,0,2294,2297,1,0,0,0,
2295,2293,1,0,0,0,2295,2296,1,0,0,0,2296,365,1,0,0,0,2297,2295,1,0,0,0,2298,
2299,3,434,217,0,2299,2300,5,145,0,0,2300,2301,3,368,184,0,2301,367,1,0,
0,0,2302,2304,5,140,0,0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,2305,1,
0,0,0,2305,2308,3,28,14,0,2306,2308,3,372,186,0,2307,2303,1,0,0,0,2307,2306,
1,0,0,0,2308,369,1,0,0,0,2309,2310,3,434,217,0,2310,2311,5,127,0,0,2311,
2312,3,28,14,0,2312,2313,5,128,0,0,2313,371,1,0,0,0,2314,2315,5,89,0,0,2315,
2316,3,4,2,0,2316,2317,5,127,0,0,2317,2318,3,28,14,0,2318,2319,5,128,0,0,
2319,2344,1,0,0,0,2320,2322,5,89,0,0,2321,2323,3,4,2,0,2322,2321,1,0,0,0,
2322,2323,1,0,0,0,2323,2324,1,0,0,0,2324,2326,5,127,0,0,2325,2327,3,28,14,
0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,2328,1,0,0,0,2328,2329,5,128,
0,0,2329,2330,5,125,0,0,2330,2335,3,28,14,0,2331,2332,5,132,0,0,2332,2334,
3,28,14,0,2333,2331,1,0,0,0,2334,2337,1,0,0,0,2335,2333,1,0,0,0,2335,2336,
1,0,0,0,2336,2339,1,0,0,0,2337,2335,1,0,0,0,2338,2340,5,132,0,0,2339,2338,
1,0,0,0,2339,2340,1,0,0,0,2340,2341,1,0,0,0,2341,2342,5,126,0,0,2342,2344,
1,0,0,0,2343,2314,1,0,0,0,2343,2320,1,0,0,0,2344,373,1,0,0,0,2345,2346,5,
145,0,0,2346,2347,5,147,0,0,2347,2348,4,187,1,1,2348,375,1,0,0,0,2349,2350,
5,147,0,0,2350,2351,5,147,0,0,2351,2352,4,188,2,1,2352,377,1,0,0,0,2353,
2354,5,147,0,0,2354,2355,5,159,0,0,2355,2356,4,189,3,1,2356,379,1,0,0,0,
2357,2366,3,382,191,0,2358,2366,3,384,192,0,2359,2366,5,116,0,0,2360,2366,
5,117,0,0,2361,2366,5,118,0,0,2362,2366,5,119,0,0,2363,2366,5,120,0,0,2364,
2366,5,67,0,0,2365,2357,1,0,0,0,2365,2358,1,0,0,0,2365,2359,1,0,0,0,2365,
2360,1,0,0,0,2365,2361,1,0,0,0,2365,2362,1,0,0,0,2365,2363,1,0,0,0,2365,
2364,1,0,0,0,2366,381,1,0,0,0,2367,2368,7,15,0,0,2368,383,1,0,0,0,2369,2374,
3,386,193,0,2370,2374,3,388,194,0,2371,2374,5,121,0,0,2372,2374,5,122,0,
0,2373,2369,1,0,0,0,2373,2370,1,0,0,0,2373,2371,1,0,0,0,2373,2372,1,0,0,
0,2374,385,1,0,0,0,2375,2379,5,123,0,0,2376,2378,3,390,195,0,2377,2376,1,
0,0,0,2378,2381,1,0,0,0,2379,2377,1,0,0,0,2379,2380,1,0,0,0,2380,2382,1,
0,0,0,2381,2379,1,0,0,0,2382,2383,5,176,0,0,2383,387,1,0,0,0,2384,2388,5,
124,0,0,2385,2387,3,392,196,0,2386,2385,1,0,0,0,2387,2390,1,0,0,0,2388,2386,
1,0,0,0,2388,2389,1,0,0,0,2389,2391,1,0,0,0,2390,2388,1,0,0,0,2391,2392,
5,176,0,0,2392,389,1,0,0,0,2393,2398,3,394,197,0,2394,2398,5,172,0,0,2395,
2398,5,174,0,0,2396,2398,5,177,0,0,2397,2393,1,0,0,0,2397,2394,1,0,0,0,2397,
2395,1,0,0,0,2397,2396,1,0,0,0,2398,391,1,0,0,0,2399,2404,3,394,197,0,2400,
2404,5,172,0,0,2401,2404,5,175,0,0,2402,2404,5,178,0,0,2403,2399,1,0,0,0,
2403,2400,1,0,0,0,2403,2401,1,0,0,0,2403,2402,1,0,0,0,2404,393,1,0,0,0,2405,
2410,3,28,14,0,2406,2407,5,132,0,0,2407,2409,3,28,14,0,2408,2406,1,0,0,0,
2409,2412,1,0,0,0,2410,2408,1,0,0,0,2410,2411,1,0,0,0,2411,2419,1,0,0,0,
2412,2410,1,0,0,0,2413,2415,5,133,0,0,2414,2416,5,180,0,0,2415,2414,1,0,
0,0,2416,2417,1,0,0,0,2417,2415,1,0,0,0,2417,2418,1,0,0,0,2418,2420,1,0,
0,0,2419,2413,1,0,0,0,2419,2420,1,0,0,0,2420,395,1,0,0,0,2421,2422,7,16,
0,0,2422,397,1,0,0,0,2423,2424,5,26,0,0,2424,2426,3,434,217,0,2425,2427,
3,230,115,0,2426,2425,1,0,0,0,2426,2427,1,0,0,0,2427,2429,1,0,0,0,2428,2430,
3,234,117,0,2429,2428,1,0,0,0,2429,2430,1,0,0,0,2430,2432,1,0,0,0,2431,2433,
3,238,119,0,2432,2431,1,0,0,0,2432,2433,1,0,0,0,2433,2434,1,0,0,0,2434,2436,
3,250,125,0,2435,2437,5,134,0,0,2436,2435,1,0,0,0,2436,2437,1,0,0,0,2437,
399,1,0,0,0,2438,2440,7,17,0,0,2439,2438,1,0,0,0,2439,2440,1,0,0,0,2440,
2441,1,0,0,0,2441,2442,5,92,0,0,2442,2444,3,434,217,0,2443,2445,3,230,115,
0,2444,2443,1,0,0,0,2444,2445,1,0,0,0,2445,2447,1,0,0,0,2446,2448,3,314,
157,0,2447,2446,1,0,0,0,2447,2448,1,0,0,0,2448,2450,1,0,0,0,2449,2451,3,
238,119,0,2450,2449,1,0,0,0,2450,2451,1,0,0,0,2451,2452,1,0,0,0,2452,2454,
3,316,158,0,2453,2455,5,134,0,0,2454,2453,1,0,0,0,2454,2455,1,0,0,0,2455,
401,1,0,0,0,2456,2457,5,56,0,0,2457,2459,3,434,217,0,2458,2460,3,326,163,
0,2459,2458,1,0,0,0,2459,2460,1,0,0,0,2460,2462,1,0,0,0,2461,2463,3,332,
166,0,2462,2461,1,0,0,0,2462,2463,1,0,0,0,2463,2465,1,0,0,0,2464,2466,3,
238,119,0,2465,2464,1,0,0,0,2465,2466,1,0,0,0,2466,2467,1,0,0,0,2467,2469,
3,250,125,0,2468,2470,5,134,0,0,2469,2468,1,0,0,0,2469,2470,1,0,0,0,2470,
403,1,0,0,0,2471,2472,5,37,0,0,2472,2474,3,434,217,0,2473,2475,3,340,170,
0,2474,2473,1,0,0,0,2474,2475,1,0,0,0,2475,2476,1,0,0,0,2476,2478,3,342,
171,0,2477,2479,5,134,0,0,2478,2477,1,0,0,0,2478,2479,1,0,0,0,2479,405,1,
0,0,0,2480,2481,5,31,0,0,2481,2482,3,274,137,0,2482,2484,3,434,217,0,2483,
2485,3,326,163,0,2484,2483,1,0,0,0,2484,2485,1,0,0,0,2485,2486,1,0,0,0,2486,
2488,5,129,0,0,2487,2489,3,280,140,0,2488,2487,1,0,0,0,2488,2489,1,0,0,0,
2489,2490,1,0,0,0,2490,2492,5,130,0,0,2491,2493,3,238,119,0,2492,2491,1,
0,0,0,2492,2493,1,0,0,0,2493,2494,1,0,0,0,2494,2495,5,134,0,0,2495,407,1,
0,0,0,2496,2497,5,39,0,0,2497,2506,3,4,2,0,2498,2499,3,268,134,0,2499,2500,
5,134,0,0,2500,2507,1,0,0,0,2501,2502,3,276,138,0,2502,2503,5,125,0,0,2503,
2504,3,300,150,0,2504,2505,5,126,0,0,2505,2507,1,0,0,0,2506,2498,1,0,0,0,
2506,2501,1,0,0,0,2507,409,1,0,0,0,2508,2509,3,268,134,0,2509,2510,5,134,
0,0,2510,411,1,0,0,0,2511,2525,3,276,138,0,2512,2513,5,125,0,0,2513,2514,
3,290,145,0,2514,2519,5,126,0,0,2515,2516,5,145,0,0,2516,2517,3,272,136,
0,2517,2518,5,134,0,0,2518,2520,1,0,0,0,2519,2515,1,0,0,0,2519,2520,1,0,
0,0,2520,2526,1,0,0,0,2521,2522,3,374,187,0,2522,2523,3,74,37,0,2523,2524,
5,134,0,0,2524,2526,1,0,0,0,2525,2512,1,0,0,0,2525,2521,1,0,0,0,2526,413,
1,0,0,0,2527,2528,5,27,0,0,2528,2529,3,4,2,0,2529,2530,3,264,132,0,2530,
2531,5,134,0,0,2531,415,1,0,0,0,2532,2533,5,94,0,0,2533,2534,5,127,0,0,2534,
2535,3,280,140,0,2535,2544,5,128,0,0,2536,2537,5,125,0,0,2537,2538,3,290,
145,0,2538,2539,5,126,0,0,2539,2545,1,0,0,0,2540,2541,3,374,187,0,2541,2542,
3,74,37,0,2542,2543,5,134,0,0,2543,2545,1,0,0,0,2544,2536,1,0,0,0,2544,2540,
1,0,0,0,2545,417,1,0,0,0,2546,2547,5,144,0,0,2547,2548,3,434,217,0,2548,
2549,5,129,0,0,2549,2550,5,130,0,0,2550,2551,3,312,156,0,2551,419,1,0,0,
0,2552,2553,3,434,217,0,2553,2555,5,129,0,0,2554,2556,3,280,140,0,2555,2554,
1,0,0,0,2555,2556,1,0,0,0,2556,2557,1,0,0,0,2557,2559,5,130,0,0,2558,2560,
3,310,155,0,2559,2558,1,0,0,0,2559,2560,1,0,0,0,2560,2561,1,0,0,0,2561,2562,
3,312,156,0,2562,421,1,0,0,0,2563,2565,3,424,212,0,2564,2566,3,230,115,0,
2565,2564,1,0,0,0,2565,2566,1,0,0,0,2566,2567,1,0,0,0,2567,2569,5,129,0,
0,2568,2570,3,280,140,0,2569,2568,1,0,0,0,2569,2570,1,0,0,0,2570,2571,1,
0,0,0,2571,2573,5,130,0,0,2572,2574,3,238,119,0,2573,2572,1,0,0,0,2573,2574,
1,0,0,0,2574,2580,1,0,0,0,2575,2581,3,278,139,0,2576,2577,3,374,187,0,2577,
2578,3,74,37,0,2578,2579,5,134,0,0,2579,2581,1,0,0,0,2580,2575,1,0,0,0,2580,
2576,1,0,0,0,2581,423,1,0,0,0,2582,2588,3,434,217,0,2583,2584,3,434,217,
0,2584,2585,5,149,0,0,2585,2586,3,434,217,0,2586,2588,1,0,0,0,2587,2582,
1,0,0,0,2587,2583,1,0,0,0,2588,2596,1,0,0,0,2589,2591,3,22,11,0,2590,2589,
1,0,0,0,2590,2591,1,0,0,0,2591,2592,1,0,0,0,2592,2593,5,131,0,0,2593,2595,
3,434,217,0,2594,2590,1,0,0,0,2595,2598,1,0,0,0,2596,2594,1,0,0,0,2596,2597,
1,0,0,0,2597,425,1,0,0,0,2598,2596,1,0,0,0,2599,2600,5,70,0,0,2600,2601,
3,306,153,0,2601,2603,5,129,0,0,2602,2604,5,54,0,0,2603,2602,1,0,0,0,2603,
2604,1,0,0,0,2604,2605,1,0,0,0,2605,2611,3,428,214,0,2606,2608,5,132,0,0,
2607,2609,5,54,0,0,2608,2607,1,0,0,0,2608,2609,1,0,0,0,2609,2610,1,0,0,0,
2610,2612,3,428,214,0,2611,2606,1,0,0,0,2611,2612,1,0,0,0,2612,2613,1,0,
0,0,2613,2619,5,130,0,0,2614,2620,3,312,156,0,2615,2616,3,374,187,0,2616,
2617,3,74,37,0,2617,2618,5,134,0,0,2618,2620,1,0,0,0,2619,2614,1,0,0,0,2619,
2615,1,0,0,0,2620,427,1,0,0,0,2621,2622,3,4,2,0,2622,2625,3,434,217,0,2623,
2624,5,145,0,0,2624,2626,3,28,14,0,2625,2623,1,0,0,0,2625,2626,1,0,0,0,2626,
429,1,0,0,0,2627,2629,5,129,0,0,2628,2630,3,24,12,0,2629,2628,1,0,0,0,2629,
2630,1,0,0,0,2630,2631,1,0,0,0,2631,2632,5,130,0,0,2632,431,1,0,0,0,2633,
2635,5,129,0,0,2634,2636,3,24,12,0,2635,2634,1,0,0,0,2635,2636,1,0,0,0,2636,
2637,1,0,0,0,2637,2639,5,130,0,0,2638,2640,3,88,44,0,2639,2638,1,0,0,0,2639,
2640,1,0,0,0,2640,433,1,0,0,0,2641,2642,7,18,0,0,2642,435,1,0,0,0,344,437,
440,443,448,452,458,461,466,470,477,479,487,495,501,505,510,520,528,538,
544,547,551,559,564,574,587,595,601,603,610,618,626,634,642,650,660,662,
668,673,681,689,697,699,702,709,714,721,725,727,755,759,764,768,776,779,
784,788,792,798,812,818,830,834,839,843,849,857,866,884,887,892,895,910,
916,920,926,931,934,942,950,961,966,971,973,982,990,997,1005,1009,1018,1023,
1025,1034,1042,1046,1051,1053,1058,1062,1069,1077,1079,1083,1086,1089,1097,
1107,1124,1131,1135,1145,1150,1157,1166,1171,1178,1190,1201,1209,1214,1223,
1232,1241,1247,1252,1256,1260,1264,1268,1275,1283,1296,1306,1328,1332,1336,
1341,1361,1366,1371,1378,1381,1403,1415,1419,1427,1437,1444,1448,1453,1456,
1461,1469,1474,1481,1487,1495,1503,1506,1513,1520,1524,1527,1533,1537,1543,
1557,1563,1570,1575,1578,1581,1588,1598,1615,1620,1624,1627,1630,1637,1643,
1651,1657,1667,1675,1681,1692,1696,1698,1703,1707,1714,1723,1730,1733,1736,
1740,1745,1758,1768,1775,1787,1794,1806,1812,1816,1820,1826,1832,1834,1841,
1845,1848,1852,1862,1865,1872,1875,1880,1885,1887,1890,1893,1899,1902,1914,
1918,1921,1931,1934,1940,1967,1980,1986,1995,2001,2004,2012,2016,2022,2028,
2034,2045,2049,2051,2061,2067,2070,2083,2089,2092,2095,2102,2107,2111,2115,
2132,2135,2140,2144,2148,2157,2160,2165,2169,2174,2178,2180,2191,2195,2197,
2202,2207,2214,2220,2225,2231,2235,2241,2248,2258,2261,2264,2269,2275,2279,
2281,2288,2295,2303,2307,2322,2326,2335,2339,2343,2365,2373,2379,2388,2397,
2403,2410,2417,2419,2426,2429,2432,2436,2439,2444,2447,2450,2454,2459,2462,
2465,2469,2474,2478,2484,2488,2492,2506,2519,2525,2544,2555,2559,2565,2569,
2573,2580,2587,2590,2596,2603,2608,2611,2619,2625,2629,2635,2639];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class CSharpParser extends antlr4.Parser {

    static grammarFileName = "CSharpParser.g4";
    static literalNames = [ null, "'\\u00EF\\u00BB\\u00BF'", null, "'/***/'", 
                            null, null, null, null, "'#'", "'abstract'", 
                            "'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", 
                            "'async'", "'await'", "'base'", "'bool'", "'break'", 
                            "'by'", "'byte'", "'case'", "'catch'", "'char'", 
                            "'checked'", "'class'", "'const'", "'continue'", 
                            "'decimal'", "'default'", "'delegate'", "'descending'", 
                            "'do'", "'double'", "'dynamic'", "'else'", "'enum'", 
                            "'equals'", "'event'", "'explicit'", "'extern'", 
                            "'false'", "'finally'", "'fixed'", "'float'", 
                            "'for'", "'foreach'", "'from'", "'get'", "'goto'", 
                            "'group'", "'if'", "'implicit'", "'in'", "'int'", 
                            "'interface'", "'internal'", "'into'", "'is'", 
                            "'join'", "'let'", "'lock'", "'long'", "'nameof'", 
                            "'namespace'", "'new'", "'null'", "'object'", 
                            "'on'", "'operator'", "'orderby'", "'out'", 
                            "'override'", "'params'", "'partial'", "'private'", 
                            "'protected'", "'public'", "'readonly'", "'ref'", 
                            "'remove'", "'return'", "'sbyte'", "'sealed'", 
                            "'select'", "'set'", "'short'", "'sizeof'", 
                            "'stackalloc'", "'static'", "'string'", "'struct'", 
                            "'switch'", "'this'", "'throw'", "'true'", "'try'", 
                            "'typeof'", "'uint'", "'ulong'", "'unchecked'", 
                            "'unmanaged'", "'unsafe'", "'ushort'", "'using'", 
                            "'var'", "'virtual'", "'void'", "'volatile'", 
                            "'when'", "'where'", "'while'", "'yield'", null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, "'{'", "'}'", "'['", "']'", "'('", 
                            "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", 
                            "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", 
                            "'~'", "'='", "'<'", "'>'", "'?'", "'::'", "'??'", 
                            "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", 
                            "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", 
                            "'/='", "'%='", "'&='", "'|='", "'^='", "'<<'", 
                            "'<<='", "'??='", "'..'", "'{{'", null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'define'", "'undef'", "'elif'", "'endif'", 
                            "'line'", null, null, null, null, null, null, 
                            "'hidden'", null, null, null, "'}}'" ];
    static symbolicNames = [ null, "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", 
                             "EMPTY_DELIMITED_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
                             "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", 
                             "WHITESPACES", "SHARP", "ABSTRACT", "ADD", 
                             "ALIAS", "ARGLIST", "AS", "ASCENDING", "ASYNC", 
                             "AWAIT", "BASE", "BOOL", "BREAK", "BY", "BYTE", 
                             "CASE", "CATCH", "CHAR", "CHECKED", "CLASS", 
                             "CONST", "CONTINUE", "DECIMAL", "DEFAULT", 
                             "DELEGATE", "DESCENDING", "DO", "DOUBLE", "DYNAMIC", 
                             "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", 
                             "EXTERN", "FALSE", "FINALLY", "FIXED", "FLOAT", 
                             "FOR", "FOREACH", "FROM", "GET", "GOTO", "GROUP", 
                             "IF", "IMPLICIT", "IN", "INT", "INTERFACE", 
                             "INTERNAL", "INTO", "IS", "JOIN", "LET", "LOCK", 
                             "LONG", "NAMEOF", "NAMESPACE", "NEW", "NULL_", 
                             "OBJECT", "ON", "OPERATOR", "ORDERBY", "OUT", 
                             "OVERRIDE", "PARAMS", "PARTIAL", "PRIVATE", 
                             "PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", 
                             "RETURN", "SBYTE", "SEALED", "SELECT", "SET", 
                             "SHORT", "SIZEOF", "STACKALLOC", "STATIC", 
                             "STRING", "STRUCT", "SWITCH", "THIS", "THROW", 
                             "TRUE", "TRY", "TYPEOF", "UINT", "ULONG", "UNCHECKED", 
                             "UNMANAGED", "UNSAFE", "USHORT", "USING", "VAR", 
                             "VIRTUAL", "VOID", "VOLATILE", "WHEN", "WHERE", 
                             "WHILE", "YIELD", "IDENTIFIER", "LITERAL_ACCESS", 
                             "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "BIN_INTEGER_LITERAL", 
                             "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
                             "VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", 
                             "INTERPOLATED_VERBATIUM_STRING_START", "OPEN_BRACE", 
                             "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", 
                             "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", 
                             "COLON", "SEMICOLON", "PLUS", "MINUS", "STAR", 
                             "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", 
                             "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", 
                             "INTERR", "DOUBLE_COLON", "OP_COALESCING", 
                             "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", 
                             "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", 
                             "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", 
                             "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", 
                             "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", 
                             "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
                             "OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", 
                             "REGULAR_CHAR_INSIDE", "VERBATIUM_DOUBLE_QUOTE_INSIDE", 
                             "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", 
                             "VERBATIUM_INSIDE_STRING", "CLOSE_BRACE_INSIDE", 
                             "FORMAT_STRING", "DIRECTIVE_WHITESPACES", "DIGITS", 
                             "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", 
                             "ERROR", "WARNING", "REGION", "ENDREGION", 
                             "PRAGMA", "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
                             "DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE" ];
    static ruleNames = [ "compilation_unit", "namespace_or_type_name", "type_", 
                         "base_type", "tuple_type", "tuple_element", "simple_type", 
                         "numeric_type", "integral_type", "floating_point_type", 
                         "class_type", "type_argument_list", "argument_list", 
                         "argument", "expression", "non_assignment_expression", 
                         "assignment", "assignment_operator", "conditional_expression", 
                         "null_coalescing_expression", "conditional_or_expression", 
                         "conditional_and_expression", "inclusive_or_expression", 
                         "exclusive_or_expression", "and_expression", "equality_expression", 
                         "relational_expression", "shift_expression", "additive_expression", 
                         "multiplicative_expression", "switch_expression", 
                         "switch_expression_arms", "switch_expression_arm", 
                         "range_expression", "unary_expression", "primary_expression", 
                         "primary_expression_start", "throwable_expression", 
                         "throw_expression", "member_access", "bracket_expression", 
                         "indexer_argument", "predefined_type", "expression_list", 
                         "object_or_collection_initializer", "object_initializer", 
                         "member_initializer_list", "member_initializer", 
                         "initializer_value", "collection_initializer", 
                         "element_initializer", "anonymous_object_initializer", 
                         "member_declarator_list", "member_declarator", 
                         "unbound_type_name", "generic_dimension_specifier", 
                         "isType", "isTypePatternArms", "isTypePatternArm", 
                         "lambda_expression", "anonymous_function_signature", 
                         "explicit_anonymous_function_parameter_list", "explicit_anonymous_function_parameter", 
                         "implicit_anonymous_function_parameter_list", "anonymous_function_body", 
                         "query_expression", "from_clause", "query_body", 
                         "query_body_clause", "let_clause", "where_clause", 
                         "combined_join_clause", "orderby_clause", "ordering", 
                         "select_or_group_clause", "query_continuation", 
                         "statement", "declarationStatement", "local_function_declaration", 
                         "local_function_header", "local_function_modifiers", 
                         "local_function_body", "labeled_Statement", "embedded_statement", 
                         "simple_embedded_statement", "block", "local_variable_declaration", 
                         "local_variable_type", "local_variable_declarator", 
                         "local_variable_initializer", "local_constant_declaration", 
                         "if_body", "switch_section", "switch_label", "case_guard", 
                         "statement_list", "for_initializer", "for_iterator", 
                         "catch_clauses", "specific_catch_clause", "general_catch_clause", 
                         "exception_filter", "finally_clause", "resource_acquisition", 
                         "namespace_declaration", "qualified_identifier", 
                         "namespace_body", "extern_alias_directives", "extern_alias_directive", 
                         "using_directives", "using_directive", "namespace_member_declarations", 
                         "namespace_member_declaration", "type_declaration", 
                         "qualified_alias_member", "type_parameter_list", 
                         "type_parameter", "class_base", "interface_type_list", 
                         "type_parameter_constraints_clauses", "type_parameter_constraints_clause", 
                         "type_parameter_constraints", "primary_constraint", 
                         "secondary_constraints", "constructor_constraint", 
                         "class_body", "class_member_declarations", "class_member_declaration", 
                         "all_member_modifiers", "all_member_modifier", 
                         "common_member_declaration", "typed_member_declaration", 
                         "constant_declarators", "constant_declarator", 
                         "variable_declarators", "variable_declarator", 
                         "variable_initializer", "return_type", "member_name", 
                         "method_body", "formal_parameter_list", "fixed_parameters", 
                         "fixed_parameter", "parameter_modifier", "parameter_array", 
                         "accessor_declarations", "get_accessor_declaration", 
                         "set_accessor_declaration", "accessor_modifier", 
                         "accessor_body", "event_accessor_declarations", 
                         "add_accessor_declaration", "remove_accessor_declaration", 
                         "overloadable_operator", "conversion_operator_declarator", 
                         "constructor_initializer", "body", "struct_interfaces", 
                         "struct_body", "struct_member_declaration", "array_type", 
                         "rank_specifier", "array_initializer", "variant_type_parameter_list", 
                         "variant_type_parameter", "variance_annotation", 
                         "interface_base", "interface_body", "interface_member_declaration", 
                         "interface_accessors", "enum_base", "enum_body", 
                         "enum_member_declaration", "global_attribute_section", 
                         "global_attribute_target", "attributes", "attribute_section", 
                         "attribute_target", "attribute_list", "attribute", 
                         "attribute_argument", "pointer_type", "fixed_pointer_declarators", 
                         "fixed_pointer_declarator", "fixed_pointer_initializer", 
                         "fixed_size_buffer_declarator", "stackalloc_initializer", 
                         "right_arrow", "right_shift", "right_shift_assignment", 
                         "literal", "boolean_literal", "string_literal", 
                         "interpolated_regular_string", "interpolated_verbatium_string", 
                         "interpolated_regular_string_part", "interpolated_verbatium_string_part", 
                         "interpolated_string_expression", "keyword", "class_definition", 
                         "struct_definition", "interface_definition", "enum_definition", 
                         "delegate_definition", "event_declaration", "field_declaration", 
                         "property_declaration", "constant_declaration", 
                         "indexer_declaration", "destructor_definition", 
                         "constructor_declaration", "method_declaration", 
                         "method_member_name", "operator_declaration", "arg_declaration", 
                         "method_invocation", "object_creation_expression", 
                         "identifier" ];

    constructor(input) {
		super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CSharpParser.ruleNames;
        this.literalNames = CSharpParser.literalNames;
        this.symbolicNames = CSharpParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 86:
    	    		return this.local_variable_declaration_sempred(localctx, predIndex);
    	case 187:
    	    		return this.right_arrow_sempred(localctx, predIndex);
    	case 188:
    	    		return this.right_shift_sempred(localctx, predIndex);
    	case 189:
    	    		return this.right_shift_assignment_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    local_variable_declaration_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			// return  this.IsLocalVariableDeclaration() ;
    			return (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    right_arrow_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    right_shift_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    right_shift_assignment_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	compilation_unit() {
	    let localctx = new Compilation_unitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CSharpParser.RULE_compilation_unit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 437;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.BYTE_ORDER_MARK) {
	            this.state = 436;
	            this.match(CSharpParser.BYTE_ORDER_MARK);
	        }

	        this.state = 440;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        if(la_===1) {
	            this.state = 439;
	            this.extern_alias_directives();

	        }
	        this.state = 443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.USING) {
	            this.state = 442;
	            this.using_directives();
	        }

	        this.state = 448;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 445;
	                this.global_attribute_section(); 
	            }
	            this.state = 450;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
	        }

	        this.state = 452;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (CSharpParser.ENUM - 37)) | (1 << (CSharpParser.EXTERN - 37)) | (1 << (CSharpParser.INTERFACE - 37)) | (1 << (CSharpParser.INTERNAL - 37)) | (1 << (CSharpParser.NAMESPACE - 37)) | (1 << (CSharpParser.NEW - 37)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (CSharpParser.OVERRIDE - 73)) | (1 << (CSharpParser.PARTIAL - 73)) | (1 << (CSharpParser.PRIVATE - 73)) | (1 << (CSharpParser.PROTECTED - 73)) | (1 << (CSharpParser.PUBLIC - 73)) | (1 << (CSharpParser.READONLY - 73)) | (1 << (CSharpParser.REF - 73)) | (1 << (CSharpParser.SEALED - 73)) | (1 << (CSharpParser.STATIC - 73)) | (1 << (CSharpParser.STRUCT - 73)) | (1 << (CSharpParser.UNSAFE - 73)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (CSharpParser.VIRTUAL - 107)) | (1 << (CSharpParser.VOLATILE - 107)) | (1 << (CSharpParser.OPEN_BRACKET - 107)))) !== 0)) {
	            this.state = 451;
	            this.namespace_member_declarations();
	        }

	        this.state = 454;
	        this.match(CSharpParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_or_type_name() {
	    let localctx = new Namespace_or_type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CSharpParser.RULE_namespace_or_type_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 461;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 456;
	            this.identifier();
	            this.state = 458;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	            if(la_===1) {
	                this.state = 457;
	                this.type_argument_list();

	            }
	            break;

	        case 2:
	            this.state = 460;
	            this.qualified_alias_member();
	            break;

	        }
	        this.state = 470;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 463;
	                this.match(CSharpParser.DOT);
	                this.state = 464;
	                this.identifier();
	                this.state = 466;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	                if(la_===1) {
	                    this.state = 465;
	                    this.type_argument_list();

	                } 
	            }
	            this.state = 472;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_() {
	    let localctx = new Type_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CSharpParser.RULE_type_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 473;
	        this.base_type();
	        this.state = 479;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 477;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case CSharpParser.INTERR:
	                    this.state = 474;
	                    this.match(CSharpParser.INTERR);
	                    break;
	                case CSharpParser.OPEN_BRACKET:
	                    this.state = 475;
	                    this.rank_specifier();
	                    break;
	                case CSharpParser.STAR:
	                    this.state = 476;
	                    this.match(CSharpParser.STAR);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 481;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	base_type() {
	    let localctx = new Base_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CSharpParser.RULE_base_type);
	    try {
	        this.state = 487;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.BOOL:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.FLOAT:
	        case CSharpParser.INT:
	        case CSharpParser.LONG:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SHORT:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.USHORT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 482;
	            this.simple_type();
	            break;
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BY:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.STRING:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 483;
	            this.class_type();
	            break;
	        case CSharpParser.VOID:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 484;
	            this.match(CSharpParser.VOID);
	            this.state = 485;
	            this.match(CSharpParser.STAR);
	            break;
	        case CSharpParser.OPEN_PARENS:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 486;
	            this.tuple_type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_type() {
	    let localctx = new Tuple_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CSharpParser.RULE_tuple_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 489;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 490;
	        this.tuple_element();
	        this.state = 493; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 491;
	            this.match(CSharpParser.COMMA);
	            this.state = 492;
	            this.tuple_element();
	            this.state = 495; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===CSharpParser.COMMA);
	        this.state = 497;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple_element() {
	    let localctx = new Tuple_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CSharpParser.RULE_tuple_element);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499;
	        this.type_();
	        this.state = 501;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (CSharpParser.UNMANAGED - 102)) | (1 << (CSharpParser.VAR - 102)) | (1 << (CSharpParser.WHEN - 102)) | (1 << (CSharpParser.WHERE - 102)) | (1 << (CSharpParser.YIELD - 102)) | (1 << (CSharpParser.IDENTIFIER - 102)))) !== 0)) {
	            this.state = 500;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_type() {
	    let localctx = new Simple_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CSharpParser.RULE_simple_type);
	    try {
	        this.state = 505;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.FLOAT:
	        case CSharpParser.INT:
	        case CSharpParser.LONG:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SHORT:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.USHORT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 503;
	            this.numeric_type();
	            break;
	        case CSharpParser.BOOL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 504;
	            this.match(CSharpParser.BOOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numeric_type() {
	    let localctx = new Numeric_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CSharpParser.RULE_numeric_type);
	    try {
	        this.state = 510;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.INT:
	        case CSharpParser.LONG:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SHORT:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.USHORT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 507;
	            this.integral_type();
	            break;
	        case CSharpParser.DOUBLE:
	        case CSharpParser.FLOAT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 508;
	            this.floating_point_type();
	            break;
	        case CSharpParser.DECIMAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 509;
	            this.match(CSharpParser.DECIMAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integral_type() {
	    let localctx = new Integral_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CSharpParser.RULE_integral_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        _la = this._input.LA(1);
	        if(!(_la===CSharpParser.BYTE || _la===CSharpParser.CHAR || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (CSharpParser.INT - 55)) | (1 << (CSharpParser.LONG - 55)) | (1 << (CSharpParser.SBYTE - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (CSharpParser.SHORT - 87)) | (1 << (CSharpParser.UINT - 87)) | (1 << (CSharpParser.ULONG - 87)) | (1 << (CSharpParser.USHORT - 87)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floating_point_type() {
	    let localctx = new Floating_point_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CSharpParser.RULE_floating_point_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 514;
	        _la = this._input.LA(1);
	        if(!(_la===CSharpParser.DOUBLE || _la===CSharpParser.FLOAT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_type() {
	    let localctx = new Class_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CSharpParser.RULE_class_type);
	    try {
	        this.state = 520;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 516;
	            this.namespace_or_type_name();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 517;
	            this.match(CSharpParser.OBJECT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 518;
	            this.match(CSharpParser.DYNAMIC);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 519;
	            this.match(CSharpParser.STRING);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_argument_list() {
	    let localctx = new Type_argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CSharpParser.RULE_type_argument_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.match(CSharpParser.LT);
	        this.state = 523;
	        this.type_();
	        this.state = 528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 524;
	            this.match(CSharpParser.COMMA);
	            this.state = 525;
	            this.type_();
	            this.state = 530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 531;
	        this.match(CSharpParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument_list() {
	    let localctx = new Argument_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CSharpParser.RULE_argument_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.argument();
	        this.state = 538;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 534;
	            this.match(CSharpParser.COMMA);
	            this.state = 535;
	            this.argument();
	            this.state = 540;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CSharpParser.RULE_argument);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 544;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 541;
	            this.identifier();
	            this.state = 542;
	            this.match(CSharpParser.COLON);

	        }
	        this.state = 547;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 546;
	            localctx.refout = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CSharpParser.IN - 54)) | (1 << (CSharpParser.OUT - 54)) | (1 << (CSharpParser.REF - 54)))) !== 0))) {
	                localctx.refout = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 551;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        if(la_===1) {
	            this.state = 549;
	            this.match(CSharpParser.VAR);

	        } else if(la_===2) {
	            this.state = 550;
	            this.type_();

	        }
	        this.state = 553;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CSharpParser.RULE_expression);
	    try {
	        this.state = 559;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 555;
	            this.assignment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 556;
	            this.non_assignment_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 557;
	            this.match(CSharpParser.REF);
	            this.state = 558;
	            this.non_assignment_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	non_assignment_expression() {
	    let localctx = new Non_assignment_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CSharpParser.RULE_non_assignment_expression);
	    try {
	        this.state = 564;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 561;
	            this.lambda_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 562;
	            this.query_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 563;
	            this.conditional_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CSharpParser.RULE_assignment);
	    try {
	        this.state = 574;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 566;
	            this.unary_expression();
	            this.state = 567;
	            this.assignment_operator();
	            this.state = 568;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 570;
	            this.unary_expression();
	            this.state = 571;
	            this.match(CSharpParser.OP_COALESCING_ASSIGNMENT);
	            this.state = 572;
	            this.throwable_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment_operator() {
	    let localctx = new Assignment_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CSharpParser.RULE_assignment_operator);
	    try {
	        this.state = 587;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ASSIGNMENT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 576;
	            this.match(CSharpParser.ASSIGNMENT);
	            break;
	        case CSharpParser.OP_ADD_ASSIGNMENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 577;
	            this.match(CSharpParser.OP_ADD_ASSIGNMENT);
	            break;
	        case CSharpParser.OP_SUB_ASSIGNMENT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 578;
	            this.match(CSharpParser.OP_SUB_ASSIGNMENT);
	            break;
	        case CSharpParser.OP_MULT_ASSIGNMENT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 579;
	            this.match(CSharpParser.OP_MULT_ASSIGNMENT);
	            break;
	        case CSharpParser.OP_DIV_ASSIGNMENT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 580;
	            this.match(CSharpParser.OP_DIV_ASSIGNMENT);
	            break;
	        case CSharpParser.OP_MOD_ASSIGNMENT:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 581;
	            this.match(CSharpParser.OP_MOD_ASSIGNMENT);
	            break;
	        case CSharpParser.OP_AND_ASSIGNMENT:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 582;
	            this.match(CSharpParser.OP_AND_ASSIGNMENT);
	            break;
	        case CSharpParser.OP_OR_ASSIGNMENT:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 583;
	            this.match(CSharpParser.OP_OR_ASSIGNMENT);
	            break;
	        case CSharpParser.OP_XOR_ASSIGNMENT:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 584;
	            this.match(CSharpParser.OP_XOR_ASSIGNMENT);
	            break;
	        case CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 585;
	            this.match(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT);
	            break;
	        case CSharpParser.GT:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 586;
	            this.right_shift_assignment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_expression() {
	    let localctx = new Conditional_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CSharpParser.RULE_conditional_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 589;
	        this.null_coalescing_expression();
	        this.state = 595;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        if(la_===1) {
	            this.state = 590;
	            this.match(CSharpParser.INTERR);
	            this.state = 591;
	            this.throwable_expression();
	            this.state = 592;
	            this.match(CSharpParser.COLON);
	            this.state = 593;
	            this.throwable_expression();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	null_coalescing_expression() {
	    let localctx = new Null_coalescing_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CSharpParser.RULE_null_coalescing_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 597;
	        this.conditional_or_expression();
	        this.state = 603;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 598;
	            this.match(CSharpParser.OP_COALESCING);
	            this.state = 601;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CSharpParser.ADD:
	            case CSharpParser.ALIAS:
	            case CSharpParser.ARGLIST:
	            case CSharpParser.ASCENDING:
	            case CSharpParser.ASYNC:
	            case CSharpParser.AWAIT:
	            case CSharpParser.BASE:
	            case CSharpParser.BOOL:
	            case CSharpParser.BY:
	            case CSharpParser.BYTE:
	            case CSharpParser.CHAR:
	            case CSharpParser.CHECKED:
	            case CSharpParser.DECIMAL:
	            case CSharpParser.DEFAULT:
	            case CSharpParser.DELEGATE:
	            case CSharpParser.DESCENDING:
	            case CSharpParser.DOUBLE:
	            case CSharpParser.DYNAMIC:
	            case CSharpParser.EQUALS:
	            case CSharpParser.FALSE:
	            case CSharpParser.FLOAT:
	            case CSharpParser.FROM:
	            case CSharpParser.GET:
	            case CSharpParser.GROUP:
	            case CSharpParser.INT:
	            case CSharpParser.INTO:
	            case CSharpParser.JOIN:
	            case CSharpParser.LET:
	            case CSharpParser.LONG:
	            case CSharpParser.NAMEOF:
	            case CSharpParser.NEW:
	            case CSharpParser.NULL_:
	            case CSharpParser.OBJECT:
	            case CSharpParser.ON:
	            case CSharpParser.ORDERBY:
	            case CSharpParser.PARTIAL:
	            case CSharpParser.REMOVE:
	            case CSharpParser.SBYTE:
	            case CSharpParser.SELECT:
	            case CSharpParser.SET:
	            case CSharpParser.SHORT:
	            case CSharpParser.SIZEOF:
	            case CSharpParser.STRING:
	            case CSharpParser.THIS:
	            case CSharpParser.TRUE:
	            case CSharpParser.TYPEOF:
	            case CSharpParser.UINT:
	            case CSharpParser.ULONG:
	            case CSharpParser.UNCHECKED:
	            case CSharpParser.UNMANAGED:
	            case CSharpParser.USHORT:
	            case CSharpParser.VAR:
	            case CSharpParser.WHEN:
	            case CSharpParser.WHERE:
	            case CSharpParser.YIELD:
	            case CSharpParser.IDENTIFIER:
	            case CSharpParser.LITERAL_ACCESS:
	            case CSharpParser.INTEGER_LITERAL:
	            case CSharpParser.HEX_INTEGER_LITERAL:
	            case CSharpParser.BIN_INTEGER_LITERAL:
	            case CSharpParser.REAL_LITERAL:
	            case CSharpParser.CHARACTER_LITERAL:
	            case CSharpParser.REGULAR_STRING:
	            case CSharpParser.VERBATIUM_STRING:
	            case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	            case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	            case CSharpParser.OPEN_PARENS:
	            case CSharpParser.PLUS:
	            case CSharpParser.MINUS:
	            case CSharpParser.STAR:
	            case CSharpParser.AMP:
	            case CSharpParser.CARET:
	            case CSharpParser.BANG:
	            case CSharpParser.TILDE:
	            case CSharpParser.OP_INC:
	            case CSharpParser.OP_DEC:
	            case CSharpParser.OP_RANGE:
	                this.state = 599;
	                this.null_coalescing_expression();
	                break;
	            case CSharpParser.THROW:
	                this.state = 600;
	                this.throw_expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_or_expression() {
	    let localctx = new Conditional_or_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CSharpParser.RULE_conditional_or_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 605;
	        this.conditional_and_expression();
	        this.state = 610;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 606;
	                this.match(CSharpParser.OP_OR);
	                this.state = 607;
	                this.conditional_and_expression(); 
	            }
	            this.state = 612;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditional_and_expression() {
	    let localctx = new Conditional_and_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CSharpParser.RULE_conditional_and_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 613;
	        this.inclusive_or_expression();
	        this.state = 618;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 614;
	                this.match(CSharpParser.OP_AND);
	                this.state = 615;
	                this.inclusive_or_expression(); 
	            }
	            this.state = 620;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inclusive_or_expression() {
	    let localctx = new Inclusive_or_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CSharpParser.RULE_inclusive_or_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 621;
	        this.exclusive_or_expression();
	        this.state = 626;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 622;
	                this.match(CSharpParser.BITWISE_OR);
	                this.state = 623;
	                this.exclusive_or_expression(); 
	            }
	            this.state = 628;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusive_or_expression() {
	    let localctx = new Exclusive_or_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CSharpParser.RULE_exclusive_or_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this.and_expression();
	        this.state = 634;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 630;
	                this.match(CSharpParser.CARET);
	                this.state = 631;
	                this.and_expression(); 
	            }
	            this.state = 636;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_expression() {
	    let localctx = new And_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CSharpParser.RULE_and_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 637;
	        this.equality_expression();
	        this.state = 642;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 638;
	                this.match(CSharpParser.AMP);
	                this.state = 639;
	                this.equality_expression(); 
	            }
	            this.state = 644;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equality_expression() {
	    let localctx = new Equality_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CSharpParser.RULE_equality_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        this.relational_expression();
	        this.state = 650;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 646;
	                _la = this._input.LA(1);
	                if(!(_la===CSharpParser.OP_EQ || _la===CSharpParser.OP_NE)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 647;
	                this.relational_expression(); 
	            }
	            this.state = 652;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relational_expression() {
	    let localctx = new Relational_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CSharpParser.RULE_relational_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 653;
	        this.shift_expression();
	        this.state = 662;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 660;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case CSharpParser.LT:
	                case CSharpParser.GT:
	                case CSharpParser.OP_LE:
	                case CSharpParser.OP_GE:
	                    this.state = 654;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 146)) & ~0x1f) == 0 && ((1 << (_la - 146)) & ((1 << (CSharpParser.LT - 146)) | (1 << (CSharpParser.GT - 146)) | (1 << (CSharpParser.OP_LE - 146)) | (1 << (CSharpParser.OP_GE - 146)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 655;
	                    this.shift_expression();
	                    break;
	                case CSharpParser.IS:
	                    this.state = 656;
	                    this.match(CSharpParser.IS);
	                    this.state = 657;
	                    this.isType();
	                    break;
	                case CSharpParser.AS:
	                    this.state = 658;
	                    this.match(CSharpParser.AS);
	                    this.state = 659;
	                    this.type_();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 664;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shift_expression() {
	    let localctx = new Shift_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CSharpParser.RULE_shift_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this.additive_expression();
	        this.state = 673;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 668;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case CSharpParser.OP_LEFT_SHIFT:
	                    this.state = 666;
	                    this.match(CSharpParser.OP_LEFT_SHIFT);
	                    break;
	                case CSharpParser.GT:
	                    this.state = 667;
	                    this.right_shift();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 670;
	                this.additive_expression(); 
	            }
	            this.state = 675;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additive_expression() {
	    let localctx = new Additive_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CSharpParser.RULE_additive_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 676;
	        this.multiplicative_expression();
	        this.state = 681;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 677;
	                _la = this._input.LA(1);
	                if(!(_la===CSharpParser.PLUS || _la===CSharpParser.MINUS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 678;
	                this.multiplicative_expression(); 
	            }
	            this.state = 683;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicative_expression() {
	    let localctx = new Multiplicative_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CSharpParser.RULE_multiplicative_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 684;
	        this.switch_expression();
	        this.state = 689;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 685;
	                _la = this._input.LA(1);
	                if(!(((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (CSharpParser.STAR - 137)) | (1 << (CSharpParser.DIV - 137)) | (1 << (CSharpParser.PERCENT - 137)))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 686;
	                this.switch_expression(); 
	            }
	            this.state = 691;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_expression() {
	    let localctx = new Switch_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CSharpParser.RULE_switch_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 692;
	        this.range_expression();
	        this.state = 702;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        if(la_===1) {
	            this.state = 693;
	            this.match(CSharpParser.SWITCH);
	            this.state = 694;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (CSharpParser.WHEN - 110)) | (1 << (CSharpParser.WHERE - 110)) | (1 << (CSharpParser.YIELD - 110)) | (1 << (CSharpParser.IDENTIFIER - 110)) | (1 << (CSharpParser.LITERAL_ACCESS - 110)) | (1 << (CSharpParser.INTEGER_LITERAL - 110)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.REAL_LITERAL - 110)) | (1 << (CSharpParser.CHARACTER_LITERAL - 110)) | (1 << (CSharpParser.REGULAR_STRING - 110)) | (1 << (CSharpParser.VERBATIUM_STRING - 110)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 110)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 110)) | (1 << (CSharpParser.OPEN_PARENS - 110)) | (1 << (CSharpParser.PLUS - 110)) | (1 << (CSharpParser.MINUS - 110)) | (1 << (CSharpParser.STAR - 110)) | (1 << (CSharpParser.AMP - 110)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (CSharpParser.CARET - 142)) | (1 << (CSharpParser.BANG - 142)) | (1 << (CSharpParser.TILDE - 142)) | (1 << (CSharpParser.OP_INC - 142)) | (1 << (CSharpParser.OP_DEC - 142)) | (1 << (CSharpParser.OP_RANGE - 142)))) !== 0)) {
	                this.state = 695;
	                this.switch_expression_arms();
	                this.state = 697;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CSharpParser.COMMA) {
	                    this.state = 696;
	                    this.match(CSharpParser.COMMA);
	                }

	            }

	            this.state = 701;
	            this.match(CSharpParser.CLOSE_BRACE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_expression_arms() {
	    let localctx = new Switch_expression_armsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CSharpParser.RULE_switch_expression_arms);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 704;
	        this.switch_expression_arm();
	        this.state = 709;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 705;
	                this.match(CSharpParser.COMMA);
	                this.state = 706;
	                this.switch_expression_arm(); 
	            }
	            this.state = 711;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_expression_arm() {
	    let localctx = new Switch_expression_armContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CSharpParser.RULE_switch_expression_arm);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 712;
	        this.expression();
	        this.state = 714;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.WHEN) {
	            this.state = 713;
	            this.case_guard();
	        }

	        this.state = 716;
	        this.right_arrow();
	        this.state = 717;
	        this.throwable_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	range_expression() {
	    let localctx = new Range_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CSharpParser.RULE_range_expression);
	    var _la = 0; // Token type
	    try {
	        this.state = 727;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 719;
	            this.unary_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FALSE - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.NEW - 64)) | (1 << (CSharpParser.NULL_ - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.SIZEOF - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.THIS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CSharpParser.TRUE - 96)) | (1 << (CSharpParser.TYPEOF - 96)) | (1 << (CSharpParser.UINT - 96)) | (1 << (CSharpParser.ULONG - 96)) | (1 << (CSharpParser.UNCHECKED - 96)) | (1 << (CSharpParser.UNMANAGED - 96)) | (1 << (CSharpParser.USHORT - 96)) | (1 << (CSharpParser.VAR - 96)) | (1 << (CSharpParser.WHEN - 96)) | (1 << (CSharpParser.WHERE - 96)) | (1 << (CSharpParser.YIELD - 96)) | (1 << (CSharpParser.IDENTIFIER - 96)) | (1 << (CSharpParser.LITERAL_ACCESS - 96)) | (1 << (CSharpParser.INTEGER_LITERAL - 96)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 96)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 96)) | (1 << (CSharpParser.REAL_LITERAL - 96)) | (1 << (CSharpParser.CHARACTER_LITERAL - 96)) | (1 << (CSharpParser.REGULAR_STRING - 96)) | (1 << (CSharpParser.VERBATIUM_STRING - 96)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 96)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 96)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (CSharpParser.OPEN_PARENS - 129)) | (1 << (CSharpParser.PLUS - 129)) | (1 << (CSharpParser.MINUS - 129)) | (1 << (CSharpParser.STAR - 129)) | (1 << (CSharpParser.AMP - 129)) | (1 << (CSharpParser.CARET - 129)) | (1 << (CSharpParser.BANG - 129)) | (1 << (CSharpParser.TILDE - 129)) | (1 << (CSharpParser.OP_INC - 129)) | (1 << (CSharpParser.OP_DEC - 129)))) !== 0)) {
	                this.state = 720;
	                this.unary_expression();
	            }

	            this.state = 723;
	            this.match(CSharpParser.OP_RANGE);
	            this.state = 725;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	            if(la_===1) {
	                this.state = 724;
	                this.unary_expression();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_expression() {
	    let localctx = new Unary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CSharpParser.RULE_unary_expression);
	    try {
	        this.state = 755;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 729;
	            this.primary_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 730;
	            this.match(CSharpParser.PLUS);
	            this.state = 731;
	            this.unary_expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 732;
	            this.match(CSharpParser.MINUS);
	            this.state = 733;
	            this.unary_expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 734;
	            this.match(CSharpParser.BANG);
	            this.state = 735;
	            this.unary_expression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 736;
	            this.match(CSharpParser.TILDE);
	            this.state = 737;
	            this.unary_expression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 738;
	            this.match(CSharpParser.OP_INC);
	            this.state = 739;
	            this.unary_expression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 740;
	            this.match(CSharpParser.OP_DEC);
	            this.state = 741;
	            this.unary_expression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 742;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 743;
	            this.type_();
	            this.state = 744;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 745;
	            this.unary_expression();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 747;
	            this.match(CSharpParser.AWAIT);
	            this.state = 748;
	            this.unary_expression();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 749;
	            this.match(CSharpParser.AMP);
	            this.state = 750;
	            this.unary_expression();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 751;
	            this.match(CSharpParser.STAR);
	            this.state = 752;
	            this.unary_expression();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 753;
	            this.match(CSharpParser.CARET);
	            this.state = 754;
	            this.unary_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_expression() {
	    let localctx = new Primary_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CSharpParser.RULE_primary_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 757;
	        localctx.pe = this.primary_expression_start();
	        this.state = 759;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        if(la_===1) {
	            this.state = 758;
	            this.match(CSharpParser.BANG);

	        }
	        this.state = 764;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 761;
	                this.bracket_expression(); 
	            }
	            this.state = 766;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
	        }

	        this.state = 768;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        if(la_===1) {
	            this.state = 767;
	            this.match(CSharpParser.BANG);

	        }
	        this.state = 792;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 776;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case CSharpParser.DOT:
	                case CSharpParser.INTERR:
	                    this.state = 770;
	                    this.member_access();
	                    break;
	                case CSharpParser.OPEN_PARENS:
	                    this.state = 771;
	                    this.method_invocation();
	                    break;
	                case CSharpParser.OP_INC:
	                    this.state = 772;
	                    this.match(CSharpParser.OP_INC);
	                    break;
	                case CSharpParser.OP_DEC:
	                    this.state = 773;
	                    this.match(CSharpParser.OP_DEC);
	                    break;
	                case CSharpParser.OP_PTR:
	                    this.state = 774;
	                    this.match(CSharpParser.OP_PTR);
	                    this.state = 775;
	                    this.identifier();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 779;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	                if(la_===1) {
	                    this.state = 778;
	                    this.match(CSharpParser.BANG);

	                }
	                this.state = 784;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 781;
	                        this.bracket_expression(); 
	                    }
	                    this.state = 786;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	                }

	                this.state = 788;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	                if(la_===1) {
	                    this.state = 787;
	                    this.match(CSharpParser.BANG);

	                } 
	            }
	            this.state = 794;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_expression_start() {
	    let localctx = new Primary_expression_startContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CSharpParser.RULE_primary_expression_start);
	    var _la = 0; // Token type
	    try {
	        this.state = 916;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 795;
	            this.literal();
	            break;

	        case 2:
	            localctx = new SimpleNameExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 796;
	            this.identifier();
	            this.state = 798;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	            if(la_===1) {
	                this.state = 797;
	                this.type_argument_list();

	            }
	            break;

	        case 3:
	            localctx = new ParenthesisExpressionsContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 800;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 801;
	            this.expression();
	            this.state = 802;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 4:
	            localctx = new MemberAccessExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 804;
	            this.predefined_type();
	            break;

	        case 5:
	            localctx = new MemberAccessExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 805;
	            this.qualified_alias_member();
	            break;

	        case 6:
	            localctx = new LiteralAccessExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 806;
	            this.match(CSharpParser.LITERAL_ACCESS);
	            break;

	        case 7:
	            localctx = new ThisReferenceExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 807;
	            this.match(CSharpParser.THIS);
	            break;

	        case 8:
	            localctx = new BaseAccessExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 808;
	            this.match(CSharpParser.BASE);
	            this.state = 818;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CSharpParser.DOT:
	                this.state = 809;
	                this.match(CSharpParser.DOT);
	                this.state = 810;
	                this.identifier();
	                this.state = 812;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	                if(la_===1) {
	                    this.state = 811;
	                    this.type_argument_list();

	                }
	                break;
	            case CSharpParser.OPEN_BRACKET:
	                this.state = 814;
	                this.match(CSharpParser.OPEN_BRACKET);
	                this.state = 815;
	                this.expression_list();
	                this.state = 816;
	                this.match(CSharpParser.CLOSE_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 9:
	            localctx = new ObjectCreationExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 820;
	            this.match(CSharpParser.NEW);
	            this.state = 849;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CSharpParser.ADD:
	            case CSharpParser.ALIAS:
	            case CSharpParser.ARGLIST:
	            case CSharpParser.ASCENDING:
	            case CSharpParser.ASYNC:
	            case CSharpParser.AWAIT:
	            case CSharpParser.BOOL:
	            case CSharpParser.BY:
	            case CSharpParser.BYTE:
	            case CSharpParser.CHAR:
	            case CSharpParser.DECIMAL:
	            case CSharpParser.DESCENDING:
	            case CSharpParser.DOUBLE:
	            case CSharpParser.DYNAMIC:
	            case CSharpParser.EQUALS:
	            case CSharpParser.FLOAT:
	            case CSharpParser.FROM:
	            case CSharpParser.GET:
	            case CSharpParser.GROUP:
	            case CSharpParser.INT:
	            case CSharpParser.INTO:
	            case CSharpParser.JOIN:
	            case CSharpParser.LET:
	            case CSharpParser.LONG:
	            case CSharpParser.NAMEOF:
	            case CSharpParser.OBJECT:
	            case CSharpParser.ON:
	            case CSharpParser.ORDERBY:
	            case CSharpParser.PARTIAL:
	            case CSharpParser.REMOVE:
	            case CSharpParser.SBYTE:
	            case CSharpParser.SELECT:
	            case CSharpParser.SET:
	            case CSharpParser.SHORT:
	            case CSharpParser.STRING:
	            case CSharpParser.UINT:
	            case CSharpParser.ULONG:
	            case CSharpParser.UNMANAGED:
	            case CSharpParser.USHORT:
	            case CSharpParser.VAR:
	            case CSharpParser.VOID:
	            case CSharpParser.WHEN:
	            case CSharpParser.WHERE:
	            case CSharpParser.YIELD:
	            case CSharpParser.IDENTIFIER:
	            case CSharpParser.OPEN_PARENS:
	                this.state = 821;
	                this.type_();
	                this.state = 843;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 822;
	                    this.object_creation_expression();
	                    break;

	                case 2:
	                    this.state = 823;
	                    this.object_or_collection_initializer();
	                    break;

	                case 3:
	                    this.state = 824;
	                    this.match(CSharpParser.OPEN_BRACKET);
	                    this.state = 825;
	                    this.expression_list();
	                    this.state = 826;
	                    this.match(CSharpParser.CLOSE_BRACKET);
	                    this.state = 830;
	                    this._errHandler.sync(this);
	                    var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
	                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        if(_alt===1) {
	                            this.state = 827;
	                            this.rank_specifier(); 
	                        }
	                        this.state = 832;
	                        this._errHandler.sync(this);
	                        _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
	                    }

	                    this.state = 834;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	                    if(la_===1) {
	                        this.state = 833;
	                        this.array_initializer();

	                    }
	                    break;

	                case 4:
	                    this.state = 837; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    do {
	                        this.state = 836;
	                        this.rank_specifier();
	                        this.state = 839; 
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    } while(_la===CSharpParser.OPEN_BRACKET);
	                    this.state = 841;
	                    this.array_initializer();
	                    break;

	                }
	                break;
	            case CSharpParser.OPEN_BRACE:
	                this.state = 845;
	                this.anonymous_object_initializer();
	                break;
	            case CSharpParser.OPEN_BRACKET:
	                this.state = 846;
	                this.rank_specifier();
	                this.state = 847;
	                this.array_initializer();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 10:
	            localctx = new TupleExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 851;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 852;
	            this.argument();
	            this.state = 855; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 853;
	                this.match(CSharpParser.COMMA);
	                this.state = 854;
	                this.argument();
	                this.state = 857; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===CSharpParser.COMMA);
	            this.state = 859;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 11:
	            localctx = new TypeofExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 861;
	            this.match(CSharpParser.TYPEOF);
	            this.state = 862;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 866;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 863;
	                this.unbound_type_name();
	                break;

	            case 2:
	                this.state = 864;
	                this.type_();
	                break;

	            case 3:
	                this.state = 865;
	                this.match(CSharpParser.VOID);
	                break;

	            }
	            this.state = 868;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 12:
	            localctx = new CheckedExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 869;
	            this.match(CSharpParser.CHECKED);
	            this.state = 870;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 871;
	            this.expression();
	            this.state = 872;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 13:
	            localctx = new UncheckedExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 874;
	            this.match(CSharpParser.UNCHECKED);
	            this.state = 875;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 876;
	            this.expression();
	            this.state = 877;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 14:
	            localctx = new DefaultValueExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 879;
	            this.match(CSharpParser.DEFAULT);
	            this.state = 884;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	            if(la_===1) {
	                this.state = 880;
	                this.match(CSharpParser.OPEN_PARENS);
	                this.state = 881;
	                this.type_();
	                this.state = 882;
	                this.match(CSharpParser.CLOSE_PARENS);

	            }
	            break;

	        case 15:
	            localctx = new AnonymousMethodExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 887;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.ASYNC) {
	                this.state = 886;
	                this.match(CSharpParser.ASYNC);
	            }

	            this.state = 889;
	            this.match(CSharpParser.DELEGATE);
	            this.state = 895;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.OPEN_PARENS) {
	                this.state = 890;
	                this.match(CSharpParser.OPEN_PARENS);
	                this.state = 892;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IN - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.OUT - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STRING - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0)) {
	                    this.state = 891;
	                    this.explicit_anonymous_function_parameter_list();
	                }

	                this.state = 894;
	                this.match(CSharpParser.CLOSE_PARENS);
	            }

	            this.state = 897;
	            this.block();
	            break;

	        case 16:
	            localctx = new SizeofExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 898;
	            this.match(CSharpParser.SIZEOF);
	            this.state = 899;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 900;
	            this.type_();
	            this.state = 901;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 17:
	            localctx = new NameofExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 903;
	            this.match(CSharpParser.NAMEOF);
	            this.state = 904;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 910;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 905;
	                    this.identifier();
	                    this.state = 906;
	                    this.match(CSharpParser.DOT); 
	                }
	                this.state = 912;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
	            }

	            this.state = 913;
	            this.identifier();
	            this.state = 914;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwable_expression() {
	    let localctx = new Throwable_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CSharpParser.RULE_throwable_expression);
	    try {
	        this.state = 920;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BASE:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CHECKED:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DEFAULT:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FALSE:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.NEW:
	        case CSharpParser.NULL_:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.SIZEOF:
	        case CSharpParser.STRING:
	        case CSharpParser.THIS:
	        case CSharpParser.TRUE:
	        case CSharpParser.TYPEOF:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNCHECKED:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.LITERAL_ACCESS:
	        case CSharpParser.INTEGER_LITERAL:
	        case CSharpParser.HEX_INTEGER_LITERAL:
	        case CSharpParser.BIN_INTEGER_LITERAL:
	        case CSharpParser.REAL_LITERAL:
	        case CSharpParser.CHARACTER_LITERAL:
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	        case CSharpParser.OPEN_PARENS:
	        case CSharpParser.PLUS:
	        case CSharpParser.MINUS:
	        case CSharpParser.STAR:
	        case CSharpParser.AMP:
	        case CSharpParser.CARET:
	        case CSharpParser.BANG:
	        case CSharpParser.TILDE:
	        case CSharpParser.OP_INC:
	        case CSharpParser.OP_DEC:
	        case CSharpParser.OP_RANGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 918;
	            this.expression();
	            break;
	        case CSharpParser.THROW:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 919;
	            this.throw_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throw_expression() {
	    let localctx = new Throw_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CSharpParser.RULE_throw_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 922;
	        this.match(CSharpParser.THROW);
	        this.state = 923;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_access() {
	    let localctx = new Member_accessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CSharpParser.RULE_member_access);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.INTERR) {
	            this.state = 925;
	            this.match(CSharpParser.INTERR);
	        }

	        this.state = 928;
	        this.match(CSharpParser.DOT);
	        this.state = 929;
	        this.identifier();
	        this.state = 931;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        if(la_===1) {
	            this.state = 930;
	            this.type_argument_list();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracket_expression() {
	    let localctx = new Bracket_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CSharpParser.RULE_bracket_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 934;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.INTERR) {
	            this.state = 933;
	            this.match(CSharpParser.INTERR);
	        }

	        this.state = 936;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 937;
	        this.indexer_argument();
	        this.state = 942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 938;
	            this.match(CSharpParser.COMMA);
	            this.state = 939;
	            this.indexer_argument();
	            this.state = 944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 945;
	        this.match(CSharpParser.CLOSE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexer_argument() {
	    let localctx = new Indexer_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CSharpParser.RULE_indexer_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 950;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        if(la_===1) {
	            this.state = 947;
	            this.identifier();
	            this.state = 948;
	            this.match(CSharpParser.COLON);

	        }
	        this.state = 952;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefined_type() {
	    let localctx = new Predefined_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CSharpParser.RULE_predefined_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 954;
	        _la = this._input.LA(1);
	        if(!(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (CSharpParser.BOOL - 18)) | (1 << (CSharpParser.BYTE - 18)) | (1 << (CSharpParser.CHAR - 18)) | (1 << (CSharpParser.DECIMAL - 18)) | (1 << (CSharpParser.DOUBLE - 18)) | (1 << (CSharpParser.FLOAT - 18)))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (CSharpParser.INT - 55)) | (1 << (CSharpParser.LONG - 55)) | (1 << (CSharpParser.OBJECT - 55)) | (1 << (CSharpParser.SBYTE - 55)))) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (CSharpParser.SHORT - 87)) | (1 << (CSharpParser.STRING - 87)) | (1 << (CSharpParser.UINT - 87)) | (1 << (CSharpParser.ULONG - 87)) | (1 << (CSharpParser.USHORT - 87)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression_list() {
	    let localctx = new Expression_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CSharpParser.RULE_expression_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 956;
	        this.expression();
	        this.state = 961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 957;
	            this.match(CSharpParser.COMMA);
	            this.state = 958;
	            this.expression();
	            this.state = 963;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_or_collection_initializer() {
	    let localctx = new Object_or_collection_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CSharpParser.RULE_object_or_collection_initializer);
	    try {
	        this.state = 966;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 964;
	            this.object_initializer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 965;
	            this.collection_initializer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_initializer() {
	    let localctx = new Object_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CSharpParser.RULE_object_initializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 968;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 973;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (CSharpParser.UNMANAGED - 102)) | (1 << (CSharpParser.VAR - 102)) | (1 << (CSharpParser.WHEN - 102)) | (1 << (CSharpParser.WHERE - 102)) | (1 << (CSharpParser.YIELD - 102)) | (1 << (CSharpParser.IDENTIFIER - 102)) | (1 << (CSharpParser.OPEN_BRACKET - 102)))) !== 0)) {
	            this.state = 969;
	            this.member_initializer_list();
	            this.state = 971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.COMMA) {
	                this.state = 970;
	                this.match(CSharpParser.COMMA);
	            }

	        }

	        this.state = 975;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_initializer_list() {
	    let localctx = new Member_initializer_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CSharpParser.RULE_member_initializer_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 977;
	        this.member_initializer();
	        this.state = 982;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 978;
	                this.match(CSharpParser.COMMA);
	                this.state = 979;
	                this.member_initializer(); 
	            }
	            this.state = 984;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_initializer() {
	    let localctx = new Member_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CSharpParser.RULE_member_initializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 990;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BY:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	            this.state = 985;
	            this.identifier();
	            break;
	        case CSharpParser.OPEN_BRACKET:
	            this.state = 986;
	            this.match(CSharpParser.OPEN_BRACKET);
	            this.state = 987;
	            this.expression();
	            this.state = 988;
	            this.match(CSharpParser.CLOSE_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 992;
	        this.match(CSharpParser.ASSIGNMENT);
	        this.state = 993;
	        this.initializer_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer_value() {
	    let localctx = new Initializer_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CSharpParser.RULE_initializer_value);
	    try {
	        this.state = 997;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BASE:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CHECKED:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DEFAULT:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FALSE:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.NEW:
	        case CSharpParser.NULL_:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.SIZEOF:
	        case CSharpParser.STRING:
	        case CSharpParser.THIS:
	        case CSharpParser.TRUE:
	        case CSharpParser.TYPEOF:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNCHECKED:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.LITERAL_ACCESS:
	        case CSharpParser.INTEGER_LITERAL:
	        case CSharpParser.HEX_INTEGER_LITERAL:
	        case CSharpParser.BIN_INTEGER_LITERAL:
	        case CSharpParser.REAL_LITERAL:
	        case CSharpParser.CHARACTER_LITERAL:
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	        case CSharpParser.OPEN_PARENS:
	        case CSharpParser.PLUS:
	        case CSharpParser.MINUS:
	        case CSharpParser.STAR:
	        case CSharpParser.AMP:
	        case CSharpParser.CARET:
	        case CSharpParser.BANG:
	        case CSharpParser.TILDE:
	        case CSharpParser.OP_INC:
	        case CSharpParser.OP_DEC:
	        case CSharpParser.OP_RANGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 995;
	            this.expression();
	            break;
	        case CSharpParser.OPEN_BRACE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 996;
	            this.object_or_collection_initializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection_initializer() {
	    let localctx = new Collection_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CSharpParser.RULE_collection_initializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 999;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1000;
	        this.element_initializer();
	        this.state = 1005;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1001;
	                this.match(CSharpParser.COMMA);
	                this.state = 1002;
	                this.element_initializer(); 
	            }
	            this.state = 1007;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	        this.state = 1009;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.COMMA) {
	            this.state = 1008;
	            this.match(CSharpParser.COMMA);
	        }

	        this.state = 1011;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element_initializer() {
	    let localctx = new Element_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CSharpParser.RULE_element_initializer);
	    try {
	        this.state = 1018;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BASE:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CHECKED:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DEFAULT:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FALSE:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.NEW:
	        case CSharpParser.NULL_:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.SIZEOF:
	        case CSharpParser.STRING:
	        case CSharpParser.THIS:
	        case CSharpParser.TRUE:
	        case CSharpParser.TYPEOF:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNCHECKED:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.LITERAL_ACCESS:
	        case CSharpParser.INTEGER_LITERAL:
	        case CSharpParser.HEX_INTEGER_LITERAL:
	        case CSharpParser.BIN_INTEGER_LITERAL:
	        case CSharpParser.REAL_LITERAL:
	        case CSharpParser.CHARACTER_LITERAL:
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	        case CSharpParser.OPEN_PARENS:
	        case CSharpParser.PLUS:
	        case CSharpParser.MINUS:
	        case CSharpParser.STAR:
	        case CSharpParser.AMP:
	        case CSharpParser.CARET:
	        case CSharpParser.BANG:
	        case CSharpParser.TILDE:
	        case CSharpParser.OP_INC:
	        case CSharpParser.OP_DEC:
	        case CSharpParser.OP_RANGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1013;
	            this.non_assignment_expression();
	            break;
	        case CSharpParser.OPEN_BRACE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1014;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 1015;
	            this.expression_list();
	            this.state = 1016;
	            this.match(CSharpParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymous_object_initializer() {
	    let localctx = new Anonymous_object_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CSharpParser.RULE_anonymous_object_initializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1020;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1025;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (CSharpParser.WHEN - 110)) | (1 << (CSharpParser.WHERE - 110)) | (1 << (CSharpParser.YIELD - 110)) | (1 << (CSharpParser.IDENTIFIER - 110)) | (1 << (CSharpParser.LITERAL_ACCESS - 110)) | (1 << (CSharpParser.INTEGER_LITERAL - 110)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.REAL_LITERAL - 110)) | (1 << (CSharpParser.CHARACTER_LITERAL - 110)) | (1 << (CSharpParser.REGULAR_STRING - 110)) | (1 << (CSharpParser.VERBATIUM_STRING - 110)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 110)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 110)) | (1 << (CSharpParser.OPEN_PARENS - 110)))) !== 0)) {
	            this.state = 1021;
	            this.member_declarator_list();
	            this.state = 1023;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.COMMA) {
	                this.state = 1022;
	                this.match(CSharpParser.COMMA);
	            }

	        }

	        this.state = 1027;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_declarator_list() {
	    let localctx = new Member_declarator_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CSharpParser.RULE_member_declarator_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1029;
	        this.member_declarator();
	        this.state = 1034;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1030;
	                this.match(CSharpParser.COMMA);
	                this.state = 1031;
	                this.member_declarator(); 
	            }
	            this.state = 1036;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_declarator() {
	    let localctx = new Member_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CSharpParser.RULE_member_declarator);
	    try {
	        this.state = 1042;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1037;
	            this.primary_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1038;
	            this.identifier();
	            this.state = 1039;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 1040;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbound_type_name() {
	    let localctx = new Unbound_type_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CSharpParser.RULE_unbound_type_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1044;
	        this.identifier();
	        this.state = 1053;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.CLOSE_PARENS:
	        case CSharpParser.DOT:
	        case CSharpParser.LT:
	            this.state = 1046;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.LT) {
	                this.state = 1045;
	                this.generic_dimension_specifier();
	            }

	            break;
	        case CSharpParser.DOUBLE_COLON:
	            this.state = 1048;
	            this.match(CSharpParser.DOUBLE_COLON);
	            this.state = 1049;
	            this.identifier();
	            this.state = 1051;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.LT) {
	                this.state = 1050;
	                this.generic_dimension_specifier();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1062;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.DOT) {
	            this.state = 1055;
	            this.match(CSharpParser.DOT);
	            this.state = 1056;
	            this.identifier();
	            this.state = 1058;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.LT) {
	                this.state = 1057;
	                this.generic_dimension_specifier();
	            }

	            this.state = 1064;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generic_dimension_specifier() {
	    let localctx = new Generic_dimension_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CSharpParser.RULE_generic_dimension_specifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1065;
	        this.match(CSharpParser.LT);
	        this.state = 1069;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 1066;
	            this.match(CSharpParser.COMMA);
	            this.state = 1071;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1072;
	        this.match(CSharpParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isType() {
	    let localctx = new IsTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CSharpParser.RULE_isType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1074;
	        this.base_type();
	        this.state = 1079;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,101,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1077;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case CSharpParser.OPEN_BRACKET:
	                    this.state = 1075;
	                    this.rank_specifier();
	                    break;
	                case CSharpParser.STAR:
	                    this.state = 1076;
	                    this.match(CSharpParser.STAR);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1081;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,101,this._ctx);
	        }

	        this.state = 1083;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        if(la_===1) {
	            this.state = 1082;
	            this.match(CSharpParser.INTERR);

	        }
	        this.state = 1086;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        if(la_===1) {
	            this.state = 1085;
	            this.isTypePatternArms();

	        }
	        this.state = 1089;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        if(la_===1) {
	            this.state = 1088;
	            this.identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isTypePatternArms() {
	    let localctx = new IsTypePatternArmsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CSharpParser.RULE_isTypePatternArms);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1091;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1092;
	        this.isTypePatternArm();
	        this.state = 1097;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 1093;
	            this.match(CSharpParser.COMMA);
	            this.state = 1094;
	            this.isTypePatternArm();
	            this.state = 1099;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1100;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isTypePatternArm() {
	    let localctx = new IsTypePatternArmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CSharpParser.RULE_isTypePatternArm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1102;
	        this.identifier();
	        this.state = 1103;
	        this.match(CSharpParser.COLON);
	        this.state = 1104;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_expression() {
	    let localctx = new Lambda_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CSharpParser.RULE_lambda_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1107;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        if(la_===1) {
	            this.state = 1106;
	            this.match(CSharpParser.ASYNC);

	        }
	        this.state = 1109;
	        this.anonymous_function_signature();
	        this.state = 1110;
	        this.right_arrow();
	        this.state = 1111;
	        this.anonymous_function_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymous_function_signature() {
	    let localctx = new Anonymous_function_signatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CSharpParser.RULE_anonymous_function_signature);
	    try {
	        this.state = 1124;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1113;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1114;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1115;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1116;
	            this.explicit_anonymous_function_parameter_list();
	            this.state = 1117;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1119;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1120;
	            this.implicit_anonymous_function_parameter_list();
	            this.state = 1121;
	            this.match(CSharpParser.CLOSE_PARENS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1123;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicit_anonymous_function_parameter_list() {
	    let localctx = new Explicit_anonymous_function_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CSharpParser.RULE_explicit_anonymous_function_parameter_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1126;
	        this.explicit_anonymous_function_parameter();
	        this.state = 1131;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 1127;
	            this.match(CSharpParser.COMMA);
	            this.state = 1128;
	            this.explicit_anonymous_function_parameter();
	            this.state = 1133;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicit_anonymous_function_parameter() {
	    let localctx = new Explicit_anonymous_function_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CSharpParser.RULE_explicit_anonymous_function_parameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1135;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CSharpParser.IN - 54)) | (1 << (CSharpParser.OUT - 54)) | (1 << (CSharpParser.REF - 54)))) !== 0)) {
	            this.state = 1134;
	            localctx.refout = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CSharpParser.IN - 54)) | (1 << (CSharpParser.OUT - 54)) | (1 << (CSharpParser.REF - 54)))) !== 0))) {
	                localctx.refout = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1137;
	        this.type_();
	        this.state = 1138;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implicit_anonymous_function_parameter_list() {
	    let localctx = new Implicit_anonymous_function_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CSharpParser.RULE_implicit_anonymous_function_parameter_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1140;
	        this.identifier();
	        this.state = 1145;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 1141;
	            this.match(CSharpParser.COMMA);
	            this.state = 1142;
	            this.identifier();
	            this.state = 1147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anonymous_function_body() {
	    let localctx = new Anonymous_function_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CSharpParser.RULE_anonymous_function_body);
	    try {
	        this.state = 1150;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BASE:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CHECKED:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DEFAULT:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FALSE:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.NEW:
	        case CSharpParser.NULL_:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.SIZEOF:
	        case CSharpParser.STRING:
	        case CSharpParser.THIS:
	        case CSharpParser.THROW:
	        case CSharpParser.TRUE:
	        case CSharpParser.TYPEOF:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNCHECKED:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.LITERAL_ACCESS:
	        case CSharpParser.INTEGER_LITERAL:
	        case CSharpParser.HEX_INTEGER_LITERAL:
	        case CSharpParser.BIN_INTEGER_LITERAL:
	        case CSharpParser.REAL_LITERAL:
	        case CSharpParser.CHARACTER_LITERAL:
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	        case CSharpParser.OPEN_PARENS:
	        case CSharpParser.PLUS:
	        case CSharpParser.MINUS:
	        case CSharpParser.STAR:
	        case CSharpParser.AMP:
	        case CSharpParser.CARET:
	        case CSharpParser.BANG:
	        case CSharpParser.TILDE:
	        case CSharpParser.OP_INC:
	        case CSharpParser.OP_DEC:
	        case CSharpParser.OP_RANGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1148;
	            this.throwable_expression();
	            break;
	        case CSharpParser.OPEN_BRACE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1149;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query_expression() {
	    let localctx = new Query_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CSharpParser.RULE_query_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1152;
	        this.from_clause();
	        this.state = 1153;
	        this.query_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	from_clause() {
	    let localctx = new From_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CSharpParser.RULE_from_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1155;
	        this.match(CSharpParser.FROM);
	        this.state = 1157;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        if(la_===1) {
	            this.state = 1156;
	            this.type_();

	        }
	        this.state = 1159;
	        this.identifier();
	        this.state = 1160;
	        this.match(CSharpParser.IN);
	        this.state = 1161;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query_body() {
	    let localctx = new Query_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CSharpParser.RULE_query_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1166;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (CSharpParser.FROM - 48)) | (1 << (CSharpParser.JOIN - 48)) | (1 << (CSharpParser.LET - 48)) | (1 << (CSharpParser.ORDERBY - 48)))) !== 0) || _la===CSharpParser.WHERE) {
	            this.state = 1163;
	            this.query_body_clause();
	            this.state = 1168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1169;
	        this.select_or_group_clause();
	        this.state = 1171;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        if(la_===1) {
	            this.state = 1170;
	            this.query_continuation();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query_body_clause() {
	    let localctx = new Query_body_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CSharpParser.RULE_query_body_clause);
	    try {
	        this.state = 1178;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.FROM:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1173;
	            this.from_clause();
	            break;
	        case CSharpParser.LET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1174;
	            this.let_clause();
	            break;
	        case CSharpParser.WHERE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1175;
	            this.where_clause();
	            break;
	        case CSharpParser.JOIN:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1176;
	            this.combined_join_clause();
	            break;
	        case CSharpParser.ORDERBY:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1177;
	            this.orderby_clause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	let_clause() {
	    let localctx = new Let_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CSharpParser.RULE_let_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1180;
	        this.match(CSharpParser.LET);
	        this.state = 1181;
	        this.identifier();
	        this.state = 1182;
	        this.match(CSharpParser.ASSIGNMENT);
	        this.state = 1183;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	where_clause() {
	    let localctx = new Where_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CSharpParser.RULE_where_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1185;
	        this.match(CSharpParser.WHERE);
	        this.state = 1186;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	combined_join_clause() {
	    let localctx = new Combined_join_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CSharpParser.RULE_combined_join_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1188;
	        this.match(CSharpParser.JOIN);
	        this.state = 1190;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        if(la_===1) {
	            this.state = 1189;
	            this.type_();

	        }
	        this.state = 1192;
	        this.identifier();
	        this.state = 1193;
	        this.match(CSharpParser.IN);
	        this.state = 1194;
	        this.expression();
	        this.state = 1195;
	        this.match(CSharpParser.ON);
	        this.state = 1196;
	        this.expression();
	        this.state = 1197;
	        this.match(CSharpParser.EQUALS);
	        this.state = 1198;
	        this.expression();
	        this.state = 1201;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.INTO) {
	            this.state = 1199;
	            this.match(CSharpParser.INTO);
	            this.state = 1200;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderby_clause() {
	    let localctx = new Orderby_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CSharpParser.RULE_orderby_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1203;
	        this.match(CSharpParser.ORDERBY);
	        this.state = 1204;
	        this.ordering();
	        this.state = 1209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 1205;
	            this.match(CSharpParser.COMMA);
	            this.state = 1206;
	            this.ordering();
	            this.state = 1211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordering() {
	    let localctx = new OrderingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CSharpParser.RULE_ordering);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1212;
	        this.expression();
	        this.state = 1214;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.ASCENDING || _la===CSharpParser.DESCENDING) {
	            this.state = 1213;
	            localctx.dir = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===CSharpParser.ASCENDING || _la===CSharpParser.DESCENDING)) {
	                localctx.dir = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	select_or_group_clause() {
	    let localctx = new Select_or_group_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CSharpParser.RULE_select_or_group_clause);
	    try {
	        this.state = 1223;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.SELECT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1216;
	            this.match(CSharpParser.SELECT);
	            this.state = 1217;
	            this.expression();
	            break;
	        case CSharpParser.GROUP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1218;
	            this.match(CSharpParser.GROUP);
	            this.state = 1219;
	            this.expression();
	            this.state = 1220;
	            this.match(CSharpParser.BY);
	            this.state = 1221;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query_continuation() {
	    let localctx = new Query_continuationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CSharpParser.RULE_query_continuation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1225;
	        this.match(CSharpParser.INTO);
	        this.state = 1226;
	        this.identifier();
	        this.state = 1227;
	        this.query_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CSharpParser.RULE_statement);
	    try {
	        this.state = 1232;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1229;
	            this.labeled_Statement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1230;
	            this.declarationStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1231;
	            this.embedded_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationStatement() {
	    let localctx = new DeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CSharpParser.RULE_declarationStatement);
	    try {
	        this.state = 1241;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1234;
	            this.local_variable_declaration();
	            this.state = 1235;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1237;
	            this.local_constant_declaration();
	            this.state = 1238;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1240;
	            this.local_function_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_function_declaration() {
	    let localctx = new Local_function_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CSharpParser.RULE_local_function_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1243;
	        this.local_function_header();
	        this.state = 1244;
	        this.local_function_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_function_header() {
	    let localctx = new Local_function_headerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CSharpParser.RULE_local_function_header);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1247;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        if(la_===1) {
	            this.state = 1246;
	            this.local_function_modifiers();

	        }
	        this.state = 1249;
	        this.return_type();
	        this.state = 1250;
	        this.identifier();
	        this.state = 1252;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.LT) {
	            this.state = 1251;
	            this.type_parameter_list();
	        }

	        this.state = 1254;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IN - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.OUT - 64)) | (1 << (CSharpParser.PARAMS - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.THIS - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0)) {
	            this.state = 1255;
	            this.formal_parameter_list();
	        }

	        this.state = 1258;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 1260;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.WHERE) {
	            this.state = 1259;
	            this.type_parameter_constraints_clauses();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_function_modifiers() {
	    let localctx = new Local_function_modifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CSharpParser.RULE_local_function_modifiers);
	    var _la = 0; // Token type
	    try {
	        this.state = 1268;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ASYNC:
	        case CSharpParser.UNSAFE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1262;
	            _la = this._input.LA(1);
	            if(!(_la===CSharpParser.ASYNC || _la===CSharpParser.UNSAFE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.STATIC) {
	                this.state = 1263;
	                this.match(CSharpParser.STATIC);
	            }

	            break;
	        case CSharpParser.STATIC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1266;
	            this.match(CSharpParser.STATIC);
	            this.state = 1267;
	            _la = this._input.LA(1);
	            if(!(_la===CSharpParser.ASYNC || _la===CSharpParser.UNSAFE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_function_body() {
	    let localctx = new Local_function_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CSharpParser.RULE_local_function_body);
	    try {
	        this.state = 1275;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.OPEN_BRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1270;
	            this.block();
	            break;
	        case CSharpParser.ASSIGNMENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1271;
	            this.right_arrow();
	            this.state = 1272;
	            this.throwable_expression();
	            this.state = 1273;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeled_Statement() {
	    let localctx = new Labeled_StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CSharpParser.RULE_labeled_Statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1277;
	        this.identifier();
	        this.state = 1278;
	        this.match(CSharpParser.COLON);
	        this.state = 1279;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	embedded_statement() {
	    let localctx = new Embedded_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CSharpParser.RULE_embedded_statement);
	    try {
	        this.state = 1283;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.OPEN_BRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1281;
	            this.block();
	            break;
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BASE:
	        case CSharpParser.BOOL:
	        case CSharpParser.BREAK:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CHECKED:
	        case CSharpParser.CONTINUE:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DEFAULT:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DO:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FALSE:
	        case CSharpParser.FIXED:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FOR:
	        case CSharpParser.FOREACH:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GOTO:
	        case CSharpParser.GROUP:
	        case CSharpParser.IF:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LOCK:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.NEW:
	        case CSharpParser.NULL_:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.RETURN:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.SIZEOF:
	        case CSharpParser.STRING:
	        case CSharpParser.SWITCH:
	        case CSharpParser.THIS:
	        case CSharpParser.THROW:
	        case CSharpParser.TRUE:
	        case CSharpParser.TRY:
	        case CSharpParser.TYPEOF:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNCHECKED:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.UNSAFE:
	        case CSharpParser.USHORT:
	        case CSharpParser.USING:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.WHILE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.LITERAL_ACCESS:
	        case CSharpParser.INTEGER_LITERAL:
	        case CSharpParser.HEX_INTEGER_LITERAL:
	        case CSharpParser.BIN_INTEGER_LITERAL:
	        case CSharpParser.REAL_LITERAL:
	        case CSharpParser.CHARACTER_LITERAL:
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	        case CSharpParser.OPEN_PARENS:
	        case CSharpParser.SEMICOLON:
	        case CSharpParser.PLUS:
	        case CSharpParser.MINUS:
	        case CSharpParser.STAR:
	        case CSharpParser.AMP:
	        case CSharpParser.CARET:
	        case CSharpParser.BANG:
	        case CSharpParser.TILDE:
	        case CSharpParser.OP_INC:
	        case CSharpParser.OP_DEC:
	        case CSharpParser.OP_RANGE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1282;
	            this.simple_embedded_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_embedded_statement() {
	    let localctx = new Simple_embedded_statementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CSharpParser.RULE_simple_embedded_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1415;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TheEmptyStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1285;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 2:
	            localctx = new ExpressionStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1286;
	            this.expression();
	            this.state = 1287;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 3:
	            localctx = new IfStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1289;
	            this.match(CSharpParser.IF);
	            this.state = 1290;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1291;
	            this.expression();
	            this.state = 1292;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1293;
	            this.if_body();
	            this.state = 1296;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	            if(la_===1) {
	                this.state = 1294;
	                this.match(CSharpParser.ELSE);
	                this.state = 1295;
	                this.if_body();

	            }
	            break;

	        case 4:
	            localctx = new SwitchStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1298;
	            this.match(CSharpParser.SWITCH);
	            this.state = 1299;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1300;
	            this.expression();
	            this.state = 1301;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1302;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 1306;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CSharpParser.CASE || _la===CSharpParser.DEFAULT) {
	                this.state = 1303;
	                this.switch_section();
	                this.state = 1308;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1309;
	            this.match(CSharpParser.CLOSE_BRACE);
	            break;

	        case 5:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1311;
	            this.match(CSharpParser.WHILE);
	            this.state = 1312;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1313;
	            this.expression();
	            this.state = 1314;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1315;
	            this.embedded_statement();
	            break;

	        case 6:
	            localctx = new DoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1317;
	            this.match(CSharpParser.DO);
	            this.state = 1318;
	            this.embedded_statement();
	            this.state = 1319;
	            this.match(CSharpParser.WHILE);
	            this.state = 1320;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1321;
	            this.expression();
	            this.state = 1322;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1323;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 7:
	            localctx = new ForStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1325;
	            this.match(CSharpParser.FOR);
	            this.state = 1326;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1328;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FIXED - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.USING - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (CSharpParser.VOID - 108)) | (1 << (CSharpParser.WHEN - 108)) | (1 << (CSharpParser.WHERE - 108)) | (1 << (CSharpParser.YIELD - 108)) | (1 << (CSharpParser.IDENTIFIER - 108)) | (1 << (CSharpParser.LITERAL_ACCESS - 108)) | (1 << (CSharpParser.INTEGER_LITERAL - 108)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 108)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 108)) | (1 << (CSharpParser.REAL_LITERAL - 108)) | (1 << (CSharpParser.CHARACTER_LITERAL - 108)) | (1 << (CSharpParser.REGULAR_STRING - 108)) | (1 << (CSharpParser.VERBATIUM_STRING - 108)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 108)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 108)) | (1 << (CSharpParser.OPEN_PARENS - 108)) | (1 << (CSharpParser.PLUS - 108)) | (1 << (CSharpParser.MINUS - 108)) | (1 << (CSharpParser.STAR - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CSharpParser.AMP - 140)) | (1 << (CSharpParser.CARET - 140)) | (1 << (CSharpParser.BANG - 140)) | (1 << (CSharpParser.TILDE - 140)) | (1 << (CSharpParser.OP_INC - 140)) | (1 << (CSharpParser.OP_DEC - 140)) | (1 << (CSharpParser.OP_RANGE - 140)))) !== 0)) {
	                this.state = 1327;
	                this.for_initializer();
	            }

	            this.state = 1330;
	            this.match(CSharpParser.SEMICOLON);
	            this.state = 1332;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (CSharpParser.WHEN - 110)) | (1 << (CSharpParser.WHERE - 110)) | (1 << (CSharpParser.YIELD - 110)) | (1 << (CSharpParser.IDENTIFIER - 110)) | (1 << (CSharpParser.LITERAL_ACCESS - 110)) | (1 << (CSharpParser.INTEGER_LITERAL - 110)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.REAL_LITERAL - 110)) | (1 << (CSharpParser.CHARACTER_LITERAL - 110)) | (1 << (CSharpParser.REGULAR_STRING - 110)) | (1 << (CSharpParser.VERBATIUM_STRING - 110)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 110)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 110)) | (1 << (CSharpParser.OPEN_PARENS - 110)) | (1 << (CSharpParser.PLUS - 110)) | (1 << (CSharpParser.MINUS - 110)) | (1 << (CSharpParser.STAR - 110)) | (1 << (CSharpParser.AMP - 110)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (CSharpParser.CARET - 142)) | (1 << (CSharpParser.BANG - 142)) | (1 << (CSharpParser.TILDE - 142)) | (1 << (CSharpParser.OP_INC - 142)) | (1 << (CSharpParser.OP_DEC - 142)) | (1 << (CSharpParser.OP_RANGE - 142)))) !== 0)) {
	                this.state = 1331;
	                this.expression();
	            }

	            this.state = 1334;
	            this.match(CSharpParser.SEMICOLON);
	            this.state = 1336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (CSharpParser.WHEN - 110)) | (1 << (CSharpParser.WHERE - 110)) | (1 << (CSharpParser.YIELD - 110)) | (1 << (CSharpParser.IDENTIFIER - 110)) | (1 << (CSharpParser.LITERAL_ACCESS - 110)) | (1 << (CSharpParser.INTEGER_LITERAL - 110)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.REAL_LITERAL - 110)) | (1 << (CSharpParser.CHARACTER_LITERAL - 110)) | (1 << (CSharpParser.REGULAR_STRING - 110)) | (1 << (CSharpParser.VERBATIUM_STRING - 110)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 110)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 110)) | (1 << (CSharpParser.OPEN_PARENS - 110)) | (1 << (CSharpParser.PLUS - 110)) | (1 << (CSharpParser.MINUS - 110)) | (1 << (CSharpParser.STAR - 110)) | (1 << (CSharpParser.AMP - 110)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (CSharpParser.CARET - 142)) | (1 << (CSharpParser.BANG - 142)) | (1 << (CSharpParser.TILDE - 142)) | (1 << (CSharpParser.OP_INC - 142)) | (1 << (CSharpParser.OP_DEC - 142)) | (1 << (CSharpParser.OP_RANGE - 142)))) !== 0)) {
	                this.state = 1335;
	                this.for_iterator();
	            }

	            this.state = 1338;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1339;
	            this.embedded_statement();
	            break;

	        case 8:
	            localctx = new ForeachStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1341;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.AWAIT) {
	                this.state = 1340;
	                this.match(CSharpParser.AWAIT);
	            }

	            this.state = 1343;
	            this.match(CSharpParser.FOREACH);
	            this.state = 1344;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1345;
	            this.local_variable_type();
	            this.state = 1346;
	            this.identifier();
	            this.state = 1347;
	            this.match(CSharpParser.IN);
	            this.state = 1348;
	            this.expression();
	            this.state = 1349;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1350;
	            this.embedded_statement();
	            break;

	        case 9:
	            localctx = new BreakStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1352;
	            this.match(CSharpParser.BREAK);
	            this.state = 1353;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 10:
	            localctx = new ContinueStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1354;
	            this.match(CSharpParser.CONTINUE);
	            this.state = 1355;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 11:
	            localctx = new GotoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1356;
	            this.match(CSharpParser.GOTO);
	            this.state = 1361;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CSharpParser.ADD:
	            case CSharpParser.ALIAS:
	            case CSharpParser.ARGLIST:
	            case CSharpParser.ASCENDING:
	            case CSharpParser.ASYNC:
	            case CSharpParser.AWAIT:
	            case CSharpParser.BY:
	            case CSharpParser.DESCENDING:
	            case CSharpParser.DYNAMIC:
	            case CSharpParser.EQUALS:
	            case CSharpParser.FROM:
	            case CSharpParser.GET:
	            case CSharpParser.GROUP:
	            case CSharpParser.INTO:
	            case CSharpParser.JOIN:
	            case CSharpParser.LET:
	            case CSharpParser.NAMEOF:
	            case CSharpParser.ON:
	            case CSharpParser.ORDERBY:
	            case CSharpParser.PARTIAL:
	            case CSharpParser.REMOVE:
	            case CSharpParser.SELECT:
	            case CSharpParser.SET:
	            case CSharpParser.UNMANAGED:
	            case CSharpParser.VAR:
	            case CSharpParser.WHEN:
	            case CSharpParser.WHERE:
	            case CSharpParser.YIELD:
	            case CSharpParser.IDENTIFIER:
	                this.state = 1357;
	                this.identifier();
	                break;
	            case CSharpParser.CASE:
	                this.state = 1358;
	                this.match(CSharpParser.CASE);
	                this.state = 1359;
	                this.expression();
	                break;
	            case CSharpParser.DEFAULT:
	                this.state = 1360;
	                this.match(CSharpParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1363;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 12:
	            localctx = new ReturnStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1364;
	            this.match(CSharpParser.RETURN);
	            this.state = 1366;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (CSharpParser.WHEN - 110)) | (1 << (CSharpParser.WHERE - 110)) | (1 << (CSharpParser.YIELD - 110)) | (1 << (CSharpParser.IDENTIFIER - 110)) | (1 << (CSharpParser.LITERAL_ACCESS - 110)) | (1 << (CSharpParser.INTEGER_LITERAL - 110)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.REAL_LITERAL - 110)) | (1 << (CSharpParser.CHARACTER_LITERAL - 110)) | (1 << (CSharpParser.REGULAR_STRING - 110)) | (1 << (CSharpParser.VERBATIUM_STRING - 110)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 110)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 110)) | (1 << (CSharpParser.OPEN_PARENS - 110)) | (1 << (CSharpParser.PLUS - 110)) | (1 << (CSharpParser.MINUS - 110)) | (1 << (CSharpParser.STAR - 110)) | (1 << (CSharpParser.AMP - 110)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (CSharpParser.CARET - 142)) | (1 << (CSharpParser.BANG - 142)) | (1 << (CSharpParser.TILDE - 142)) | (1 << (CSharpParser.OP_INC - 142)) | (1 << (CSharpParser.OP_DEC - 142)) | (1 << (CSharpParser.OP_RANGE - 142)))) !== 0)) {
	                this.state = 1365;
	                this.expression();
	            }

	            this.state = 1368;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 13:
	            localctx = new ThrowStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1369;
	            this.match(CSharpParser.THROW);
	            this.state = 1371;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (CSharpParser.WHEN - 110)) | (1 << (CSharpParser.WHERE - 110)) | (1 << (CSharpParser.YIELD - 110)) | (1 << (CSharpParser.IDENTIFIER - 110)) | (1 << (CSharpParser.LITERAL_ACCESS - 110)) | (1 << (CSharpParser.INTEGER_LITERAL - 110)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.REAL_LITERAL - 110)) | (1 << (CSharpParser.CHARACTER_LITERAL - 110)) | (1 << (CSharpParser.REGULAR_STRING - 110)) | (1 << (CSharpParser.VERBATIUM_STRING - 110)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 110)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 110)) | (1 << (CSharpParser.OPEN_PARENS - 110)) | (1 << (CSharpParser.PLUS - 110)) | (1 << (CSharpParser.MINUS - 110)) | (1 << (CSharpParser.STAR - 110)) | (1 << (CSharpParser.AMP - 110)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (CSharpParser.CARET - 142)) | (1 << (CSharpParser.BANG - 142)) | (1 << (CSharpParser.TILDE - 142)) | (1 << (CSharpParser.OP_INC - 142)) | (1 << (CSharpParser.OP_DEC - 142)) | (1 << (CSharpParser.OP_RANGE - 142)))) !== 0)) {
	                this.state = 1370;
	                this.expression();
	            }

	            this.state = 1373;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 14:
	            localctx = new TryStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1374;
	            this.match(CSharpParser.TRY);
	            this.state = 1375;
	            this.block();
	            this.state = 1381;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CSharpParser.CATCH:
	                this.state = 1376;
	                this.catch_clauses();
	                this.state = 1378;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CSharpParser.FINALLY) {
	                    this.state = 1377;
	                    this.finally_clause();
	                }

	                break;
	            case CSharpParser.FINALLY:
	                this.state = 1380;
	                this.finally_clause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 15:
	            localctx = new CheckedStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1383;
	            this.match(CSharpParser.CHECKED);
	            this.state = 1384;
	            this.block();
	            break;

	        case 16:
	            localctx = new UncheckedStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1385;
	            this.match(CSharpParser.UNCHECKED);
	            this.state = 1386;
	            this.block();
	            break;

	        case 17:
	            localctx = new LockStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1387;
	            this.match(CSharpParser.LOCK);
	            this.state = 1388;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1389;
	            this.expression();
	            this.state = 1390;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1391;
	            this.embedded_statement();
	            break;

	        case 18:
	            localctx = new UsingStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1393;
	            this.match(CSharpParser.USING);
	            this.state = 1394;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1395;
	            this.resource_acquisition();
	            this.state = 1396;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1397;
	            this.embedded_statement();
	            break;

	        case 19:
	            localctx = new YieldStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1399;
	            this.match(CSharpParser.YIELD);
	            this.state = 1403;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CSharpParser.RETURN:
	                this.state = 1400;
	                this.match(CSharpParser.RETURN);
	                this.state = 1401;
	                this.expression();
	                break;
	            case CSharpParser.BREAK:
	                this.state = 1402;
	                this.match(CSharpParser.BREAK);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1405;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 20:
	            localctx = new UnsafeStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1406;
	            this.match(CSharpParser.UNSAFE);
	            this.state = 1407;
	            this.block();
	            break;

	        case 21:
	            localctx = new FixedStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1408;
	            this.match(CSharpParser.FIXED);
	            this.state = 1409;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 1410;
	            this.pointer_type();
	            this.state = 1411;
	            this.fixed_pointer_declarators();
	            this.state = 1412;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 1413;
	            this.embedded_statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CSharpParser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1417;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BREAK - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.CONST - 10)) | (1 << (CSharpParser.CONTINUE - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DO - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FIXED - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FOR - 42)) | (1 << (CSharpParser.FOREACH - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GOTO - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.IF - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LOCK - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.RETURN - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STATIC - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.SWITCH - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.THROW - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TRY - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.UNSAFE - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.USING - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (CSharpParser.VOID - 108)) | (1 << (CSharpParser.WHEN - 108)) | (1 << (CSharpParser.WHERE - 108)) | (1 << (CSharpParser.WHILE - 108)) | (1 << (CSharpParser.YIELD - 108)) | (1 << (CSharpParser.IDENTIFIER - 108)) | (1 << (CSharpParser.LITERAL_ACCESS - 108)) | (1 << (CSharpParser.INTEGER_LITERAL - 108)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 108)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 108)) | (1 << (CSharpParser.REAL_LITERAL - 108)) | (1 << (CSharpParser.CHARACTER_LITERAL - 108)) | (1 << (CSharpParser.REGULAR_STRING - 108)) | (1 << (CSharpParser.VERBATIUM_STRING - 108)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 108)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 108)) | (1 << (CSharpParser.OPEN_BRACE - 108)) | (1 << (CSharpParser.OPEN_PARENS - 108)) | (1 << (CSharpParser.SEMICOLON - 108)) | (1 << (CSharpParser.PLUS - 108)) | (1 << (CSharpParser.MINUS - 108)) | (1 << (CSharpParser.STAR - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CSharpParser.AMP - 140)) | (1 << (CSharpParser.CARET - 140)) | (1 << (CSharpParser.BANG - 140)) | (1 << (CSharpParser.TILDE - 140)) | (1 << (CSharpParser.OP_INC - 140)) | (1 << (CSharpParser.OP_DEC - 140)) | (1 << (CSharpParser.OP_RANGE - 140)))) !== 0)) {
	            this.state = 1418;
	            this.statement_list();
	        }

	        this.state = 1421;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_variable_declaration() {
	    let localctx = new Local_variable_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CSharpParser.RULE_local_variable_declaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 1444;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.STRING:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.USING:
	        case CSharpParser.VAR:
	        case CSharpParser.VOID:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.OPEN_PARENS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1427;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	            if(la_===1) {
	                this.state = 1423;
	                this.match(CSharpParser.USING);

	            } else if(la_===2) {
	                this.state = 1424;
	                this.match(CSharpParser.REF);

	            } else if(la_===3) {
	                this.state = 1425;
	                this.match(CSharpParser.REF);
	                this.state = 1426;
	                this.match(CSharpParser.READONLY);

	            }
	            this.state = 1429;
	            this.local_variable_type();
	            this.state = 1430;
	            this.local_variable_declarator();
	            this.state = 1437;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CSharpParser.COMMA) {
	                this.state = 1431;
	                this.match(CSharpParser.COMMA);
	                this.state = 1432;
	                this.local_variable_declarator();
	                this.state = 1433;
	                // if (!(  this.IsLocalVariableDeclaration() )) {
	                //     throw new antlr4.error.FailedPredicateException(this, " this.IsLocalVariableDeclaration() ");
	                // }
	                this.state = 1439;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case CSharpParser.FIXED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1440;
	            this.match(CSharpParser.FIXED);
	            this.state = 1441;
	            this.pointer_type();
	            this.state = 1442;
	            this.fixed_pointer_declarators();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_variable_type() {
	    let localctx = new Local_variable_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CSharpParser.RULE_local_variable_type);
	    try {
	        this.state = 1448;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1446;
	            this.match(CSharpParser.VAR);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1447;
	            this.type_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_variable_declarator() {
	    let localctx = new Local_variable_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CSharpParser.RULE_local_variable_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1450;
	        this.identifier();
	        this.state = 1456;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        if(la_===1) {
	            this.state = 1451;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 1453;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	            if(la_===1) {
	                this.state = 1452;
	                this.match(CSharpParser.REF);

	            }
	            this.state = 1455;
	            this.local_variable_initializer();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_variable_initializer() {
	    let localctx = new Local_variable_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, CSharpParser.RULE_local_variable_initializer);
	    try {
	        this.state = 1461;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BASE:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CHECKED:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DEFAULT:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FALSE:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.NEW:
	        case CSharpParser.NULL_:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.SIZEOF:
	        case CSharpParser.STRING:
	        case CSharpParser.THIS:
	        case CSharpParser.TRUE:
	        case CSharpParser.TYPEOF:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNCHECKED:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.LITERAL_ACCESS:
	        case CSharpParser.INTEGER_LITERAL:
	        case CSharpParser.HEX_INTEGER_LITERAL:
	        case CSharpParser.BIN_INTEGER_LITERAL:
	        case CSharpParser.REAL_LITERAL:
	        case CSharpParser.CHARACTER_LITERAL:
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	        case CSharpParser.OPEN_PARENS:
	        case CSharpParser.PLUS:
	        case CSharpParser.MINUS:
	        case CSharpParser.STAR:
	        case CSharpParser.AMP:
	        case CSharpParser.CARET:
	        case CSharpParser.BANG:
	        case CSharpParser.TILDE:
	        case CSharpParser.OP_INC:
	        case CSharpParser.OP_DEC:
	        case CSharpParser.OP_RANGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1458;
	            this.expression();
	            break;
	        case CSharpParser.OPEN_BRACE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1459;
	            this.array_initializer();
	            break;
	        case CSharpParser.STACKALLOC:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1460;
	            this.stackalloc_initializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	local_constant_declaration() {
	    let localctx = new Local_constant_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, CSharpParser.RULE_local_constant_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1463;
	        this.match(CSharpParser.CONST);
	        this.state = 1464;
	        this.type_();
	        this.state = 1465;
	        this.constant_declarators();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_body() {
	    let localctx = new If_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, CSharpParser.RULE_if_body);
	    try {
	        this.state = 1469;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.OPEN_BRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1467;
	            this.block();
	            break;
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BASE:
	        case CSharpParser.BOOL:
	        case CSharpParser.BREAK:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CHECKED:
	        case CSharpParser.CONTINUE:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DEFAULT:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DO:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FALSE:
	        case CSharpParser.FIXED:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FOR:
	        case CSharpParser.FOREACH:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GOTO:
	        case CSharpParser.GROUP:
	        case CSharpParser.IF:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LOCK:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.NEW:
	        case CSharpParser.NULL_:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.RETURN:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.SIZEOF:
	        case CSharpParser.STRING:
	        case CSharpParser.SWITCH:
	        case CSharpParser.THIS:
	        case CSharpParser.THROW:
	        case CSharpParser.TRUE:
	        case CSharpParser.TRY:
	        case CSharpParser.TYPEOF:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNCHECKED:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.UNSAFE:
	        case CSharpParser.USHORT:
	        case CSharpParser.USING:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.WHILE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.LITERAL_ACCESS:
	        case CSharpParser.INTEGER_LITERAL:
	        case CSharpParser.HEX_INTEGER_LITERAL:
	        case CSharpParser.BIN_INTEGER_LITERAL:
	        case CSharpParser.REAL_LITERAL:
	        case CSharpParser.CHARACTER_LITERAL:
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	        case CSharpParser.OPEN_PARENS:
	        case CSharpParser.SEMICOLON:
	        case CSharpParser.PLUS:
	        case CSharpParser.MINUS:
	        case CSharpParser.STAR:
	        case CSharpParser.AMP:
	        case CSharpParser.CARET:
	        case CSharpParser.BANG:
	        case CSharpParser.TILDE:
	        case CSharpParser.OP_INC:
	        case CSharpParser.OP_DEC:
	        case CSharpParser.OP_RANGE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1468;
	            this.simple_embedded_statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_section() {
	    let localctx = new Switch_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, CSharpParser.RULE_switch_section);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1472; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1471;
	        		this.switch_label();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1474; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,153, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1476;
	        this.statement_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switch_label() {
	    let localctx = new Switch_labelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, CSharpParser.RULE_switch_label);
	    var _la = 0; // Token type
	    try {
	        this.state = 1487;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.CASE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1478;
	            this.match(CSharpParser.CASE);
	            this.state = 1479;
	            this.expression();
	            this.state = 1481;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.WHEN) {
	                this.state = 1480;
	                this.case_guard();
	            }

	            this.state = 1483;
	            this.match(CSharpParser.COLON);
	            break;
	        case CSharpParser.DEFAULT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1485;
	            this.match(CSharpParser.DEFAULT);
	            this.state = 1486;
	            this.match(CSharpParser.COLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_guard() {
	    let localctx = new Case_guardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, CSharpParser.RULE_case_guard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1489;
	        this.match(CSharpParser.WHEN);
	        this.state = 1490;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement_list() {
	    let localctx = new Statement_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, CSharpParser.RULE_statement_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1493; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1492;
	        		this.statement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1495; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,156, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_initializer() {
	    let localctx = new For_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, CSharpParser.RULE_for_initializer);
	    var _la = 0; // Token type
	    try {
	        this.state = 1506;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1497;
	            this.local_variable_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1498;
	            this.expression();
	            this.state = 1503;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CSharpParser.COMMA) {
	                this.state = 1499;
	                this.match(CSharpParser.COMMA);
	                this.state = 1500;
	                this.expression();
	                this.state = 1505;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_iterator() {
	    let localctx = new For_iteratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, CSharpParser.RULE_for_iterator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1508;
	        this.expression();
	        this.state = 1513;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 1509;
	            this.match(CSharpParser.COMMA);
	            this.state = 1510;
	            this.expression();
	            this.state = 1515;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catch_clauses() {
	    let localctx = new Catch_clausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, CSharpParser.RULE_catch_clauses);
	    var _la = 0; // Token type
	    try {
	        this.state = 1527;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1516;
	            this.specific_catch_clause();
	            this.state = 1520;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,160,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1517;
	                    this.specific_catch_clause(); 
	                }
	                this.state = 1522;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,160,this._ctx);
	            }

	            this.state = 1524;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.CATCH) {
	                this.state = 1523;
	                this.general_catch_clause();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1526;
	            this.general_catch_clause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specific_catch_clause() {
	    let localctx = new Specific_catch_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, CSharpParser.RULE_specific_catch_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1529;
	        this.match(CSharpParser.CATCH);
	        this.state = 1530;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1531;
	        this.class_type();
	        this.state = 1533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (CSharpParser.UNMANAGED - 102)) | (1 << (CSharpParser.VAR - 102)) | (1 << (CSharpParser.WHEN - 102)) | (1 << (CSharpParser.WHERE - 102)) | (1 << (CSharpParser.YIELD - 102)) | (1 << (CSharpParser.IDENTIFIER - 102)))) !== 0)) {
	            this.state = 1532;
	            this.identifier();
	        }

	        this.state = 1535;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 1537;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.WHEN) {
	            this.state = 1536;
	            this.exception_filter();
	        }

	        this.state = 1539;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_catch_clause() {
	    let localctx = new General_catch_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, CSharpParser.RULE_general_catch_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1541;
	        this.match(CSharpParser.CATCH);
	        this.state = 1543;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.WHEN) {
	            this.state = 1542;
	            this.exception_filter();
	        }

	        this.state = 1545;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exception_filter() {
	    let localctx = new Exception_filterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, CSharpParser.RULE_exception_filter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1547;
	        this.match(CSharpParser.WHEN);
	        this.state = 1548;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1549;
	        this.expression();
	        this.state = 1550;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finally_clause() {
	    let localctx = new Finally_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, CSharpParser.RULE_finally_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1552;
	        this.match(CSharpParser.FINALLY);
	        this.state = 1553;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource_acquisition() {
	    let localctx = new Resource_acquisitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, CSharpParser.RULE_resource_acquisition);
	    try {
	        this.state = 1557;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1555;
	            this.local_variable_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1556;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_declaration() {
	    let localctx = new Namespace_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, CSharpParser.RULE_namespace_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1559;
	        this.match(CSharpParser.NAMESPACE);
	        this.state = 1560;
	        localctx.qi = this.qualified_identifier();
	        this.state = 1561;
	        this.namespace_body();
	        this.state = 1563;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.SEMICOLON) {
	            this.state = 1562;
	            this.match(CSharpParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_identifier() {
	    let localctx = new Qualified_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, CSharpParser.RULE_qualified_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1565;
	        this.identifier();
	        this.state = 1570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.DOT) {
	            this.state = 1566;
	            this.match(CSharpParser.DOT);
	            this.state = 1567;
	            this.identifier();
	            this.state = 1572;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_body() {
	    let localctx = new Namespace_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, CSharpParser.RULE_namespace_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1573;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1575;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        if(la_===1) {
	            this.state = 1574;
	            this.extern_alias_directives();

	        }
	        this.state = 1578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.USING) {
	            this.state = 1577;
	            this.using_directives();
	        }

	        this.state = 1581;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (CSharpParser.ENUM - 37)) | (1 << (CSharpParser.EXTERN - 37)) | (1 << (CSharpParser.INTERFACE - 37)) | (1 << (CSharpParser.INTERNAL - 37)) | (1 << (CSharpParser.NAMESPACE - 37)) | (1 << (CSharpParser.NEW - 37)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (CSharpParser.OVERRIDE - 73)) | (1 << (CSharpParser.PARTIAL - 73)) | (1 << (CSharpParser.PRIVATE - 73)) | (1 << (CSharpParser.PROTECTED - 73)) | (1 << (CSharpParser.PUBLIC - 73)) | (1 << (CSharpParser.READONLY - 73)) | (1 << (CSharpParser.REF - 73)) | (1 << (CSharpParser.SEALED - 73)) | (1 << (CSharpParser.STATIC - 73)) | (1 << (CSharpParser.STRUCT - 73)) | (1 << (CSharpParser.UNSAFE - 73)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (CSharpParser.VIRTUAL - 107)) | (1 << (CSharpParser.VOLATILE - 107)) | (1 << (CSharpParser.OPEN_BRACKET - 107)))) !== 0)) {
	            this.state = 1580;
	            this.namespace_member_declarations();
	        }

	        this.state = 1583;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extern_alias_directives() {
	    let localctx = new Extern_alias_directivesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, CSharpParser.RULE_extern_alias_directives);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1586; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1585;
	        		this.extern_alias_directive();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1588; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,172, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extern_alias_directive() {
	    let localctx = new Extern_alias_directiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, CSharpParser.RULE_extern_alias_directive);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1590;
	        this.match(CSharpParser.EXTERN);
	        this.state = 1591;
	        this.match(CSharpParser.ALIAS);
	        this.state = 1592;
	        this.identifier();
	        this.state = 1593;
	        this.match(CSharpParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	using_directives() {
	    let localctx = new Using_directivesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, CSharpParser.RULE_using_directives);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1596; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1595;
	            this.using_directive();
	            this.state = 1598; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===CSharpParser.USING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	using_directive() {
	    let localctx = new Using_directiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, CSharpParser.RULE_using_directive);
	    try {
	        this.state = 1615;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UsingAliasDirectiveContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1600;
	            this.match(CSharpParser.USING);
	            this.state = 1601;
	            this.identifier();
	            this.state = 1602;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 1603;
	            this.namespace_or_type_name();
	            this.state = 1604;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 2:
	            localctx = new UsingNamespaceDirectiveContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1606;
	            this.match(CSharpParser.USING);
	            this.state = 1607;
	            this.namespace_or_type_name();
	            this.state = 1608;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 3:
	            localctx = new UsingStaticDirectiveContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1610;
	            this.match(CSharpParser.USING);
	            this.state = 1611;
	            this.match(CSharpParser.STATIC);
	            this.state = 1612;
	            this.namespace_or_type_name();
	            this.state = 1613;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_member_declarations() {
	    let localctx = new Namespace_member_declarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, CSharpParser.RULE_namespace_member_declarations);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1618; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1617;
	            this.namespace_member_declaration();
	            this.state = 1620; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (CSharpParser.ENUM - 37)) | (1 << (CSharpParser.EXTERN - 37)) | (1 << (CSharpParser.INTERFACE - 37)) | (1 << (CSharpParser.INTERNAL - 37)) | (1 << (CSharpParser.NAMESPACE - 37)) | (1 << (CSharpParser.NEW - 37)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (CSharpParser.OVERRIDE - 73)) | (1 << (CSharpParser.PARTIAL - 73)) | (1 << (CSharpParser.PRIVATE - 73)) | (1 << (CSharpParser.PROTECTED - 73)) | (1 << (CSharpParser.PUBLIC - 73)) | (1 << (CSharpParser.READONLY - 73)) | (1 << (CSharpParser.REF - 73)) | (1 << (CSharpParser.SEALED - 73)) | (1 << (CSharpParser.STATIC - 73)) | (1 << (CSharpParser.STRUCT - 73)) | (1 << (CSharpParser.UNSAFE - 73)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (CSharpParser.VIRTUAL - 107)) | (1 << (CSharpParser.VOLATILE - 107)) | (1 << (CSharpParser.OPEN_BRACKET - 107)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace_member_declaration() {
	    let localctx = new Namespace_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, CSharpParser.RULE_namespace_member_declaration);
	    try {
	        this.state = 1624;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.NAMESPACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1622;
	            this.namespace_declaration();
	            break;
	        case CSharpParser.ABSTRACT:
	        case CSharpParser.ASYNC:
	        case CSharpParser.CLASS:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.ENUM:
	        case CSharpParser.EXTERN:
	        case CSharpParser.INTERFACE:
	        case CSharpParser.INTERNAL:
	        case CSharpParser.NEW:
	        case CSharpParser.OVERRIDE:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.PRIVATE:
	        case CSharpParser.PROTECTED:
	        case CSharpParser.PUBLIC:
	        case CSharpParser.READONLY:
	        case CSharpParser.REF:
	        case CSharpParser.SEALED:
	        case CSharpParser.STATIC:
	        case CSharpParser.STRUCT:
	        case CSharpParser.UNSAFE:
	        case CSharpParser.VIRTUAL:
	        case CSharpParser.VOLATILE:
	        case CSharpParser.OPEN_BRACKET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1623;
	            this.type_declaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_declaration() {
	    let localctx = new Type_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, CSharpParser.RULE_type_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 1626;
	            this.attributes();
	        }

	        this.state = 1630;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        if(la_===1) {
	            this.state = 1629;
	            this.all_member_modifiers();

	        }
	        this.state = 1637;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.CLASS:
	            this.state = 1632;
	            this.class_definition();
	            break;
	        case CSharpParser.READONLY:
	        case CSharpParser.REF:
	        case CSharpParser.STRUCT:
	            this.state = 1633;
	            this.struct_definition();
	            break;
	        case CSharpParser.INTERFACE:
	            this.state = 1634;
	            this.interface_definition();
	            break;
	        case CSharpParser.ENUM:
	            this.state = 1635;
	            this.enum_definition();
	            break;
	        case CSharpParser.DELEGATE:
	            this.state = 1636;
	            this.delegate_definition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualified_alias_member() {
	    let localctx = new Qualified_alias_memberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, CSharpParser.RULE_qualified_alias_member);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1639;
	        this.identifier();
	        this.state = 1640;
	        this.match(CSharpParser.DOUBLE_COLON);
	        this.state = 1641;
	        this.identifier();
	        this.state = 1643;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        if(la_===1) {
	            this.state = 1642;
	            this.type_argument_list();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_parameter_list() {
	    let localctx = new Type_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, CSharpParser.RULE_type_parameter_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1645;
	        this.match(CSharpParser.LT);
	        this.state = 1646;
	        this.type_parameter();
	        this.state = 1651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 1647;
	            this.match(CSharpParser.COMMA);
	            this.state = 1648;
	            this.type_parameter();
	            this.state = 1653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1654;
	        this.match(CSharpParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_parameter() {
	    let localctx = new Type_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, CSharpParser.RULE_type_parameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 1656;
	            this.attributes();
	        }

	        this.state = 1659;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_base() {
	    let localctx = new Class_baseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, CSharpParser.RULE_class_base);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1661;
	        this.match(CSharpParser.COLON);
	        this.state = 1662;
	        this.class_type();
	        this.state = 1667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 1663;
	            this.match(CSharpParser.COMMA);
	            this.state = 1664;
	            this.namespace_or_type_name();
	            this.state = 1669;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_type_list() {
	    let localctx = new Interface_type_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, CSharpParser.RULE_interface_type_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1670;
	        this.namespace_or_type_name();
	        this.state = 1675;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 1671;
	            this.match(CSharpParser.COMMA);
	            this.state = 1672;
	            this.namespace_or_type_name();
	            this.state = 1677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_parameter_constraints_clauses() {
	    let localctx = new Type_parameter_constraints_clausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, CSharpParser.RULE_type_parameter_constraints_clauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1679; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1678;
	            this.type_parameter_constraints_clause();
	            this.state = 1681; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===CSharpParser.WHERE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_parameter_constraints_clause() {
	    let localctx = new Type_parameter_constraints_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, CSharpParser.RULE_type_parameter_constraints_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1683;
	        this.match(CSharpParser.WHERE);
	        this.state = 1684;
	        this.identifier();
	        this.state = 1685;
	        this.match(CSharpParser.COLON);
	        this.state = 1686;
	        this.type_parameter_constraints();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_parameter_constraints() {
	    let localctx = new Type_parameter_constraintsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, CSharpParser.RULE_type_parameter_constraints);
	    var _la = 0; // Token type
	    try {
	        this.state = 1698;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.NEW:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1688;
	            this.constructor_constraint();
	            break;
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BY:
	        case CSharpParser.CLASS:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.STRING:
	        case CSharpParser.STRUCT:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1689;
	            this.primary_constraint();
	            this.state = 1692;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	            if(la_===1) {
	                this.state = 1690;
	                this.match(CSharpParser.COMMA);
	                this.state = 1691;
	                this.secondary_constraints();

	            }
	            this.state = 1696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.COMMA) {
	                this.state = 1694;
	                this.match(CSharpParser.COMMA);
	                this.state = 1695;
	                this.constructor_constraint();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary_constraint() {
	    let localctx = new Primary_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, CSharpParser.RULE_primary_constraint);
	    var _la = 0; // Token type
	    try {
	        this.state = 1707;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1700;
	            this.class_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1701;
	            this.match(CSharpParser.CLASS);
	            this.state = 1703;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.INTERR) {
	                this.state = 1702;
	                this.match(CSharpParser.INTERR);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1705;
	            this.match(CSharpParser.STRUCT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1706;
	            this.match(CSharpParser.UNMANAGED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	secondary_constraints() {
	    let localctx = new Secondary_constraintsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, CSharpParser.RULE_secondary_constraints);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1709;
	        this.namespace_or_type_name();
	        this.state = 1714;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,191,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1710;
	                this.match(CSharpParser.COMMA);
	                this.state = 1711;
	                this.namespace_or_type_name(); 
	            }
	            this.state = 1716;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,191,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_constraint() {
	    let localctx = new Constructor_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, CSharpParser.RULE_constructor_constraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1717;
	        this.match(CSharpParser.NEW);
	        this.state = 1718;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1719;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_body() {
	    let localctx = new Class_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, CSharpParser.RULE_class_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1721;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.CONST) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.ENUM - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.EVENT - 32)) | (1 << (CSharpParser.EXPLICIT - 32)) | (1 << (CSharpParser.EXTERN - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IMPLICIT - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTERFACE - 32)) | (1 << (CSharpParser.INTERNAL - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.NEW - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.OVERRIDE - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.PRIVATE - 64)) | (1 << (CSharpParser.PROTECTED - 64)) | (1 << (CSharpParser.PUBLIC - 64)) | (1 << (CSharpParser.READONLY - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SEALED - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STATIC - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.STRUCT - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.UNSAFE - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VIRTUAL - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.VOLATILE - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0) || _la===CSharpParser.TILDE) {
	            this.state = 1722;
	            this.class_member_declarations();
	        }

	        this.state = 1725;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_member_declarations() {
	    let localctx = new Class_member_declarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, CSharpParser.RULE_class_member_declarations);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1728; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1727;
	            this.class_member_declaration();
	            this.state = 1730; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.CONST) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.ENUM - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.EVENT - 32)) | (1 << (CSharpParser.EXPLICIT - 32)) | (1 << (CSharpParser.EXTERN - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IMPLICIT - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTERFACE - 32)) | (1 << (CSharpParser.INTERNAL - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.NEW - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.OVERRIDE - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.PRIVATE - 64)) | (1 << (CSharpParser.PROTECTED - 64)) | (1 << (CSharpParser.PUBLIC - 64)) | (1 << (CSharpParser.READONLY - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SEALED - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STATIC - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.STRUCT - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.UNSAFE - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VIRTUAL - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.VOLATILE - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0) || _la===CSharpParser.TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_member_declaration() {
	    let localctx = new Class_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, CSharpParser.RULE_class_member_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 1732;
	            this.attributes();
	        }

	        this.state = 1736;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        if(la_===1) {
	            this.state = 1735;
	            this.all_member_modifiers();

	        }
	        this.state = 1740;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CLASS:
	        case CSharpParser.CONST:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.ENUM:
	        case CSharpParser.EQUALS:
	        case CSharpParser.EVENT:
	        case CSharpParser.EXPLICIT:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.IMPLICIT:
	        case CSharpParser.INT:
	        case CSharpParser.INTERFACE:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.READONLY:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.STRING:
	        case CSharpParser.STRUCT:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.VOID:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.OPEN_PARENS:
	            this.state = 1738;
	            this.common_member_declaration();
	            break;
	        case CSharpParser.TILDE:
	            this.state = 1739;
	            this.destructor_definition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	all_member_modifiers() {
	    let localctx = new All_member_modifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, CSharpParser.RULE_all_member_modifiers);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1743; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1742;
	        		this.all_member_modifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1745; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,197, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	all_member_modifier() {
	    let localctx = new All_member_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, CSharpParser.RULE_all_member_modifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1747;
	        _la = this._input.LA(1);
	        if(!(_la===CSharpParser.ABSTRACT || _la===CSharpParser.ASYNC || ((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (CSharpParser.EXTERN - 41)) | (1 << (CSharpParser.INTERNAL - 41)) | (1 << (CSharpParser.NEW - 41)))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (CSharpParser.OVERRIDE - 73)) | (1 << (CSharpParser.PARTIAL - 73)) | (1 << (CSharpParser.PRIVATE - 73)) | (1 << (CSharpParser.PROTECTED - 73)) | (1 << (CSharpParser.PUBLIC - 73)) | (1 << (CSharpParser.READONLY - 73)) | (1 << (CSharpParser.SEALED - 73)) | (1 << (CSharpParser.STATIC - 73)) | (1 << (CSharpParser.UNSAFE - 73)))) !== 0) || _la===CSharpParser.VIRTUAL || _la===CSharpParser.VOLATILE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	common_member_declaration() {
	    let localctx = new Common_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, CSharpParser.RULE_common_member_declaration);
	    try {
	        this.state = 1768;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1749;
	            this.constant_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1750;
	            this.typed_member_declaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1751;
	            this.event_declaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1752;
	            this.conversion_operator_declarator();
	            this.state = 1758;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CSharpParser.OPEN_BRACE:
	            case CSharpParser.SEMICOLON:
	                this.state = 1753;
	                this.body();
	                break;
	            case CSharpParser.ASSIGNMENT:
	                this.state = 1754;
	                this.right_arrow();
	                this.state = 1755;
	                this.throwable_expression();
	                this.state = 1756;
	                this.match(CSharpParser.SEMICOLON);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1760;
	            this.constructor_declaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1761;
	            this.match(CSharpParser.VOID);
	            this.state = 1762;
	            this.method_declaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1763;
	            this.class_definition();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1764;
	            this.struct_definition();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1765;
	            this.interface_definition();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1766;
	            this.enum_definition();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1767;
	            this.delegate_definition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typed_member_declaration() {
	    let localctx = new Typed_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, CSharpParser.RULE_typed_member_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1775;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	        if(la_===1) {
	            this.state = 1770;
	            this.match(CSharpParser.REF);

	        } else if(la_===2) {
	            this.state = 1771;
	            this.match(CSharpParser.READONLY);
	            this.state = 1772;
	            this.match(CSharpParser.REF);

	        } else if(la_===3) {
	            this.state = 1773;
	            this.match(CSharpParser.REF);
	            this.state = 1774;
	            this.match(CSharpParser.READONLY);

	        }
	        this.state = 1777;
	        this.type_();
	        this.state = 1787;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1778;
	            this.namespace_or_type_name();
	            this.state = 1779;
	            this.match(CSharpParser.DOT);
	            this.state = 1780;
	            this.indexer_declaration();
	            break;

	        case 2:
	            this.state = 1782;
	            this.method_declaration();
	            break;

	        case 3:
	            this.state = 1783;
	            this.property_declaration();
	            break;

	        case 4:
	            this.state = 1784;
	            this.indexer_declaration();
	            break;

	        case 5:
	            this.state = 1785;
	            this.operator_declaration();
	            break;

	        case 6:
	            this.state = 1786;
	            this.field_declaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant_declarators() {
	    let localctx = new Constant_declaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, CSharpParser.RULE_constant_declarators);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1789;
	        this.constant_declarator();
	        this.state = 1794;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 1790;
	            this.match(CSharpParser.COMMA);
	            this.state = 1791;
	            this.constant_declarator();
	            this.state = 1796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant_declarator() {
	    let localctx = new Constant_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, CSharpParser.RULE_constant_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1797;
	        this.identifier();
	        this.state = 1798;
	        this.match(CSharpParser.ASSIGNMENT);
	        this.state = 1799;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_declarators() {
	    let localctx = new Variable_declaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, CSharpParser.RULE_variable_declarators);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1801;
	        this.variable_declarator();
	        this.state = 1806;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 1802;
	            this.match(CSharpParser.COMMA);
	            this.state = 1803;
	            this.variable_declarator();
	            this.state = 1808;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_declarator() {
	    let localctx = new Variable_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, CSharpParser.RULE_variable_declarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1809;
	        this.identifier();
	        this.state = 1812;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.ASSIGNMENT) {
	            this.state = 1810;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 1811;
	            this.variable_initializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable_initializer() {
	    let localctx = new Variable_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, CSharpParser.RULE_variable_initializer);
	    try {
	        this.state = 1816;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BASE:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CHECKED:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DEFAULT:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FALSE:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.NEW:
	        case CSharpParser.NULL_:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.SIZEOF:
	        case CSharpParser.STRING:
	        case CSharpParser.THIS:
	        case CSharpParser.TRUE:
	        case CSharpParser.TYPEOF:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNCHECKED:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.LITERAL_ACCESS:
	        case CSharpParser.INTEGER_LITERAL:
	        case CSharpParser.HEX_INTEGER_LITERAL:
	        case CSharpParser.BIN_INTEGER_LITERAL:
	        case CSharpParser.REAL_LITERAL:
	        case CSharpParser.CHARACTER_LITERAL:
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	        case CSharpParser.OPEN_PARENS:
	        case CSharpParser.PLUS:
	        case CSharpParser.MINUS:
	        case CSharpParser.STAR:
	        case CSharpParser.AMP:
	        case CSharpParser.CARET:
	        case CSharpParser.BANG:
	        case CSharpParser.TILDE:
	        case CSharpParser.OP_INC:
	        case CSharpParser.OP_DEC:
	        case CSharpParser.OP_RANGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1814;
	            this.expression();
	            break;
	        case CSharpParser.OPEN_BRACE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1815;
	            this.array_initializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_type() {
	    let localctx = new Return_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, CSharpParser.RULE_return_type);
	    try {
	        this.state = 1820;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1818;
	            this.type_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1819;
	            this.match(CSharpParser.VOID);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	member_name() {
	    let localctx = new Member_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, CSharpParser.RULE_member_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1822;
	        this.namespace_or_type_name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_body() {
	    let localctx = new Method_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, CSharpParser.RULE_method_body);
	    try {
	        this.state = 1826;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.OPEN_BRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1824;
	            this.block();
	            break;
	        case CSharpParser.SEMICOLON:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1825;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formal_parameter_list() {
	    let localctx = new Formal_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, CSharpParser.RULE_formal_parameter_list);
	    var _la = 0; // Token type
	    try {
	        this.state = 1834;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1828;
	            this.parameter_array();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1829;
	            this.fixed_parameters();
	            this.state = 1832;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.COMMA) {
	                this.state = 1830;
	                this.match(CSharpParser.COMMA);
	                this.state = 1831;
	                this.parameter_array();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_parameters() {
	    let localctx = new Fixed_parametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, CSharpParser.RULE_fixed_parameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1836;
	        this.fixed_parameter();
	        this.state = 1841;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,210,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1837;
	                this.match(CSharpParser.COMMA);
	                this.state = 1838;
	                this.fixed_parameter(); 
	            }
	            this.state = 1843;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,210,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_parameter() {
	    let localctx = new Fixed_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, CSharpParser.RULE_fixed_parameter);
	    var _la = 0; // Token type
	    try {
	        this.state = 1852;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1845;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.OPEN_BRACKET) {
	                this.state = 1844;
	                this.attributes();
	            }

	            this.state = 1848;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CSharpParser.IN - 54)) | (1 << (CSharpParser.OUT - 54)) | (1 << (CSharpParser.REF - 54)))) !== 0) || _la===CSharpParser.THIS) {
	                this.state = 1847;
	                this.parameter_modifier();
	            }

	            this.state = 1850;
	            this.arg_declaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1851;
	            this.match(CSharpParser.ARGLIST);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter_modifier() {
	    let localctx = new Parameter_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, CSharpParser.RULE_parameter_modifier);
	    try {
	        this.state = 1862;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1854;
	            this.match(CSharpParser.REF);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1855;
	            this.match(CSharpParser.OUT);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1856;
	            this.match(CSharpParser.IN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1857;
	            this.match(CSharpParser.REF);
	            this.state = 1858;
	            this.match(CSharpParser.THIS);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1859;
	            this.match(CSharpParser.IN);
	            this.state = 1860;
	            this.match(CSharpParser.THIS);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1861;
	            this.match(CSharpParser.THIS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter_array() {
	    let localctx = new Parameter_arrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, CSharpParser.RULE_parameter_array);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 1864;
	            this.attributes();
	        }

	        this.state = 1867;
	        this.match(CSharpParser.PARAMS);
	        this.state = 1868;
	        this.array_type();
	        this.state = 1869;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessor_declarations() {
	    let localctx = new Accessor_declarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, CSharpParser.RULE_accessor_declarations);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1872;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 1871;
	            localctx.attrs = this.attributes();
	        }

	        this.state = 1875;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (CSharpParser.INTERNAL - 57)) | (1 << (CSharpParser.PRIVATE - 57)) | (1 << (CSharpParser.PROTECTED - 57)))) !== 0)) {
	            this.state = 1874;
	            localctx.mods = this.accessor_modifier();
	        }

	        this.state = 1887;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.GET:
	            this.state = 1877;
	            this.match(CSharpParser.GET);
	            this.state = 1878;
	            this.accessor_body();
	            this.state = 1880;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (CSharpParser.INTERNAL - 57)) | (1 << (CSharpParser.PRIVATE - 57)) | (1 << (CSharpParser.PROTECTED - 57)) | (1 << (CSharpParser.SET - 57)))) !== 0) || _la===CSharpParser.OPEN_BRACKET) {
	                this.state = 1879;
	                this.set_accessor_declaration();
	            }

	            break;
	        case CSharpParser.SET:
	            this.state = 1882;
	            this.match(CSharpParser.SET);
	            this.state = 1883;
	            this.accessor_body();
	            this.state = 1885;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (CSharpParser.GET - 49)) | (1 << (CSharpParser.INTERNAL - 49)) | (1 << (CSharpParser.PRIVATE - 49)) | (1 << (CSharpParser.PROTECTED - 49)))) !== 0) || _la===CSharpParser.OPEN_BRACKET) {
	                this.state = 1884;
	                this.get_accessor_declaration();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	get_accessor_declaration() {
	    let localctx = new Get_accessor_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, CSharpParser.RULE_get_accessor_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1890;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 1889;
	            this.attributes();
	        }

	        this.state = 1893;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (CSharpParser.INTERNAL - 57)) | (1 << (CSharpParser.PRIVATE - 57)) | (1 << (CSharpParser.PROTECTED - 57)))) !== 0)) {
	            this.state = 1892;
	            this.accessor_modifier();
	        }

	        this.state = 1895;
	        this.match(CSharpParser.GET);
	        this.state = 1896;
	        this.accessor_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set_accessor_declaration() {
	    let localctx = new Set_accessor_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, CSharpParser.RULE_set_accessor_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1899;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 1898;
	            this.attributes();
	        }

	        this.state = 1902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (CSharpParser.INTERNAL - 57)) | (1 << (CSharpParser.PRIVATE - 57)) | (1 << (CSharpParser.PROTECTED - 57)))) !== 0)) {
	            this.state = 1901;
	            this.accessor_modifier();
	        }

	        this.state = 1904;
	        this.match(CSharpParser.SET);
	        this.state = 1905;
	        this.accessor_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessor_modifier() {
	    let localctx = new Accessor_modifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, CSharpParser.RULE_accessor_modifier);
	    try {
	        this.state = 1914;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1907;
	            this.match(CSharpParser.PROTECTED);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1908;
	            this.match(CSharpParser.INTERNAL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1909;
	            this.match(CSharpParser.PRIVATE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1910;
	            this.match(CSharpParser.PROTECTED);
	            this.state = 1911;
	            this.match(CSharpParser.INTERNAL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1912;
	            this.match(CSharpParser.INTERNAL);
	            this.state = 1913;
	            this.match(CSharpParser.PROTECTED);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessor_body() {
	    let localctx = new Accessor_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, CSharpParser.RULE_accessor_body);
	    try {
	        this.state = 1918;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.OPEN_BRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1916;
	            this.block();
	            break;
	        case CSharpParser.SEMICOLON:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1917;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_accessor_declarations() {
	    let localctx = new Event_accessor_declarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, CSharpParser.RULE_event_accessor_declarations);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1921;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 1920;
	            this.attributes();
	        }

	        this.state = 1931;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	            this.state = 1923;
	            this.match(CSharpParser.ADD);
	            this.state = 1924;
	            this.block();
	            this.state = 1925;
	            this.remove_accessor_declaration();
	            break;
	        case CSharpParser.REMOVE:
	            this.state = 1927;
	            this.match(CSharpParser.REMOVE);
	            this.state = 1928;
	            this.block();
	            this.state = 1929;
	            this.add_accessor_declaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	add_accessor_declaration() {
	    let localctx = new Add_accessor_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, CSharpParser.RULE_add_accessor_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1934;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 1933;
	            this.attributes();
	        }

	        this.state = 1936;
	        this.match(CSharpParser.ADD);
	        this.state = 1937;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	remove_accessor_declaration() {
	    let localctx = new Remove_accessor_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, CSharpParser.RULE_remove_accessor_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1940;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 1939;
	            this.attributes();
	        }

	        this.state = 1942;
	        this.match(CSharpParser.REMOVE);
	        this.state = 1943;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	overloadable_operator() {
	    let localctx = new Overloadable_operatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, CSharpParser.RULE_overloadable_operator);
	    try {
	        this.state = 1967;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1945;
	            this.match(CSharpParser.PLUS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1946;
	            this.match(CSharpParser.MINUS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1947;
	            this.match(CSharpParser.BANG);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1948;
	            this.match(CSharpParser.TILDE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1949;
	            this.match(CSharpParser.OP_INC);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1950;
	            this.match(CSharpParser.OP_DEC);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1951;
	            this.match(CSharpParser.TRUE);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1952;
	            this.match(CSharpParser.FALSE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1953;
	            this.match(CSharpParser.STAR);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1954;
	            this.match(CSharpParser.DIV);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1955;
	            this.match(CSharpParser.PERCENT);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1956;
	            this.match(CSharpParser.AMP);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1957;
	            this.match(CSharpParser.BITWISE_OR);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1958;
	            this.match(CSharpParser.CARET);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1959;
	            this.match(CSharpParser.OP_LEFT_SHIFT);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1960;
	            this.right_shift();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1961;
	            this.match(CSharpParser.OP_EQ);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1962;
	            this.match(CSharpParser.OP_NE);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1963;
	            this.match(CSharpParser.GT);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1964;
	            this.match(CSharpParser.LT);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1965;
	            this.match(CSharpParser.OP_GE);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1966;
	            this.match(CSharpParser.OP_LE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conversion_operator_declarator() {
	    let localctx = new Conversion_operator_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, CSharpParser.RULE_conversion_operator_declarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1969;
	        _la = this._input.LA(1);
	        if(!(_la===CSharpParser.EXPLICIT || _la===CSharpParser.IMPLICIT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1970;
	        this.match(CSharpParser.OPERATOR);
	        this.state = 1971;
	        this.type_();
	        this.state = 1972;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1973;
	        this.arg_declaration();
	        this.state = 1974;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_initializer() {
	    let localctx = new Constructor_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, CSharpParser.RULE_constructor_initializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1976;
	        this.match(CSharpParser.COLON);
	        this.state = 1977;
	        _la = this._input.LA(1);
	        if(!(_la===CSharpParser.BASE || _la===CSharpParser.THIS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1978;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 1980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.IN - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)) | (1 << (CSharpParser.OUT - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (CSharpParser.VOID - 108)) | (1 << (CSharpParser.WHEN - 108)) | (1 << (CSharpParser.WHERE - 108)) | (1 << (CSharpParser.YIELD - 108)) | (1 << (CSharpParser.IDENTIFIER - 108)) | (1 << (CSharpParser.LITERAL_ACCESS - 108)) | (1 << (CSharpParser.INTEGER_LITERAL - 108)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 108)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 108)) | (1 << (CSharpParser.REAL_LITERAL - 108)) | (1 << (CSharpParser.CHARACTER_LITERAL - 108)) | (1 << (CSharpParser.REGULAR_STRING - 108)) | (1 << (CSharpParser.VERBATIUM_STRING - 108)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 108)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 108)) | (1 << (CSharpParser.OPEN_PARENS - 108)) | (1 << (CSharpParser.PLUS - 108)) | (1 << (CSharpParser.MINUS - 108)) | (1 << (CSharpParser.STAR - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CSharpParser.AMP - 140)) | (1 << (CSharpParser.CARET - 140)) | (1 << (CSharpParser.BANG - 140)) | (1 << (CSharpParser.TILDE - 140)) | (1 << (CSharpParser.OP_INC - 140)) | (1 << (CSharpParser.OP_DEC - 140)) | (1 << (CSharpParser.OP_RANGE - 140)))) !== 0)) {
	            this.state = 1979;
	            this.argument_list();
	        }

	        this.state = 1982;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	body() {
	    let localctx = new BodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, CSharpParser.RULE_body);
	    try {
	        this.state = 1986;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.OPEN_BRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1984;
	            this.block();
	            break;
	        case CSharpParser.SEMICOLON:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1985;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_interfaces() {
	    let localctx = new Struct_interfacesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, CSharpParser.RULE_struct_interfaces);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1988;
	        this.match(CSharpParser.COLON);
	        this.state = 1989;
	        this.interface_type_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_body() {
	    let localctx = new Struct_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, CSharpParser.RULE_struct_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1991;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 1995;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.CONST) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.ENUM - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.EVENT - 32)) | (1 << (CSharpParser.EXPLICIT - 32)) | (1 << (CSharpParser.EXTERN - 32)) | (1 << (CSharpParser.FIXED - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IMPLICIT - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTERFACE - 32)) | (1 << (CSharpParser.INTERNAL - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.NEW - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.OVERRIDE - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.PRIVATE - 64)) | (1 << (CSharpParser.PROTECTED - 64)) | (1 << (CSharpParser.PUBLIC - 64)) | (1 << (CSharpParser.READONLY - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SEALED - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STATIC - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.STRUCT - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.UNSAFE - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VIRTUAL - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.VOLATILE - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0)) {
	            this.state = 1992;
	            this.struct_member_declaration();
	            this.state = 1997;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1998;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_member_declaration() {
	    let localctx = new Struct_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, CSharpParser.RULE_struct_member_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2001;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 2000;
	            this.attributes();
	        }

	        this.state = 2004;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        if(la_===1) {
	            this.state = 2003;
	            this.all_member_modifiers();

	        }
	        this.state = 2016;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CLASS:
	        case CSharpParser.CONST:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.ENUM:
	        case CSharpParser.EQUALS:
	        case CSharpParser.EVENT:
	        case CSharpParser.EXPLICIT:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.IMPLICIT:
	        case CSharpParser.INT:
	        case CSharpParser.INTERFACE:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.READONLY:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.STRING:
	        case CSharpParser.STRUCT:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.VOID:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.OPEN_PARENS:
	            this.state = 2006;
	            this.common_member_declaration();
	            break;
	        case CSharpParser.FIXED:
	            this.state = 2007;
	            this.match(CSharpParser.FIXED);
	            this.state = 2008;
	            this.type_();
	            this.state = 2010; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2009;
	                this.fixed_size_buffer_declarator();
	                this.state = 2012; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (CSharpParser.UNMANAGED - 102)) | (1 << (CSharpParser.VAR - 102)) | (1 << (CSharpParser.WHEN - 102)) | (1 << (CSharpParser.WHERE - 102)) | (1 << (CSharpParser.YIELD - 102)) | (1 << (CSharpParser.IDENTIFIER - 102)))) !== 0));
	            this.state = 2014;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_type() {
	    let localctx = new Array_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, CSharpParser.RULE_array_type);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2018;
	        this.base_type();
	        this.state = 2026; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2022;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CSharpParser.STAR || _la===CSharpParser.INTERR) {
	                this.state = 2019;
	                _la = this._input.LA(1);
	                if(!(_la===CSharpParser.STAR || _la===CSharpParser.INTERR)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2024;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2025;
	            this.rank_specifier();
	            this.state = 2028; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (CSharpParser.OPEN_BRACKET - 127)) | (1 << (CSharpParser.STAR - 127)) | (1 << (CSharpParser.INTERR - 127)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rank_specifier() {
	    let localctx = new Rank_specifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, CSharpParser.RULE_rank_specifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2030;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 2034;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 2031;
	            this.match(CSharpParser.COMMA);
	            this.state = 2036;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2037;
	        this.match(CSharpParser.CLOSE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_initializer() {
	    let localctx = new Array_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, CSharpParser.RULE_array_initializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2039;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 2051;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (CSharpParser.WHEN - 110)) | (1 << (CSharpParser.WHERE - 110)) | (1 << (CSharpParser.YIELD - 110)) | (1 << (CSharpParser.IDENTIFIER - 110)) | (1 << (CSharpParser.LITERAL_ACCESS - 110)) | (1 << (CSharpParser.INTEGER_LITERAL - 110)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.REAL_LITERAL - 110)) | (1 << (CSharpParser.CHARACTER_LITERAL - 110)) | (1 << (CSharpParser.REGULAR_STRING - 110)) | (1 << (CSharpParser.VERBATIUM_STRING - 110)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 110)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 110)) | (1 << (CSharpParser.OPEN_BRACE - 110)) | (1 << (CSharpParser.OPEN_PARENS - 110)) | (1 << (CSharpParser.PLUS - 110)) | (1 << (CSharpParser.MINUS - 110)) | (1 << (CSharpParser.STAR - 110)) | (1 << (CSharpParser.AMP - 110)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (CSharpParser.CARET - 142)) | (1 << (CSharpParser.BANG - 142)) | (1 << (CSharpParser.TILDE - 142)) | (1 << (CSharpParser.OP_INC - 142)) | (1 << (CSharpParser.OP_DEC - 142)) | (1 << (CSharpParser.OP_RANGE - 142)))) !== 0)) {
	            this.state = 2040;
	            this.variable_initializer();
	            this.state = 2045;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,242,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2041;
	                    this.match(CSharpParser.COMMA);
	                    this.state = 2042;
	                    this.variable_initializer(); 
	                }
	                this.state = 2047;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,242,this._ctx);
	            }

	            this.state = 2049;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.COMMA) {
	                this.state = 2048;
	                this.match(CSharpParser.COMMA);
	            }

	        }

	        this.state = 2053;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variant_type_parameter_list() {
	    let localctx = new Variant_type_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, CSharpParser.RULE_variant_type_parameter_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2055;
	        this.match(CSharpParser.LT);
	        this.state = 2056;
	        this.variant_type_parameter();
	        this.state = 2061;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 2057;
	            this.match(CSharpParser.COMMA);
	            this.state = 2058;
	            this.variant_type_parameter();
	            this.state = 2063;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2064;
	        this.match(CSharpParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variant_type_parameter() {
	    let localctx = new Variant_type_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, CSharpParser.RULE_variant_type_parameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2067;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 2066;
	            this.attributes();
	        }

	        this.state = 2070;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.IN || _la===CSharpParser.OUT) {
	            this.state = 2069;
	            this.variance_annotation();
	        }

	        this.state = 2072;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variance_annotation() {
	    let localctx = new Variance_annotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, CSharpParser.RULE_variance_annotation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2074;
	        _la = this._input.LA(1);
	        if(!(_la===CSharpParser.IN || _la===CSharpParser.OUT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_base() {
	    let localctx = new Interface_baseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, CSharpParser.RULE_interface_base);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2076;
	        this.match(CSharpParser.COLON);
	        this.state = 2077;
	        this.interface_type_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_body() {
	    let localctx = new Interface_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, CSharpParser.RULE_interface_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2079;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 2083;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.EVENT - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.NEW - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.READONLY - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STRING - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.UNSAFE - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0)) {
	            this.state = 2080;
	            this.interface_member_declaration();
	            this.state = 2085;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2086;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_member_declaration() {
	    let localctx = new Interface_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, CSharpParser.RULE_interface_member_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2089;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 2088;
	            this.attributes();
	        }

	        this.state = 2092;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.NEW) {
	            this.state = 2091;
	            this.match(CSharpParser.NEW);
	        }

	        this.state = 2157;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2095;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.UNSAFE) {
	                this.state = 2094;
	                this.match(CSharpParser.UNSAFE);
	            }

	            this.state = 2102;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	            if(la_===1) {
	                this.state = 2097;
	                this.match(CSharpParser.REF);

	            } else if(la_===2) {
	                this.state = 2098;
	                this.match(CSharpParser.REF);
	                this.state = 2099;
	                this.match(CSharpParser.READONLY);

	            } else if(la_===3) {
	                this.state = 2100;
	                this.match(CSharpParser.READONLY);
	                this.state = 2101;
	                this.match(CSharpParser.REF);

	            }
	            this.state = 2104;
	            this.type_();
	            this.state = 2132;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2105;
	                this.identifier();
	                this.state = 2107;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CSharpParser.LT) {
	                    this.state = 2106;
	                    this.type_parameter_list();
	                }

	                this.state = 2109;
	                this.match(CSharpParser.OPEN_PARENS);
	                this.state = 2111;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IN - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.OUT - 64)) | (1 << (CSharpParser.PARAMS - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.THIS - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0)) {
	                    this.state = 2110;
	                    this.formal_parameter_list();
	                }

	                this.state = 2113;
	                this.match(CSharpParser.CLOSE_PARENS);
	                this.state = 2115;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CSharpParser.WHERE) {
	                    this.state = 2114;
	                    this.type_parameter_constraints_clauses();
	                }

	                this.state = 2117;
	                this.match(CSharpParser.SEMICOLON);
	                break;

	            case 2:
	                this.state = 2119;
	                this.identifier();
	                this.state = 2120;
	                this.match(CSharpParser.OPEN_BRACE);
	                this.state = 2121;
	                this.interface_accessors();
	                this.state = 2122;
	                this.match(CSharpParser.CLOSE_BRACE);
	                break;

	            case 3:
	                this.state = 2124;
	                this.match(CSharpParser.THIS);
	                this.state = 2125;
	                this.match(CSharpParser.OPEN_BRACKET);
	                this.state = 2126;
	                this.formal_parameter_list();
	                this.state = 2127;
	                this.match(CSharpParser.CLOSE_BRACKET);
	                this.state = 2128;
	                this.match(CSharpParser.OPEN_BRACE);
	                this.state = 2129;
	                this.interface_accessors();
	                this.state = 2130;
	                this.match(CSharpParser.CLOSE_BRACE);
	                break;

	            }
	            break;

	        case 2:
	            this.state = 2135;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.UNSAFE) {
	                this.state = 2134;
	                this.match(CSharpParser.UNSAFE);
	            }

	            this.state = 2137;
	            this.match(CSharpParser.VOID);
	            this.state = 2138;
	            this.identifier();
	            this.state = 2140;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.LT) {
	                this.state = 2139;
	                this.type_parameter_list();
	            }

	            this.state = 2142;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 2144;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IN - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.OUT - 64)) | (1 << (CSharpParser.PARAMS - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.THIS - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0)) {
	                this.state = 2143;
	                this.formal_parameter_list();
	            }

	            this.state = 2146;
	            this.match(CSharpParser.CLOSE_PARENS);
	            this.state = 2148;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.WHERE) {
	                this.state = 2147;
	                this.type_parameter_constraints_clauses();
	            }

	            this.state = 2150;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 3:
	            this.state = 2152;
	            this.match(CSharpParser.EVENT);
	            this.state = 2153;
	            this.type_();
	            this.state = 2154;
	            this.identifier();
	            this.state = 2155;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_accessors() {
	    let localctx = new Interface_accessorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, CSharpParser.RULE_interface_accessors);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2160;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 2159;
	            this.attributes();
	        }

	        this.state = 2180;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.GET:
	            this.state = 2162;
	            this.match(CSharpParser.GET);
	            this.state = 2163;
	            this.match(CSharpParser.SEMICOLON);
	            this.state = 2169;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.SET || _la===CSharpParser.OPEN_BRACKET) {
	                this.state = 2165;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CSharpParser.OPEN_BRACKET) {
	                    this.state = 2164;
	                    this.attributes();
	                }

	                this.state = 2167;
	                this.match(CSharpParser.SET);
	                this.state = 2168;
	                this.match(CSharpParser.SEMICOLON);
	            }

	            break;
	        case CSharpParser.SET:
	            this.state = 2171;
	            this.match(CSharpParser.SET);
	            this.state = 2172;
	            this.match(CSharpParser.SEMICOLON);
	            this.state = 2178;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.GET || _la===CSharpParser.OPEN_BRACKET) {
	                this.state = 2174;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CSharpParser.OPEN_BRACKET) {
	                    this.state = 2173;
	                    this.attributes();
	                }

	                this.state = 2176;
	                this.match(CSharpParser.GET);
	                this.state = 2177;
	                this.match(CSharpParser.SEMICOLON);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_base() {
	    let localctx = new Enum_baseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, CSharpParser.RULE_enum_base);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2182;
	        this.match(CSharpParser.COLON);
	        this.state = 2183;
	        this.type_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_body() {
	    let localctx = new Enum_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, CSharpParser.RULE_enum_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2185;
	        this.match(CSharpParser.OPEN_BRACE);
	        this.state = 2197;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (CSharpParser.UNMANAGED - 102)) | (1 << (CSharpParser.VAR - 102)) | (1 << (CSharpParser.WHEN - 102)) | (1 << (CSharpParser.WHERE - 102)) | (1 << (CSharpParser.YIELD - 102)) | (1 << (CSharpParser.IDENTIFIER - 102)) | (1 << (CSharpParser.OPEN_BRACKET - 102)))) !== 0)) {
	            this.state = 2186;
	            this.enum_member_declaration();
	            this.state = 2191;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,268,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2187;
	                    this.match(CSharpParser.COMMA);
	                    this.state = 2188;
	                    this.enum_member_declaration(); 
	                }
	                this.state = 2193;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,268,this._ctx);
	            }

	            this.state = 2195;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.COMMA) {
	                this.state = 2194;
	                this.match(CSharpParser.COMMA);
	            }

	        }

	        this.state = 2199;
	        this.match(CSharpParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_member_declaration() {
	    let localctx = new Enum_member_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, CSharpParser.RULE_enum_member_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2202;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_BRACKET) {
	            this.state = 2201;
	            this.attributes();
	        }

	        this.state = 2204;
	        this.identifier();
	        this.state = 2207;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.ASSIGNMENT) {
	            this.state = 2205;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 2206;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_attribute_section() {
	    let localctx = new Global_attribute_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, CSharpParser.RULE_global_attribute_section);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2209;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 2210;
	        this.global_attribute_target();
	        this.state = 2211;
	        this.match(CSharpParser.COLON);
	        this.state = 2212;
	        this.attribute_list();
	        this.state = 2214;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.COMMA) {
	            this.state = 2213;
	            this.match(CSharpParser.COMMA);
	        }

	        this.state = 2216;
	        this.match(CSharpParser.CLOSE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_attribute_target() {
	    let localctx = new Global_attribute_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, CSharpParser.RULE_global_attribute_target);
	    try {
	        this.state = 2220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2218;
	            this.keyword();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2219;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributes() {
	    let localctx = new AttributesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, CSharpParser.RULE_attributes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2223; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2222;
	            this.attribute_section();
	            this.state = 2225; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===CSharpParser.OPEN_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_section() {
	    let localctx = new Attribute_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, CSharpParser.RULE_attribute_section);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2227;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 2231;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	        if(la_===1) {
	            this.state = 2228;
	            this.attribute_target();
	            this.state = 2229;
	            this.match(CSharpParser.COLON);

	        }
	        this.state = 2233;
	        this.attribute_list();
	        this.state = 2235;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.COMMA) {
	            this.state = 2234;
	            this.match(CSharpParser.COMMA);
	        }

	        this.state = 2237;
	        this.match(CSharpParser.CLOSE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_target() {
	    let localctx = new Attribute_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, CSharpParser.RULE_attribute_target);
	    try {
	        this.state = 2241;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2239;
	            this.keyword();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2240;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_list() {
	    let localctx = new Attribute_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, CSharpParser.RULE_attribute_list);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2243;
	        this.attribute();
	        this.state = 2248;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,279,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2244;
	                this.match(CSharpParser.COMMA);
	                this.state = 2245;
	                this.attribute(); 
	            }
	            this.state = 2250;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,279,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute() {
	    let localctx = new AttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, CSharpParser.RULE_attribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2251;
	        this.namespace_or_type_name();
	        this.state = 2264;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.OPEN_PARENS) {
	            this.state = 2252;
	            this.match(CSharpParser.OPEN_PARENS);
	            this.state = 2261;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (CSharpParser.WHEN - 110)) | (1 << (CSharpParser.WHERE - 110)) | (1 << (CSharpParser.YIELD - 110)) | (1 << (CSharpParser.IDENTIFIER - 110)) | (1 << (CSharpParser.LITERAL_ACCESS - 110)) | (1 << (CSharpParser.INTEGER_LITERAL - 110)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.REAL_LITERAL - 110)) | (1 << (CSharpParser.CHARACTER_LITERAL - 110)) | (1 << (CSharpParser.REGULAR_STRING - 110)) | (1 << (CSharpParser.VERBATIUM_STRING - 110)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 110)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 110)) | (1 << (CSharpParser.OPEN_PARENS - 110)) | (1 << (CSharpParser.PLUS - 110)) | (1 << (CSharpParser.MINUS - 110)) | (1 << (CSharpParser.STAR - 110)) | (1 << (CSharpParser.AMP - 110)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (CSharpParser.CARET - 142)) | (1 << (CSharpParser.BANG - 142)) | (1 << (CSharpParser.TILDE - 142)) | (1 << (CSharpParser.OP_INC - 142)) | (1 << (CSharpParser.OP_DEC - 142)) | (1 << (CSharpParser.OP_RANGE - 142)))) !== 0)) {
	                this.state = 2253;
	                this.attribute_argument();
	                this.state = 2258;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===CSharpParser.COMMA) {
	                    this.state = 2254;
	                    this.match(CSharpParser.COMMA);
	                    this.state = 2255;
	                    this.attribute_argument();
	                    this.state = 2260;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 2263;
	            this.match(CSharpParser.CLOSE_PARENS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attribute_argument() {
	    let localctx = new Attribute_argumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, CSharpParser.RULE_attribute_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2269;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	        if(la_===1) {
	            this.state = 2266;
	            this.identifier();
	            this.state = 2267;
	            this.match(CSharpParser.COLON);

	        }
	        this.state = 2271;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointer_type() {
	    let localctx = new Pointer_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, CSharpParser.RULE_pointer_type);
	    var _la = 0; // Token type
	    try {
	        this.state = 2288;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.STRING:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2275;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case CSharpParser.BOOL:
	            case CSharpParser.BYTE:
	            case CSharpParser.CHAR:
	            case CSharpParser.DECIMAL:
	            case CSharpParser.DOUBLE:
	            case CSharpParser.FLOAT:
	            case CSharpParser.INT:
	            case CSharpParser.LONG:
	            case CSharpParser.SBYTE:
	            case CSharpParser.SHORT:
	            case CSharpParser.UINT:
	            case CSharpParser.ULONG:
	            case CSharpParser.USHORT:
	                this.state = 2273;
	                this.simple_type();
	                break;
	            case CSharpParser.ADD:
	            case CSharpParser.ALIAS:
	            case CSharpParser.ARGLIST:
	            case CSharpParser.ASCENDING:
	            case CSharpParser.ASYNC:
	            case CSharpParser.AWAIT:
	            case CSharpParser.BY:
	            case CSharpParser.DESCENDING:
	            case CSharpParser.DYNAMIC:
	            case CSharpParser.EQUALS:
	            case CSharpParser.FROM:
	            case CSharpParser.GET:
	            case CSharpParser.GROUP:
	            case CSharpParser.INTO:
	            case CSharpParser.JOIN:
	            case CSharpParser.LET:
	            case CSharpParser.NAMEOF:
	            case CSharpParser.OBJECT:
	            case CSharpParser.ON:
	            case CSharpParser.ORDERBY:
	            case CSharpParser.PARTIAL:
	            case CSharpParser.REMOVE:
	            case CSharpParser.SELECT:
	            case CSharpParser.SET:
	            case CSharpParser.STRING:
	            case CSharpParser.UNMANAGED:
	            case CSharpParser.VAR:
	            case CSharpParser.WHEN:
	            case CSharpParser.WHERE:
	            case CSharpParser.YIELD:
	            case CSharpParser.IDENTIFIER:
	                this.state = 2274;
	                this.class_type();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CSharpParser.OPEN_BRACKET || _la===CSharpParser.INTERR) {
	                this.state = 2279;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case CSharpParser.OPEN_BRACKET:
	                    this.state = 2277;
	                    this.rank_specifier();
	                    break;
	                case CSharpParser.INTERR:
	                    this.state = 2278;
	                    this.match(CSharpParser.INTERR);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 2283;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2284;
	            this.match(CSharpParser.STAR);
	            break;
	        case CSharpParser.VOID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2286;
	            this.match(CSharpParser.VOID);
	            this.state = 2287;
	            this.match(CSharpParser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_pointer_declarators() {
	    let localctx = new Fixed_pointer_declaratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, CSharpParser.RULE_fixed_pointer_declarators);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2290;
	        this.fixed_pointer_declarator();
	        this.state = 2295;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 2291;
	            this.match(CSharpParser.COMMA);
	            this.state = 2292;
	            this.fixed_pointer_declarator();
	            this.state = 2297;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_pointer_declarator() {
	    let localctx = new Fixed_pointer_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, CSharpParser.RULE_fixed_pointer_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2298;
	        this.identifier();
	        this.state = 2299;
	        this.match(CSharpParser.ASSIGNMENT);
	        this.state = 2300;
	        this.fixed_pointer_initializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_pointer_initializer() {
	    let localctx = new Fixed_pointer_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, CSharpParser.RULE_fixed_pointer_initializer);
	    try {
	        this.state = 2307;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BASE:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CHECKED:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DEFAULT:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FALSE:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.NEW:
	        case CSharpParser.NULL_:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.SIZEOF:
	        case CSharpParser.STRING:
	        case CSharpParser.THIS:
	        case CSharpParser.TRUE:
	        case CSharpParser.TYPEOF:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNCHECKED:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.LITERAL_ACCESS:
	        case CSharpParser.INTEGER_LITERAL:
	        case CSharpParser.HEX_INTEGER_LITERAL:
	        case CSharpParser.BIN_INTEGER_LITERAL:
	        case CSharpParser.REAL_LITERAL:
	        case CSharpParser.CHARACTER_LITERAL:
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	        case CSharpParser.OPEN_PARENS:
	        case CSharpParser.PLUS:
	        case CSharpParser.MINUS:
	        case CSharpParser.STAR:
	        case CSharpParser.AMP:
	        case CSharpParser.CARET:
	        case CSharpParser.BANG:
	        case CSharpParser.TILDE:
	        case CSharpParser.OP_INC:
	        case CSharpParser.OP_DEC:
	        case CSharpParser.OP_RANGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2303;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	            if(la_===1) {
	                this.state = 2302;
	                this.match(CSharpParser.AMP);

	            }
	            this.state = 2305;
	            this.expression();
	            break;
	        case CSharpParser.STACKALLOC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2306;
	            this.stackalloc_initializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixed_size_buffer_declarator() {
	    let localctx = new Fixed_size_buffer_declaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, CSharpParser.RULE_fixed_size_buffer_declarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2309;
	        this.identifier();
	        this.state = 2310;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 2311;
	        this.expression();
	        this.state = 2312;
	        this.match(CSharpParser.CLOSE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stackalloc_initializer() {
	    let localctx = new Stackalloc_initializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, CSharpParser.RULE_stackalloc_initializer);
	    var _la = 0; // Token type
	    try {
	        this.state = 2343;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2314;
	            this.match(CSharpParser.STACKALLOC);
	            this.state = 2315;
	            this.type_();
	            this.state = 2316;
	            this.match(CSharpParser.OPEN_BRACKET);
	            this.state = 2317;
	            this.expression();
	            this.state = 2318;
	            this.match(CSharpParser.CLOSE_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2320;
	            this.match(CSharpParser.STACKALLOC);
	            this.state = 2322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STRING - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0)) {
	                this.state = 2321;
	                this.type_();
	            }

	            this.state = 2324;
	            this.match(CSharpParser.OPEN_BRACKET);
	            this.state = 2326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (CSharpParser.WHEN - 110)) | (1 << (CSharpParser.WHERE - 110)) | (1 << (CSharpParser.YIELD - 110)) | (1 << (CSharpParser.IDENTIFIER - 110)) | (1 << (CSharpParser.LITERAL_ACCESS - 110)) | (1 << (CSharpParser.INTEGER_LITERAL - 110)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 110)) | (1 << (CSharpParser.REAL_LITERAL - 110)) | (1 << (CSharpParser.CHARACTER_LITERAL - 110)) | (1 << (CSharpParser.REGULAR_STRING - 110)) | (1 << (CSharpParser.VERBATIUM_STRING - 110)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 110)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 110)) | (1 << (CSharpParser.OPEN_PARENS - 110)) | (1 << (CSharpParser.PLUS - 110)) | (1 << (CSharpParser.MINUS - 110)) | (1 << (CSharpParser.STAR - 110)) | (1 << (CSharpParser.AMP - 110)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (CSharpParser.CARET - 142)) | (1 << (CSharpParser.BANG - 142)) | (1 << (CSharpParser.TILDE - 142)) | (1 << (CSharpParser.OP_INC - 142)) | (1 << (CSharpParser.OP_DEC - 142)) | (1 << (CSharpParser.OP_RANGE - 142)))) !== 0)) {
	                this.state = 2325;
	                this.expression();
	            }

	            this.state = 2328;
	            this.match(CSharpParser.CLOSE_BRACKET);
	            this.state = 2329;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 2330;
	            this.expression();
	            this.state = 2335;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,293,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2331;
	                    this.match(CSharpParser.COMMA);
	                    this.state = 2332;
	                    this.expression(); 
	                }
	                this.state = 2337;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,293,this._ctx);
	            }

	            this.state = 2339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.COMMA) {
	                this.state = 2338;
	                this.match(CSharpParser.COMMA);
	            }

	            this.state = 2341;
	            this.match(CSharpParser.CLOSE_BRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	right_arrow() {
	    let localctx = new Right_arrowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, CSharpParser.RULE_right_arrow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2345;
	        localctx.first = this.match(CSharpParser.ASSIGNMENT);
	        this.state = 2346;
	        localctx.second = this.match(CSharpParser.GT);
	        this.state = 2347;
	        if (!( (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex))) {
	            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	right_shift() {
	    let localctx = new Right_shiftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, CSharpParser.RULE_right_shift);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2349;
	        localctx.first = this.match(CSharpParser.GT);
	        this.state = 2350;
	        localctx.second = this.match(CSharpParser.GT);
	        this.state = 2351;
	        if (!( (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex))) {
	            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	right_shift_assignment() {
	    let localctx = new Right_shift_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, CSharpParser.RULE_right_shift_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2353;
	        localctx.first = this.match(CSharpParser.GT);
	        this.state = 2354;
	        localctx.second = this.match(CSharpParser.OP_GE);
	        this.state = 2355;
	        if (!( (localctx.first === null ? 0 : localctx.first.tokenIndex) + 1 == (localctx.second === null ? 0 : localctx.second.tokenIndex))) {
	            throw new antlr4.error.FailedPredicateException(this, "$first.index + 1 == $second.index");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, CSharpParser.RULE_literal);
	    try {
	        this.state = 2365;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.FALSE:
	        case CSharpParser.TRUE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2357;
	            this.boolean_literal();
	            break;
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2358;
	            this.string_literal();
	            break;
	        case CSharpParser.INTEGER_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2359;
	            this.match(CSharpParser.INTEGER_LITERAL);
	            break;
	        case CSharpParser.HEX_INTEGER_LITERAL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2360;
	            this.match(CSharpParser.HEX_INTEGER_LITERAL);
	            break;
	        case CSharpParser.BIN_INTEGER_LITERAL:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2361;
	            this.match(CSharpParser.BIN_INTEGER_LITERAL);
	            break;
	        case CSharpParser.REAL_LITERAL:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2362;
	            this.match(CSharpParser.REAL_LITERAL);
	            break;
	        case CSharpParser.CHARACTER_LITERAL:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2363;
	            this.match(CSharpParser.CHARACTER_LITERAL);
	            break;
	        case CSharpParser.NULL_:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2364;
	            this.match(CSharpParser.NULL_);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolean_literal() {
	    let localctx = new Boolean_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, CSharpParser.RULE_boolean_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2367;
	        _la = this._input.LA(1);
	        if(!(_la===CSharpParser.FALSE || _la===CSharpParser.TRUE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string_literal() {
	    let localctx = new String_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, CSharpParser.RULE_string_literal);
	    try {
	        this.state = 2373;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2369;
	            this.interpolated_regular_string();
	            break;
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2370;
	            this.interpolated_verbatium_string();
	            break;
	        case CSharpParser.REGULAR_STRING:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2371;
	            this.match(CSharpParser.REGULAR_STRING);
	            break;
	        case CSharpParser.VERBATIUM_STRING:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2372;
	            this.match(CSharpParser.VERBATIUM_STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolated_regular_string() {
	    let localctx = new Interpolated_regular_stringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, CSharpParser.RULE_interpolated_regular_string);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2375;
	        this.match(CSharpParser.INTERPOLATED_REGULAR_STRING_START);
	        this.state = 2379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FALSE - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.NEW - 64)) | (1 << (CSharpParser.NULL_ - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.SIZEOF - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.THIS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CSharpParser.TRUE - 96)) | (1 << (CSharpParser.TYPEOF - 96)) | (1 << (CSharpParser.UINT - 96)) | (1 << (CSharpParser.ULONG - 96)) | (1 << (CSharpParser.UNCHECKED - 96)) | (1 << (CSharpParser.UNMANAGED - 96)) | (1 << (CSharpParser.USHORT - 96)) | (1 << (CSharpParser.VAR - 96)) | (1 << (CSharpParser.WHEN - 96)) | (1 << (CSharpParser.WHERE - 96)) | (1 << (CSharpParser.YIELD - 96)) | (1 << (CSharpParser.IDENTIFIER - 96)) | (1 << (CSharpParser.LITERAL_ACCESS - 96)) | (1 << (CSharpParser.INTEGER_LITERAL - 96)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 96)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 96)) | (1 << (CSharpParser.REAL_LITERAL - 96)) | (1 << (CSharpParser.CHARACTER_LITERAL - 96)) | (1 << (CSharpParser.REGULAR_STRING - 96)) | (1 << (CSharpParser.VERBATIUM_STRING - 96)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 96)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 96)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (CSharpParser.OPEN_PARENS - 129)) | (1 << (CSharpParser.PLUS - 129)) | (1 << (CSharpParser.MINUS - 129)) | (1 << (CSharpParser.STAR - 129)) | (1 << (CSharpParser.AMP - 129)) | (1 << (CSharpParser.CARET - 129)) | (1 << (CSharpParser.BANG - 129)) | (1 << (CSharpParser.TILDE - 129)) | (1 << (CSharpParser.OP_INC - 129)) | (1 << (CSharpParser.OP_DEC - 129)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (CSharpParser.OP_RANGE - 171)) | (1 << (CSharpParser.DOUBLE_CURLY_INSIDE - 171)) | (1 << (CSharpParser.REGULAR_CHAR_INSIDE - 171)) | (1 << (CSharpParser.REGULAR_STRING_INSIDE - 171)))) !== 0)) {
	            this.state = 2376;
	            this.interpolated_regular_string_part();
	            this.state = 2381;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2382;
	        this.match(CSharpParser.DOUBLE_QUOTE_INSIDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolated_verbatium_string() {
	    let localctx = new Interpolated_verbatium_stringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, CSharpParser.RULE_interpolated_verbatium_string);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2384;
	        this.match(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START);
	        this.state = 2388;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FALSE - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.NEW - 64)) | (1 << (CSharpParser.NULL_ - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.SIZEOF - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.THIS - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CSharpParser.TRUE - 96)) | (1 << (CSharpParser.TYPEOF - 96)) | (1 << (CSharpParser.UINT - 96)) | (1 << (CSharpParser.ULONG - 96)) | (1 << (CSharpParser.UNCHECKED - 96)) | (1 << (CSharpParser.UNMANAGED - 96)) | (1 << (CSharpParser.USHORT - 96)) | (1 << (CSharpParser.VAR - 96)) | (1 << (CSharpParser.WHEN - 96)) | (1 << (CSharpParser.WHERE - 96)) | (1 << (CSharpParser.YIELD - 96)) | (1 << (CSharpParser.IDENTIFIER - 96)) | (1 << (CSharpParser.LITERAL_ACCESS - 96)) | (1 << (CSharpParser.INTEGER_LITERAL - 96)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 96)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 96)) | (1 << (CSharpParser.REAL_LITERAL - 96)) | (1 << (CSharpParser.CHARACTER_LITERAL - 96)) | (1 << (CSharpParser.REGULAR_STRING - 96)) | (1 << (CSharpParser.VERBATIUM_STRING - 96)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 96)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 96)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (CSharpParser.OPEN_PARENS - 129)) | (1 << (CSharpParser.PLUS - 129)) | (1 << (CSharpParser.MINUS - 129)) | (1 << (CSharpParser.STAR - 129)) | (1 << (CSharpParser.AMP - 129)) | (1 << (CSharpParser.CARET - 129)) | (1 << (CSharpParser.BANG - 129)) | (1 << (CSharpParser.TILDE - 129)) | (1 << (CSharpParser.OP_INC - 129)) | (1 << (CSharpParser.OP_DEC - 129)))) !== 0) || ((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (CSharpParser.OP_RANGE - 171)) | (1 << (CSharpParser.DOUBLE_CURLY_INSIDE - 171)) | (1 << (CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE - 171)) | (1 << (CSharpParser.VERBATIUM_INSIDE_STRING - 171)))) !== 0)) {
	            this.state = 2385;
	            this.interpolated_verbatium_string_part();
	            this.state = 2390;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2391;
	        this.match(CSharpParser.DOUBLE_QUOTE_INSIDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolated_regular_string_part() {
	    let localctx = new Interpolated_regular_string_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, CSharpParser.RULE_interpolated_regular_string_part);
	    try {
	        this.state = 2397;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BASE:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CHECKED:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DEFAULT:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FALSE:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.NEW:
	        case CSharpParser.NULL_:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.SIZEOF:
	        case CSharpParser.STRING:
	        case CSharpParser.THIS:
	        case CSharpParser.TRUE:
	        case CSharpParser.TYPEOF:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNCHECKED:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.LITERAL_ACCESS:
	        case CSharpParser.INTEGER_LITERAL:
	        case CSharpParser.HEX_INTEGER_LITERAL:
	        case CSharpParser.BIN_INTEGER_LITERAL:
	        case CSharpParser.REAL_LITERAL:
	        case CSharpParser.CHARACTER_LITERAL:
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	        case CSharpParser.OPEN_PARENS:
	        case CSharpParser.PLUS:
	        case CSharpParser.MINUS:
	        case CSharpParser.STAR:
	        case CSharpParser.AMP:
	        case CSharpParser.CARET:
	        case CSharpParser.BANG:
	        case CSharpParser.TILDE:
	        case CSharpParser.OP_INC:
	        case CSharpParser.OP_DEC:
	        case CSharpParser.OP_RANGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2393;
	            this.interpolated_string_expression();
	            break;
	        case CSharpParser.DOUBLE_CURLY_INSIDE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2394;
	            this.match(CSharpParser.DOUBLE_CURLY_INSIDE);
	            break;
	        case CSharpParser.REGULAR_CHAR_INSIDE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2395;
	            this.match(CSharpParser.REGULAR_CHAR_INSIDE);
	            break;
	        case CSharpParser.REGULAR_STRING_INSIDE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2396;
	            this.match(CSharpParser.REGULAR_STRING_INSIDE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolated_verbatium_string_part() {
	    let localctx = new Interpolated_verbatium_string_partContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, CSharpParser.RULE_interpolated_verbatium_string_part);
	    try {
	        this.state = 2403;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.ADD:
	        case CSharpParser.ALIAS:
	        case CSharpParser.ARGLIST:
	        case CSharpParser.ASCENDING:
	        case CSharpParser.ASYNC:
	        case CSharpParser.AWAIT:
	        case CSharpParser.BASE:
	        case CSharpParser.BOOL:
	        case CSharpParser.BY:
	        case CSharpParser.BYTE:
	        case CSharpParser.CHAR:
	        case CSharpParser.CHECKED:
	        case CSharpParser.DECIMAL:
	        case CSharpParser.DEFAULT:
	        case CSharpParser.DELEGATE:
	        case CSharpParser.DESCENDING:
	        case CSharpParser.DOUBLE:
	        case CSharpParser.DYNAMIC:
	        case CSharpParser.EQUALS:
	        case CSharpParser.FALSE:
	        case CSharpParser.FLOAT:
	        case CSharpParser.FROM:
	        case CSharpParser.GET:
	        case CSharpParser.GROUP:
	        case CSharpParser.INT:
	        case CSharpParser.INTO:
	        case CSharpParser.JOIN:
	        case CSharpParser.LET:
	        case CSharpParser.LONG:
	        case CSharpParser.NAMEOF:
	        case CSharpParser.NEW:
	        case CSharpParser.NULL_:
	        case CSharpParser.OBJECT:
	        case CSharpParser.ON:
	        case CSharpParser.ORDERBY:
	        case CSharpParser.PARTIAL:
	        case CSharpParser.REF:
	        case CSharpParser.REMOVE:
	        case CSharpParser.SBYTE:
	        case CSharpParser.SELECT:
	        case CSharpParser.SET:
	        case CSharpParser.SHORT:
	        case CSharpParser.SIZEOF:
	        case CSharpParser.STRING:
	        case CSharpParser.THIS:
	        case CSharpParser.TRUE:
	        case CSharpParser.TYPEOF:
	        case CSharpParser.UINT:
	        case CSharpParser.ULONG:
	        case CSharpParser.UNCHECKED:
	        case CSharpParser.UNMANAGED:
	        case CSharpParser.USHORT:
	        case CSharpParser.VAR:
	        case CSharpParser.WHEN:
	        case CSharpParser.WHERE:
	        case CSharpParser.YIELD:
	        case CSharpParser.IDENTIFIER:
	        case CSharpParser.LITERAL_ACCESS:
	        case CSharpParser.INTEGER_LITERAL:
	        case CSharpParser.HEX_INTEGER_LITERAL:
	        case CSharpParser.BIN_INTEGER_LITERAL:
	        case CSharpParser.REAL_LITERAL:
	        case CSharpParser.CHARACTER_LITERAL:
	        case CSharpParser.REGULAR_STRING:
	        case CSharpParser.VERBATIUM_STRING:
	        case CSharpParser.INTERPOLATED_REGULAR_STRING_START:
	        case CSharpParser.INTERPOLATED_VERBATIUM_STRING_START:
	        case CSharpParser.OPEN_PARENS:
	        case CSharpParser.PLUS:
	        case CSharpParser.MINUS:
	        case CSharpParser.STAR:
	        case CSharpParser.AMP:
	        case CSharpParser.CARET:
	        case CSharpParser.BANG:
	        case CSharpParser.TILDE:
	        case CSharpParser.OP_INC:
	        case CSharpParser.OP_DEC:
	        case CSharpParser.OP_RANGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2399;
	            this.interpolated_string_expression();
	            break;
	        case CSharpParser.DOUBLE_CURLY_INSIDE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2400;
	            this.match(CSharpParser.DOUBLE_CURLY_INSIDE);
	            break;
	        case CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2401;
	            this.match(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE);
	            break;
	        case CSharpParser.VERBATIUM_INSIDE_STRING:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2402;
	            this.match(CSharpParser.VERBATIUM_INSIDE_STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolated_string_expression() {
	    let localctx = new Interpolated_string_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, CSharpParser.RULE_interpolated_string_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2405;
	        this.expression();
	        this.state = 2410;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CSharpParser.COMMA) {
	            this.state = 2406;
	            this.match(CSharpParser.COMMA);
	            this.state = 2407;
	            this.expression();
	            this.state = 2412;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.COLON) {
	            this.state = 2413;
	            this.match(CSharpParser.COLON);
	            this.state = 2415; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2414;
	                this.match(CSharpParser.FORMAT_STRING);
	                this.state = 2417; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===CSharpParser.FORMAT_STRING);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, CSharpParser.RULE_keyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2421;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ABSTRACT) | (1 << CSharpParser.AS) | (1 << CSharpParser.BASE) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BREAK) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CASE) | (1 << CSharpParser.CATCH) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.CHECKED) | (1 << CSharpParser.CLASS) | (1 << CSharpParser.CONST) | (1 << CSharpParser.CONTINUE) | (1 << CSharpParser.DECIMAL) | (1 << CSharpParser.DEFAULT) | (1 << CSharpParser.DELEGATE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CSharpParser.DO - 33)) | (1 << (CSharpParser.DOUBLE - 33)) | (1 << (CSharpParser.ELSE - 33)) | (1 << (CSharpParser.ENUM - 33)) | (1 << (CSharpParser.EVENT - 33)) | (1 << (CSharpParser.EXPLICIT - 33)) | (1 << (CSharpParser.EXTERN - 33)) | (1 << (CSharpParser.FALSE - 33)) | (1 << (CSharpParser.FINALLY - 33)) | (1 << (CSharpParser.FIXED - 33)) | (1 << (CSharpParser.FLOAT - 33)) | (1 << (CSharpParser.FOR - 33)) | (1 << (CSharpParser.FOREACH - 33)) | (1 << (CSharpParser.GOTO - 33)) | (1 << (CSharpParser.IF - 33)) | (1 << (CSharpParser.IMPLICIT - 33)) | (1 << (CSharpParser.IN - 33)) | (1 << (CSharpParser.INT - 33)) | (1 << (CSharpParser.INTERFACE - 33)) | (1 << (CSharpParser.INTERNAL - 33)) | (1 << (CSharpParser.IS - 33)) | (1 << (CSharpParser.LOCK - 33)) | (1 << (CSharpParser.LONG - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CSharpParser.NAMESPACE - 65)) | (1 << (CSharpParser.NEW - 65)) | (1 << (CSharpParser.NULL_ - 65)) | (1 << (CSharpParser.OBJECT - 65)) | (1 << (CSharpParser.OPERATOR - 65)) | (1 << (CSharpParser.OUT - 65)) | (1 << (CSharpParser.OVERRIDE - 65)) | (1 << (CSharpParser.PARAMS - 65)) | (1 << (CSharpParser.PRIVATE - 65)) | (1 << (CSharpParser.PROTECTED - 65)) | (1 << (CSharpParser.PUBLIC - 65)) | (1 << (CSharpParser.READONLY - 65)) | (1 << (CSharpParser.REF - 65)) | (1 << (CSharpParser.RETURN - 65)) | (1 << (CSharpParser.SBYTE - 65)) | (1 << (CSharpParser.SEALED - 65)) | (1 << (CSharpParser.SHORT - 65)) | (1 << (CSharpParser.SIZEOF - 65)) | (1 << (CSharpParser.STACKALLOC - 65)) | (1 << (CSharpParser.STATIC - 65)) | (1 << (CSharpParser.STRING - 65)) | (1 << (CSharpParser.STRUCT - 65)) | (1 << (CSharpParser.SWITCH - 65)) | (1 << (CSharpParser.THIS - 65)) | (1 << (CSharpParser.THROW - 65)) | (1 << (CSharpParser.TRUE - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CSharpParser.TRY - 97)) | (1 << (CSharpParser.TYPEOF - 97)) | (1 << (CSharpParser.UINT - 97)) | (1 << (CSharpParser.ULONG - 97)) | (1 << (CSharpParser.UNCHECKED - 97)) | (1 << (CSharpParser.UNMANAGED - 97)) | (1 << (CSharpParser.UNSAFE - 97)) | (1 << (CSharpParser.USHORT - 97)) | (1 << (CSharpParser.USING - 97)) | (1 << (CSharpParser.VIRTUAL - 97)) | (1 << (CSharpParser.VOID - 97)) | (1 << (CSharpParser.VOLATILE - 97)) | (1 << (CSharpParser.WHILE - 97)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_definition() {
	    let localctx = new Class_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, CSharpParser.RULE_class_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2423;
	        this.match(CSharpParser.CLASS);
	        this.state = 2424;
	        this.identifier();
	        this.state = 2426;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.LT) {
	            this.state = 2425;
	            this.type_parameter_list();
	        }

	        this.state = 2429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.COLON) {
	            this.state = 2428;
	            this.class_base();
	        }

	        this.state = 2432;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.WHERE) {
	            this.state = 2431;
	            this.type_parameter_constraints_clauses();
	        }

	        this.state = 2434;
	        this.class_body();
	        this.state = 2436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.SEMICOLON) {
	            this.state = 2435;
	            this.match(CSharpParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct_definition() {
	    let localctx = new Struct_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, CSharpParser.RULE_struct_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.READONLY || _la===CSharpParser.REF) {
	            this.state = 2438;
	            _la = this._input.LA(1);
	            if(!(_la===CSharpParser.READONLY || _la===CSharpParser.REF)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2441;
	        this.match(CSharpParser.STRUCT);
	        this.state = 2442;
	        this.identifier();
	        this.state = 2444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.LT) {
	            this.state = 2443;
	            this.type_parameter_list();
	        }

	        this.state = 2447;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.COLON) {
	            this.state = 2446;
	            this.struct_interfaces();
	        }

	        this.state = 2450;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.WHERE) {
	            this.state = 2449;
	            this.type_parameter_constraints_clauses();
	        }

	        this.state = 2452;
	        this.struct_body();
	        this.state = 2454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.SEMICOLON) {
	            this.state = 2453;
	            this.match(CSharpParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interface_definition() {
	    let localctx = new Interface_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, CSharpParser.RULE_interface_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2456;
	        this.match(CSharpParser.INTERFACE);
	        this.state = 2457;
	        this.identifier();
	        this.state = 2459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.LT) {
	            this.state = 2458;
	            this.variant_type_parameter_list();
	        }

	        this.state = 2462;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.COLON) {
	            this.state = 2461;
	            this.interface_base();
	        }

	        this.state = 2465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.WHERE) {
	            this.state = 2464;
	            this.type_parameter_constraints_clauses();
	        }

	        this.state = 2467;
	        this.class_body();
	        this.state = 2469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.SEMICOLON) {
	            this.state = 2468;
	            this.match(CSharpParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enum_definition() {
	    let localctx = new Enum_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, CSharpParser.RULE_enum_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2471;
	        this.match(CSharpParser.ENUM);
	        this.state = 2472;
	        this.identifier();
	        this.state = 2474;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.COLON) {
	            this.state = 2473;
	            this.enum_base();
	        }

	        this.state = 2476;
	        this.enum_body();
	        this.state = 2478;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.SEMICOLON) {
	            this.state = 2477;
	            this.match(CSharpParser.SEMICOLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delegate_definition() {
	    let localctx = new Delegate_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, CSharpParser.RULE_delegate_definition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2480;
	        this.match(CSharpParser.DELEGATE);
	        this.state = 2481;
	        this.return_type();
	        this.state = 2482;
	        this.identifier();
	        this.state = 2484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.LT) {
	            this.state = 2483;
	            this.variant_type_parameter_list();
	        }

	        this.state = 2486;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IN - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.OUT - 64)) | (1 << (CSharpParser.PARAMS - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.THIS - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0)) {
	            this.state = 2487;
	            this.formal_parameter_list();
	        }

	        this.state = 2490;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2492;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.WHERE) {
	            this.state = 2491;
	            this.type_parameter_constraints_clauses();
	        }

	        this.state = 2494;
	        this.match(CSharpParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	event_declaration() {
	    let localctx = new Event_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, CSharpParser.RULE_event_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2496;
	        this.match(CSharpParser.EVENT);
	        this.state = 2497;
	        this.type_();
	        this.state = 2506;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,323,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2498;
	            this.variable_declarators();
	            this.state = 2499;
	            this.match(CSharpParser.SEMICOLON);
	            break;

	        case 2:
	            this.state = 2501;
	            this.member_name();
	            this.state = 2502;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 2503;
	            this.event_accessor_declarations();
	            this.state = 2504;
	            this.match(CSharpParser.CLOSE_BRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field_declaration() {
	    let localctx = new Field_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, CSharpParser.RULE_field_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2508;
	        this.variable_declarators();
	        this.state = 2509;
	        this.match(CSharpParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	property_declaration() {
	    let localctx = new Property_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, CSharpParser.RULE_property_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2511;
	        this.member_name();
	        this.state = 2525;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.OPEN_BRACE:
	            this.state = 2512;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 2513;
	            this.accessor_declarations();
	            this.state = 2514;
	            this.match(CSharpParser.CLOSE_BRACE);
	            this.state = 2519;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.ASSIGNMENT) {
	                this.state = 2515;
	                this.match(CSharpParser.ASSIGNMENT);
	                this.state = 2516;
	                this.variable_initializer();
	                this.state = 2517;
	                this.match(CSharpParser.SEMICOLON);
	            }

	            break;
	        case CSharpParser.ASSIGNMENT:
	            this.state = 2521;
	            this.right_arrow();
	            this.state = 2522;
	            this.throwable_expression();
	            this.state = 2523;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant_declaration() {
	    let localctx = new Constant_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, CSharpParser.RULE_constant_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2527;
	        this.match(CSharpParser.CONST);
	        this.state = 2528;
	        this.type_();
	        this.state = 2529;
	        this.constant_declarators();
	        this.state = 2530;
	        this.match(CSharpParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexer_declaration() {
	    let localctx = new Indexer_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, CSharpParser.RULE_indexer_declaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2532;
	        this.match(CSharpParser.THIS);
	        this.state = 2533;
	        this.match(CSharpParser.OPEN_BRACKET);
	        this.state = 2534;
	        this.formal_parameter_list();
	        this.state = 2535;
	        this.match(CSharpParser.CLOSE_BRACKET);
	        this.state = 2544;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.OPEN_BRACE:
	            this.state = 2536;
	            this.match(CSharpParser.OPEN_BRACE);
	            this.state = 2537;
	            this.accessor_declarations();
	            this.state = 2538;
	            this.match(CSharpParser.CLOSE_BRACE);
	            break;
	        case CSharpParser.ASSIGNMENT:
	            this.state = 2540;
	            this.right_arrow();
	            this.state = 2541;
	            this.throwable_expression();
	            this.state = 2542;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destructor_definition() {
	    let localctx = new Destructor_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, CSharpParser.RULE_destructor_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2546;
	        this.match(CSharpParser.TILDE);
	        this.state = 2547;
	        this.identifier();
	        this.state = 2548;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2549;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2550;
	        this.body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructor_declaration() {
	    let localctx = new Constructor_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, CSharpParser.RULE_constructor_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2552;
	        this.identifier();
	        this.state = 2553;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2555;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IN - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.OUT - 64)) | (1 << (CSharpParser.PARAMS - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.THIS - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0)) {
	            this.state = 2554;
	            this.formal_parameter_list();
	        }

	        this.state = 2557;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2559;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.COLON) {
	            this.state = 2558;
	            this.constructor_initializer();
	        }

	        this.state = 2561;
	        this.body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_declaration() {
	    let localctx = new Method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, CSharpParser.RULE_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2563;
	        this.method_member_name();
	        this.state = 2565;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.LT) {
	            this.state = 2564;
	            this.type_parameter_list();
	        }

	        this.state = 2567;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BOOL) | (1 << CSharpParser.BY) | (1 << CSharpParser.BYTE) | (1 << CSharpParser.CHAR) | (1 << CSharpParser.DECIMAL))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DOUBLE - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FLOAT - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.IN - 32)) | (1 << (CSharpParser.INT - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)) | (1 << (CSharpParser.LONG - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.OBJECT - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.OUT - 64)) | (1 << (CSharpParser.PARAMS - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REF - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SBYTE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)) | (1 << (CSharpParser.SHORT - 64)) | (1 << (CSharpParser.STRING - 64)) | (1 << (CSharpParser.THIS - 64)))) !== 0) || ((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (CSharpParser.UINT - 99)) | (1 << (CSharpParser.ULONG - 99)) | (1 << (CSharpParser.UNMANAGED - 99)) | (1 << (CSharpParser.USHORT - 99)) | (1 << (CSharpParser.VAR - 99)) | (1 << (CSharpParser.VOID - 99)) | (1 << (CSharpParser.WHEN - 99)) | (1 << (CSharpParser.WHERE - 99)) | (1 << (CSharpParser.YIELD - 99)) | (1 << (CSharpParser.IDENTIFIER - 99)) | (1 << (CSharpParser.OPEN_BRACKET - 99)) | (1 << (CSharpParser.OPEN_PARENS - 99)))) !== 0)) {
	            this.state = 2568;
	            this.formal_parameter_list();
	        }

	        this.state = 2571;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2573;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.WHERE) {
	            this.state = 2572;
	            this.type_parameter_constraints_clauses();
	        }

	        this.state = 2580;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.OPEN_BRACE:
	        case CSharpParser.SEMICOLON:
	            this.state = 2575;
	            this.method_body();
	            break;
	        case CSharpParser.ASSIGNMENT:
	            this.state = 2576;
	            this.right_arrow();
	            this.state = 2577;
	            this.throwable_expression();
	            this.state = 2578;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_member_name() {
	    let localctx = new Method_member_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, CSharpParser.RULE_method_member_name);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2582;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 2583;
	            this.identifier();
	            this.state = 2584;
	            this.match(CSharpParser.DOUBLE_COLON);
	            this.state = 2585;
	            this.identifier();
	            break;

	        }
	        this.state = 2596;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,335,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2590;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CSharpParser.LT) {
	                    this.state = 2589;
	                    this.type_argument_list();
	                }

	                this.state = 2592;
	                this.match(CSharpParser.DOT);
	                this.state = 2593;
	                this.identifier(); 
	            }
	            this.state = 2598;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,335,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator_declaration() {
	    let localctx = new Operator_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, CSharpParser.RULE_operator_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2599;
	        this.match(CSharpParser.OPERATOR);
	        this.state = 2600;
	        this.overloadable_operator();
	        this.state = 2601;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2603;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.IN) {
	            this.state = 2602;
	            this.match(CSharpParser.IN);
	        }

	        this.state = 2605;
	        this.arg_declaration();
	        this.state = 2611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.COMMA) {
	            this.state = 2606;
	            this.match(CSharpParser.COMMA);
	            this.state = 2608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CSharpParser.IN) {
	                this.state = 2607;
	                this.match(CSharpParser.IN);
	            }

	            this.state = 2610;
	            this.arg_declaration();
	        }

	        this.state = 2613;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2619;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CSharpParser.OPEN_BRACE:
	        case CSharpParser.SEMICOLON:
	            this.state = 2614;
	            this.body();
	            break;
	        case CSharpParser.ASSIGNMENT:
	            this.state = 2615;
	            this.right_arrow();
	            this.state = 2616;
	            this.throwable_expression();
	            this.state = 2617;
	            this.match(CSharpParser.SEMICOLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg_declaration() {
	    let localctx = new Arg_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, CSharpParser.RULE_arg_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2621;
	        this.type_();
	        this.state = 2622;
	        this.identifier();
	        this.state = 2625;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CSharpParser.ASSIGNMENT) {
	            this.state = 2623;
	            this.match(CSharpParser.ASSIGNMENT);
	            this.state = 2624;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_invocation() {
	    let localctx = new Method_invocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, CSharpParser.RULE_method_invocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2627;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2629;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.IN - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)) | (1 << (CSharpParser.OUT - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (CSharpParser.VOID - 108)) | (1 << (CSharpParser.WHEN - 108)) | (1 << (CSharpParser.WHERE - 108)) | (1 << (CSharpParser.YIELD - 108)) | (1 << (CSharpParser.IDENTIFIER - 108)) | (1 << (CSharpParser.LITERAL_ACCESS - 108)) | (1 << (CSharpParser.INTEGER_LITERAL - 108)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 108)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 108)) | (1 << (CSharpParser.REAL_LITERAL - 108)) | (1 << (CSharpParser.CHARACTER_LITERAL - 108)) | (1 << (CSharpParser.REGULAR_STRING - 108)) | (1 << (CSharpParser.VERBATIUM_STRING - 108)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 108)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 108)) | (1 << (CSharpParser.OPEN_PARENS - 108)) | (1 << (CSharpParser.PLUS - 108)) | (1 << (CSharpParser.MINUS - 108)) | (1 << (CSharpParser.STAR - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CSharpParser.AMP - 140)) | (1 << (CSharpParser.CARET - 140)) | (1 << (CSharpParser.BANG - 140)) | (1 << (CSharpParser.TILDE - 140)) | (1 << (CSharpParser.OP_INC - 140)) | (1 << (CSharpParser.OP_DEC - 140)) | (1 << (CSharpParser.OP_RANGE - 140)))) !== 0)) {
	            this.state = 2628;
	            this.argument_list();
	        }

	        this.state = 2631;
	        this.match(CSharpParser.CLOSE_PARENS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_creation_expression() {
	    let localctx = new Object_creation_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, CSharpParser.RULE_object_creation_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2633;
	        this.match(CSharpParser.OPEN_PARENS);
	        this.state = 2635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CSharpParser.ADD - 10)) | (1 << (CSharpParser.ALIAS - 10)) | (1 << (CSharpParser.ARGLIST - 10)) | (1 << (CSharpParser.ASCENDING - 10)) | (1 << (CSharpParser.ASYNC - 10)) | (1 << (CSharpParser.AWAIT - 10)) | (1 << (CSharpParser.BASE - 10)) | (1 << (CSharpParser.BOOL - 10)) | (1 << (CSharpParser.BY - 10)) | (1 << (CSharpParser.BYTE - 10)) | (1 << (CSharpParser.CHAR - 10)) | (1 << (CSharpParser.CHECKED - 10)) | (1 << (CSharpParser.DECIMAL - 10)) | (1 << (CSharpParser.DEFAULT - 10)) | (1 << (CSharpParser.DELEGATE - 10)) | (1 << (CSharpParser.DESCENDING - 10)) | (1 << (CSharpParser.DOUBLE - 10)) | (1 << (CSharpParser.DYNAMIC - 10)) | (1 << (CSharpParser.EQUALS - 10)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (CSharpParser.FALSE - 42)) | (1 << (CSharpParser.FLOAT - 42)) | (1 << (CSharpParser.FROM - 42)) | (1 << (CSharpParser.GET - 42)) | (1 << (CSharpParser.GROUP - 42)) | (1 << (CSharpParser.IN - 42)) | (1 << (CSharpParser.INT - 42)) | (1 << (CSharpParser.INTO - 42)) | (1 << (CSharpParser.JOIN - 42)) | (1 << (CSharpParser.LET - 42)) | (1 << (CSharpParser.LONG - 42)) | (1 << (CSharpParser.NAMEOF - 42)) | (1 << (CSharpParser.NEW - 42)) | (1 << (CSharpParser.NULL_ - 42)) | (1 << (CSharpParser.OBJECT - 42)) | (1 << (CSharpParser.ON - 42)) | (1 << (CSharpParser.ORDERBY - 42)) | (1 << (CSharpParser.OUT - 42)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CSharpParser.PARTIAL - 75)) | (1 << (CSharpParser.REF - 75)) | (1 << (CSharpParser.REMOVE - 75)) | (1 << (CSharpParser.SBYTE - 75)) | (1 << (CSharpParser.SELECT - 75)) | (1 << (CSharpParser.SET - 75)) | (1 << (CSharpParser.SHORT - 75)) | (1 << (CSharpParser.SIZEOF - 75)) | (1 << (CSharpParser.STRING - 75)) | (1 << (CSharpParser.THIS - 75)) | (1 << (CSharpParser.TRUE - 75)) | (1 << (CSharpParser.TYPEOF - 75)) | (1 << (CSharpParser.UINT - 75)) | (1 << (CSharpParser.ULONG - 75)) | (1 << (CSharpParser.UNCHECKED - 75)) | (1 << (CSharpParser.UNMANAGED - 75)) | (1 << (CSharpParser.USHORT - 75)) | (1 << (CSharpParser.VAR - 75)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (CSharpParser.VOID - 108)) | (1 << (CSharpParser.WHEN - 108)) | (1 << (CSharpParser.WHERE - 108)) | (1 << (CSharpParser.YIELD - 108)) | (1 << (CSharpParser.IDENTIFIER - 108)) | (1 << (CSharpParser.LITERAL_ACCESS - 108)) | (1 << (CSharpParser.INTEGER_LITERAL - 108)) | (1 << (CSharpParser.HEX_INTEGER_LITERAL - 108)) | (1 << (CSharpParser.BIN_INTEGER_LITERAL - 108)) | (1 << (CSharpParser.REAL_LITERAL - 108)) | (1 << (CSharpParser.CHARACTER_LITERAL - 108)) | (1 << (CSharpParser.REGULAR_STRING - 108)) | (1 << (CSharpParser.VERBATIUM_STRING - 108)) | (1 << (CSharpParser.INTERPOLATED_REGULAR_STRING_START - 108)) | (1 << (CSharpParser.INTERPOLATED_VERBATIUM_STRING_START - 108)) | (1 << (CSharpParser.OPEN_PARENS - 108)) | (1 << (CSharpParser.PLUS - 108)) | (1 << (CSharpParser.MINUS - 108)) | (1 << (CSharpParser.STAR - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CSharpParser.AMP - 140)) | (1 << (CSharpParser.CARET - 140)) | (1 << (CSharpParser.BANG - 140)) | (1 << (CSharpParser.TILDE - 140)) | (1 << (CSharpParser.OP_INC - 140)) | (1 << (CSharpParser.OP_DEC - 140)) | (1 << (CSharpParser.OP_RANGE - 140)))) !== 0)) {
	            this.state = 2634;
	            this.argument_list();
	        }

	        this.state = 2637;
	        this.match(CSharpParser.CLOSE_PARENS);
	        this.state = 2639;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
	        if(la_===1) {
	            this.state = 2638;
	            this.object_or_collection_initializer();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, CSharpParser.RULE_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2641;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CSharpParser.ADD) | (1 << CSharpParser.ALIAS) | (1 << CSharpParser.ARGLIST) | (1 << CSharpParser.ASCENDING) | (1 << CSharpParser.ASYNC) | (1 << CSharpParser.AWAIT) | (1 << CSharpParser.BY))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CSharpParser.DESCENDING - 32)) | (1 << (CSharpParser.DYNAMIC - 32)) | (1 << (CSharpParser.EQUALS - 32)) | (1 << (CSharpParser.FROM - 32)) | (1 << (CSharpParser.GET - 32)) | (1 << (CSharpParser.GROUP - 32)) | (1 << (CSharpParser.INTO - 32)) | (1 << (CSharpParser.JOIN - 32)) | (1 << (CSharpParser.LET - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CSharpParser.NAMEOF - 64)) | (1 << (CSharpParser.ON - 64)) | (1 << (CSharpParser.ORDERBY - 64)) | (1 << (CSharpParser.PARTIAL - 64)) | (1 << (CSharpParser.REMOVE - 64)) | (1 << (CSharpParser.SELECT - 64)) | (1 << (CSharpParser.SET - 64)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (CSharpParser.UNMANAGED - 102)) | (1 << (CSharpParser.VAR - 102)) | (1 << (CSharpParser.WHEN - 102)) | (1 << (CSharpParser.WHERE - 102)) | (1 << (CSharpParser.YIELD - 102)) | (1 << (CSharpParser.IDENTIFIER - 102)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CSharpParser.EOF = antlr4.Token.EOF;
CSharpParser.BYTE_ORDER_MARK = 1;
CSharpParser.SINGLE_LINE_DOC_COMMENT = 2;
CSharpParser.EMPTY_DELIMITED_DOC_COMMENT = 3;
CSharpParser.DELIMITED_DOC_COMMENT = 4;
CSharpParser.SINGLE_LINE_COMMENT = 5;
CSharpParser.DELIMITED_COMMENT = 6;
CSharpParser.WHITESPACES = 7;
CSharpParser.SHARP = 8;
CSharpParser.ABSTRACT = 9;
CSharpParser.ADD = 10;
CSharpParser.ALIAS = 11;
CSharpParser.ARGLIST = 12;
CSharpParser.AS = 13;
CSharpParser.ASCENDING = 14;
CSharpParser.ASYNC = 15;
CSharpParser.AWAIT = 16;
CSharpParser.BASE = 17;
CSharpParser.BOOL = 18;
CSharpParser.BREAK = 19;
CSharpParser.BY = 20;
CSharpParser.BYTE = 21;
CSharpParser.CASE = 22;
CSharpParser.CATCH = 23;
CSharpParser.CHAR = 24;
CSharpParser.CHECKED = 25;
CSharpParser.CLASS = 26;
CSharpParser.CONST = 27;
CSharpParser.CONTINUE = 28;
CSharpParser.DECIMAL = 29;
CSharpParser.DEFAULT = 30;
CSharpParser.DELEGATE = 31;
CSharpParser.DESCENDING = 32;
CSharpParser.DO = 33;
CSharpParser.DOUBLE = 34;
CSharpParser.DYNAMIC = 35;
CSharpParser.ELSE = 36;
CSharpParser.ENUM = 37;
CSharpParser.EQUALS = 38;
CSharpParser.EVENT = 39;
CSharpParser.EXPLICIT = 40;
CSharpParser.EXTERN = 41;
CSharpParser.FALSE = 42;
CSharpParser.FINALLY = 43;
CSharpParser.FIXED = 44;
CSharpParser.FLOAT = 45;
CSharpParser.FOR = 46;
CSharpParser.FOREACH = 47;
CSharpParser.FROM = 48;
CSharpParser.GET = 49;
CSharpParser.GOTO = 50;
CSharpParser.GROUP = 51;
CSharpParser.IF = 52;
CSharpParser.IMPLICIT = 53;
CSharpParser.IN = 54;
CSharpParser.INT = 55;
CSharpParser.INTERFACE = 56;
CSharpParser.INTERNAL = 57;
CSharpParser.INTO = 58;
CSharpParser.IS = 59;
CSharpParser.JOIN = 60;
CSharpParser.LET = 61;
CSharpParser.LOCK = 62;
CSharpParser.LONG = 63;
CSharpParser.NAMEOF = 64;
CSharpParser.NAMESPACE = 65;
CSharpParser.NEW = 66;
CSharpParser.NULL_ = 67;
CSharpParser.OBJECT = 68;
CSharpParser.ON = 69;
CSharpParser.OPERATOR = 70;
CSharpParser.ORDERBY = 71;
CSharpParser.OUT = 72;
CSharpParser.OVERRIDE = 73;
CSharpParser.PARAMS = 74;
CSharpParser.PARTIAL = 75;
CSharpParser.PRIVATE = 76;
CSharpParser.PROTECTED = 77;
CSharpParser.PUBLIC = 78;
CSharpParser.READONLY = 79;
CSharpParser.REF = 80;
CSharpParser.REMOVE = 81;
CSharpParser.RETURN = 82;
CSharpParser.SBYTE = 83;
CSharpParser.SEALED = 84;
CSharpParser.SELECT = 85;
CSharpParser.SET = 86;
CSharpParser.SHORT = 87;
CSharpParser.SIZEOF = 88;
CSharpParser.STACKALLOC = 89;
CSharpParser.STATIC = 90;
CSharpParser.STRING = 91;
CSharpParser.STRUCT = 92;
CSharpParser.SWITCH = 93;
CSharpParser.THIS = 94;
CSharpParser.THROW = 95;
CSharpParser.TRUE = 96;
CSharpParser.TRY = 97;
CSharpParser.TYPEOF = 98;
CSharpParser.UINT = 99;
CSharpParser.ULONG = 100;
CSharpParser.UNCHECKED = 101;
CSharpParser.UNMANAGED = 102;
CSharpParser.UNSAFE = 103;
CSharpParser.USHORT = 104;
CSharpParser.USING = 105;
CSharpParser.VAR = 106;
CSharpParser.VIRTUAL = 107;
CSharpParser.VOID = 108;
CSharpParser.VOLATILE = 109;
CSharpParser.WHEN = 110;
CSharpParser.WHERE = 111;
CSharpParser.WHILE = 112;
CSharpParser.YIELD = 113;
CSharpParser.IDENTIFIER = 114;
CSharpParser.LITERAL_ACCESS = 115;
CSharpParser.INTEGER_LITERAL = 116;
CSharpParser.HEX_INTEGER_LITERAL = 117;
CSharpParser.BIN_INTEGER_LITERAL = 118;
CSharpParser.REAL_LITERAL = 119;
CSharpParser.CHARACTER_LITERAL = 120;
CSharpParser.REGULAR_STRING = 121;
CSharpParser.VERBATIUM_STRING = 122;
CSharpParser.INTERPOLATED_REGULAR_STRING_START = 123;
CSharpParser.INTERPOLATED_VERBATIUM_STRING_START = 124;
CSharpParser.OPEN_BRACE = 125;
CSharpParser.CLOSE_BRACE = 126;
CSharpParser.OPEN_BRACKET = 127;
CSharpParser.CLOSE_BRACKET = 128;
CSharpParser.OPEN_PARENS = 129;
CSharpParser.CLOSE_PARENS = 130;
CSharpParser.DOT = 131;
CSharpParser.COMMA = 132;
CSharpParser.COLON = 133;
CSharpParser.SEMICOLON = 134;
CSharpParser.PLUS = 135;
CSharpParser.MINUS = 136;
CSharpParser.STAR = 137;
CSharpParser.DIV = 138;
CSharpParser.PERCENT = 139;
CSharpParser.AMP = 140;
CSharpParser.BITWISE_OR = 141;
CSharpParser.CARET = 142;
CSharpParser.BANG = 143;
CSharpParser.TILDE = 144;
CSharpParser.ASSIGNMENT = 145;
CSharpParser.LT = 146;
CSharpParser.GT = 147;
CSharpParser.INTERR = 148;
CSharpParser.DOUBLE_COLON = 149;
CSharpParser.OP_COALESCING = 150;
CSharpParser.OP_INC = 151;
CSharpParser.OP_DEC = 152;
CSharpParser.OP_AND = 153;
CSharpParser.OP_OR = 154;
CSharpParser.OP_PTR = 155;
CSharpParser.OP_EQ = 156;
CSharpParser.OP_NE = 157;
CSharpParser.OP_LE = 158;
CSharpParser.OP_GE = 159;
CSharpParser.OP_ADD_ASSIGNMENT = 160;
CSharpParser.OP_SUB_ASSIGNMENT = 161;
CSharpParser.OP_MULT_ASSIGNMENT = 162;
CSharpParser.OP_DIV_ASSIGNMENT = 163;
CSharpParser.OP_MOD_ASSIGNMENT = 164;
CSharpParser.OP_AND_ASSIGNMENT = 165;
CSharpParser.OP_OR_ASSIGNMENT = 166;
CSharpParser.OP_XOR_ASSIGNMENT = 167;
CSharpParser.OP_LEFT_SHIFT = 168;
CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT = 169;
CSharpParser.OP_COALESCING_ASSIGNMENT = 170;
CSharpParser.OP_RANGE = 171;
CSharpParser.DOUBLE_CURLY_INSIDE = 172;
CSharpParser.OPEN_BRACE_INSIDE = 173;
CSharpParser.REGULAR_CHAR_INSIDE = 174;
CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE = 175;
CSharpParser.DOUBLE_QUOTE_INSIDE = 176;
CSharpParser.REGULAR_STRING_INSIDE = 177;
CSharpParser.VERBATIUM_INSIDE_STRING = 178;
CSharpParser.CLOSE_BRACE_INSIDE = 179;
CSharpParser.FORMAT_STRING = 180;
CSharpParser.DIRECTIVE_WHITESPACES = 181;
CSharpParser.DIGITS = 182;
CSharpParser.DEFINE = 183;
CSharpParser.UNDEF = 184;
CSharpParser.ELIF = 185;
CSharpParser.ENDIF = 186;
CSharpParser.LINE = 187;
CSharpParser.ERROR = 188;
CSharpParser.WARNING = 189;
CSharpParser.REGION = 190;
CSharpParser.ENDREGION = 191;
CSharpParser.PRAGMA = 192;
CSharpParser.NULLABLE = 193;
CSharpParser.DIRECTIVE_HIDDEN = 194;
CSharpParser.CONDITIONAL_SYMBOL = 195;
CSharpParser.DIRECTIVE_NEW_LINE = 196;
CSharpParser.TEXT = 197;
CSharpParser.DOUBLE_CURLY_CLOSE_INSIDE = 198;

CSharpParser.RULE_compilation_unit = 0;
CSharpParser.RULE_namespace_or_type_name = 1;
CSharpParser.RULE_type_ = 2;
CSharpParser.RULE_base_type = 3;
CSharpParser.RULE_tuple_type = 4;
CSharpParser.RULE_tuple_element = 5;
CSharpParser.RULE_simple_type = 6;
CSharpParser.RULE_numeric_type = 7;
CSharpParser.RULE_integral_type = 8;
CSharpParser.RULE_floating_point_type = 9;
CSharpParser.RULE_class_type = 10;
CSharpParser.RULE_type_argument_list = 11;
CSharpParser.RULE_argument_list = 12;
CSharpParser.RULE_argument = 13;
CSharpParser.RULE_expression = 14;
CSharpParser.RULE_non_assignment_expression = 15;
CSharpParser.RULE_assignment = 16;
CSharpParser.RULE_assignment_operator = 17;
CSharpParser.RULE_conditional_expression = 18;
CSharpParser.RULE_null_coalescing_expression = 19;
CSharpParser.RULE_conditional_or_expression = 20;
CSharpParser.RULE_conditional_and_expression = 21;
CSharpParser.RULE_inclusive_or_expression = 22;
CSharpParser.RULE_exclusive_or_expression = 23;
CSharpParser.RULE_and_expression = 24;
CSharpParser.RULE_equality_expression = 25;
CSharpParser.RULE_relational_expression = 26;
CSharpParser.RULE_shift_expression = 27;
CSharpParser.RULE_additive_expression = 28;
CSharpParser.RULE_multiplicative_expression = 29;
CSharpParser.RULE_switch_expression = 30;
CSharpParser.RULE_switch_expression_arms = 31;
CSharpParser.RULE_switch_expression_arm = 32;
CSharpParser.RULE_range_expression = 33;
CSharpParser.RULE_unary_expression = 34;
CSharpParser.RULE_primary_expression = 35;
CSharpParser.RULE_primary_expression_start = 36;
CSharpParser.RULE_throwable_expression = 37;
CSharpParser.RULE_throw_expression = 38;
CSharpParser.RULE_member_access = 39;
CSharpParser.RULE_bracket_expression = 40;
CSharpParser.RULE_indexer_argument = 41;
CSharpParser.RULE_predefined_type = 42;
CSharpParser.RULE_expression_list = 43;
CSharpParser.RULE_object_or_collection_initializer = 44;
CSharpParser.RULE_object_initializer = 45;
CSharpParser.RULE_member_initializer_list = 46;
CSharpParser.RULE_member_initializer = 47;
CSharpParser.RULE_initializer_value = 48;
CSharpParser.RULE_collection_initializer = 49;
CSharpParser.RULE_element_initializer = 50;
CSharpParser.RULE_anonymous_object_initializer = 51;
CSharpParser.RULE_member_declarator_list = 52;
CSharpParser.RULE_member_declarator = 53;
CSharpParser.RULE_unbound_type_name = 54;
CSharpParser.RULE_generic_dimension_specifier = 55;
CSharpParser.RULE_isType = 56;
CSharpParser.RULE_isTypePatternArms = 57;
CSharpParser.RULE_isTypePatternArm = 58;
CSharpParser.RULE_lambda_expression = 59;
CSharpParser.RULE_anonymous_function_signature = 60;
CSharpParser.RULE_explicit_anonymous_function_parameter_list = 61;
CSharpParser.RULE_explicit_anonymous_function_parameter = 62;
CSharpParser.RULE_implicit_anonymous_function_parameter_list = 63;
CSharpParser.RULE_anonymous_function_body = 64;
CSharpParser.RULE_query_expression = 65;
CSharpParser.RULE_from_clause = 66;
CSharpParser.RULE_query_body = 67;
CSharpParser.RULE_query_body_clause = 68;
CSharpParser.RULE_let_clause = 69;
CSharpParser.RULE_where_clause = 70;
CSharpParser.RULE_combined_join_clause = 71;
CSharpParser.RULE_orderby_clause = 72;
CSharpParser.RULE_ordering = 73;
CSharpParser.RULE_select_or_group_clause = 74;
CSharpParser.RULE_query_continuation = 75;
CSharpParser.RULE_statement = 76;
CSharpParser.RULE_declarationStatement = 77;
CSharpParser.RULE_local_function_declaration = 78;
CSharpParser.RULE_local_function_header = 79;
CSharpParser.RULE_local_function_modifiers = 80;
CSharpParser.RULE_local_function_body = 81;
CSharpParser.RULE_labeled_Statement = 82;
CSharpParser.RULE_embedded_statement = 83;
CSharpParser.RULE_simple_embedded_statement = 84;
CSharpParser.RULE_block = 85;
CSharpParser.RULE_local_variable_declaration = 86;
CSharpParser.RULE_local_variable_type = 87;
CSharpParser.RULE_local_variable_declarator = 88;
CSharpParser.RULE_local_variable_initializer = 89;
CSharpParser.RULE_local_constant_declaration = 90;
CSharpParser.RULE_if_body = 91;
CSharpParser.RULE_switch_section = 92;
CSharpParser.RULE_switch_label = 93;
CSharpParser.RULE_case_guard = 94;
CSharpParser.RULE_statement_list = 95;
CSharpParser.RULE_for_initializer = 96;
CSharpParser.RULE_for_iterator = 97;
CSharpParser.RULE_catch_clauses = 98;
CSharpParser.RULE_specific_catch_clause = 99;
CSharpParser.RULE_general_catch_clause = 100;
CSharpParser.RULE_exception_filter = 101;
CSharpParser.RULE_finally_clause = 102;
CSharpParser.RULE_resource_acquisition = 103;
CSharpParser.RULE_namespace_declaration = 104;
CSharpParser.RULE_qualified_identifier = 105;
CSharpParser.RULE_namespace_body = 106;
CSharpParser.RULE_extern_alias_directives = 107;
CSharpParser.RULE_extern_alias_directive = 108;
CSharpParser.RULE_using_directives = 109;
CSharpParser.RULE_using_directive = 110;
CSharpParser.RULE_namespace_member_declarations = 111;
CSharpParser.RULE_namespace_member_declaration = 112;
CSharpParser.RULE_type_declaration = 113;
CSharpParser.RULE_qualified_alias_member = 114;
CSharpParser.RULE_type_parameter_list = 115;
CSharpParser.RULE_type_parameter = 116;
CSharpParser.RULE_class_base = 117;
CSharpParser.RULE_interface_type_list = 118;
CSharpParser.RULE_type_parameter_constraints_clauses = 119;
CSharpParser.RULE_type_parameter_constraints_clause = 120;
CSharpParser.RULE_type_parameter_constraints = 121;
CSharpParser.RULE_primary_constraint = 122;
CSharpParser.RULE_secondary_constraints = 123;
CSharpParser.RULE_constructor_constraint = 124;
CSharpParser.RULE_class_body = 125;
CSharpParser.RULE_class_member_declarations = 126;
CSharpParser.RULE_class_member_declaration = 127;
CSharpParser.RULE_all_member_modifiers = 128;
CSharpParser.RULE_all_member_modifier = 129;
CSharpParser.RULE_common_member_declaration = 130;
CSharpParser.RULE_typed_member_declaration = 131;
CSharpParser.RULE_constant_declarators = 132;
CSharpParser.RULE_constant_declarator = 133;
CSharpParser.RULE_variable_declarators = 134;
CSharpParser.RULE_variable_declarator = 135;
CSharpParser.RULE_variable_initializer = 136;
CSharpParser.RULE_return_type = 137;
CSharpParser.RULE_member_name = 138;
CSharpParser.RULE_method_body = 139;
CSharpParser.RULE_formal_parameter_list = 140;
CSharpParser.RULE_fixed_parameters = 141;
CSharpParser.RULE_fixed_parameter = 142;
CSharpParser.RULE_parameter_modifier = 143;
CSharpParser.RULE_parameter_array = 144;
CSharpParser.RULE_accessor_declarations = 145;
CSharpParser.RULE_get_accessor_declaration = 146;
CSharpParser.RULE_set_accessor_declaration = 147;
CSharpParser.RULE_accessor_modifier = 148;
CSharpParser.RULE_accessor_body = 149;
CSharpParser.RULE_event_accessor_declarations = 150;
CSharpParser.RULE_add_accessor_declaration = 151;
CSharpParser.RULE_remove_accessor_declaration = 152;
CSharpParser.RULE_overloadable_operator = 153;
CSharpParser.RULE_conversion_operator_declarator = 154;
CSharpParser.RULE_constructor_initializer = 155;
CSharpParser.RULE_body = 156;
CSharpParser.RULE_struct_interfaces = 157;
CSharpParser.RULE_struct_body = 158;
CSharpParser.RULE_struct_member_declaration = 159;
CSharpParser.RULE_array_type = 160;
CSharpParser.RULE_rank_specifier = 161;
CSharpParser.RULE_array_initializer = 162;
CSharpParser.RULE_variant_type_parameter_list = 163;
CSharpParser.RULE_variant_type_parameter = 164;
CSharpParser.RULE_variance_annotation = 165;
CSharpParser.RULE_interface_base = 166;
CSharpParser.RULE_interface_body = 167;
CSharpParser.RULE_interface_member_declaration = 168;
CSharpParser.RULE_interface_accessors = 169;
CSharpParser.RULE_enum_base = 170;
CSharpParser.RULE_enum_body = 171;
CSharpParser.RULE_enum_member_declaration = 172;
CSharpParser.RULE_global_attribute_section = 173;
CSharpParser.RULE_global_attribute_target = 174;
CSharpParser.RULE_attributes = 175;
CSharpParser.RULE_attribute_section = 176;
CSharpParser.RULE_attribute_target = 177;
CSharpParser.RULE_attribute_list = 178;
CSharpParser.RULE_attribute = 179;
CSharpParser.RULE_attribute_argument = 180;
CSharpParser.RULE_pointer_type = 181;
CSharpParser.RULE_fixed_pointer_declarators = 182;
CSharpParser.RULE_fixed_pointer_declarator = 183;
CSharpParser.RULE_fixed_pointer_initializer = 184;
CSharpParser.RULE_fixed_size_buffer_declarator = 185;
CSharpParser.RULE_stackalloc_initializer = 186;
CSharpParser.RULE_right_arrow = 187;
CSharpParser.RULE_right_shift = 188;
CSharpParser.RULE_right_shift_assignment = 189;
CSharpParser.RULE_literal = 190;
CSharpParser.RULE_boolean_literal = 191;
CSharpParser.RULE_string_literal = 192;
CSharpParser.RULE_interpolated_regular_string = 193;
CSharpParser.RULE_interpolated_verbatium_string = 194;
CSharpParser.RULE_interpolated_regular_string_part = 195;
CSharpParser.RULE_interpolated_verbatium_string_part = 196;
CSharpParser.RULE_interpolated_string_expression = 197;
CSharpParser.RULE_keyword = 198;
CSharpParser.RULE_class_definition = 199;
CSharpParser.RULE_struct_definition = 200;
CSharpParser.RULE_interface_definition = 201;
CSharpParser.RULE_enum_definition = 202;
CSharpParser.RULE_delegate_definition = 203;
CSharpParser.RULE_event_declaration = 204;
CSharpParser.RULE_field_declaration = 205;
CSharpParser.RULE_property_declaration = 206;
CSharpParser.RULE_constant_declaration = 207;
CSharpParser.RULE_indexer_declaration = 208;
CSharpParser.RULE_destructor_definition = 209;
CSharpParser.RULE_constructor_declaration = 210;
CSharpParser.RULE_method_declaration = 211;
CSharpParser.RULE_method_member_name = 212;
CSharpParser.RULE_operator_declaration = 213;
CSharpParser.RULE_arg_declaration = 214;
CSharpParser.RULE_method_invocation = 215;
CSharpParser.RULE_object_creation_expression = 216;
CSharpParser.RULE_identifier = 217;

class Compilation_unitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_compilation_unit;
    }

	EOF() {
	    return this.getToken(CSharpParser.EOF, 0);
	};

	BYTE_ORDER_MARK() {
	    return this.getToken(CSharpParser.BYTE_ORDER_MARK, 0);
	};

	extern_alias_directives() {
	    return this.getTypedRuleContext(Extern_alias_directivesContext,0);
	};

	using_directives() {
	    return this.getTypedRuleContext(Using_directivesContext,0);
	};

	global_attribute_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Global_attribute_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Global_attribute_sectionContext,i);
	    }
	};

	namespace_member_declarations() {
	    return this.getTypedRuleContext(Namespace_member_declarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCompilation_unit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCompilation_unit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCompilation_unit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Namespace_or_type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_namespace_or_type_name;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	qualified_alias_member() {
	    return this.getTypedRuleContext(Qualified_alias_memberContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DOT);
	    } else {
	        return this.getToken(CSharpParser.DOT, i);
	    }
	};


	type_argument_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_argument_listContext);
	    } else {
	        return this.getTypedRuleContext(Type_argument_listContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNamespace_or_type_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNamespace_or_type_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNamespace_or_type_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_;
    }

	base_type() {
	    return this.getTypedRuleContext(Base_typeContext,0);
	};

	INTERR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.INTERR);
	    } else {
	        return this.getToken(CSharpParser.INTERR, i);
	    }
	};


	rank_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rank_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Rank_specifierContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.STAR);
	    } else {
	        return this.getToken(CSharpParser.STAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Base_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_base_type;
    }

	simple_type() {
	    return this.getTypedRuleContext(Simple_typeContext,0);
	};

	class_type() {
	    return this.getTypedRuleContext(Class_typeContext,0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	STAR() {
	    return this.getToken(CSharpParser.STAR, 0);
	};

	tuple_type() {
	    return this.getTypedRuleContext(Tuple_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBase_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBase_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBase_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Tuple_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_tuple_type;
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	tuple_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tuple_elementContext);
	    } else {
	        return this.getTypedRuleContext(Tuple_elementContext,i);
	    }
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTuple_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTuple_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTuple_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Tuple_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_tuple_element;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTuple_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTuple_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTuple_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_simple_type;
    }

	numeric_type() {
	    return this.getTypedRuleContext(Numeric_typeContext,0);
	};

	BOOL() {
	    return this.getToken(CSharpParser.BOOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSimple_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSimple_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSimple_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Numeric_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_numeric_type;
    }

	integral_type() {
	    return this.getTypedRuleContext(Integral_typeContext,0);
	};

	floating_point_type() {
	    return this.getTypedRuleContext(Floating_point_typeContext,0);
	};

	DECIMAL() {
	    return this.getToken(CSharpParser.DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNumeric_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNumeric_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNumeric_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Integral_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_integral_type;
    }

	SBYTE() {
	    return this.getToken(CSharpParser.SBYTE, 0);
	};

	BYTE() {
	    return this.getToken(CSharpParser.BYTE, 0);
	};

	SHORT() {
	    return this.getToken(CSharpParser.SHORT, 0);
	};

	USHORT() {
	    return this.getToken(CSharpParser.USHORT, 0);
	};

	INT() {
	    return this.getToken(CSharpParser.INT, 0);
	};

	UINT() {
	    return this.getToken(CSharpParser.UINT, 0);
	};

	LONG() {
	    return this.getToken(CSharpParser.LONG, 0);
	};

	ULONG() {
	    return this.getToken(CSharpParser.ULONG, 0);
	};

	CHAR() {
	    return this.getToken(CSharpParser.CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIntegral_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIntegral_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIntegral_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Floating_point_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_floating_point_type;
    }

	FLOAT() {
	    return this.getToken(CSharpParser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(CSharpParser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFloating_point_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFloating_point_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFloating_point_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_type;
    }

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	OBJECT() {
	    return this.getToken(CSharpParser.OBJECT, 0);
	};

	DYNAMIC() {
	    return this.getToken(CSharpParser.DYNAMIC, 0);
	};

	STRING() {
	    return this.getToken(CSharpParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_argument_list;
    }

	LT() {
	    return this.getToken(CSharpParser.LT, 0);
	};

	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_argument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_argument_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_argument_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Argument_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_argument_list;
    }

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterArgument_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitArgument_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitArgument_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_argument;
        this.refout = null; // Token
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	VAR() {
	    return this.getToken(CSharpParser.VAR, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	OUT() {
	    return this.getToken(CSharpParser.OUT, 0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_expression;
    }

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	non_assignment_expression() {
	    return this.getTypedRuleContext(Non_assignment_expressionContext,0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Non_assignment_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_non_assignment_expression;
    }

	lambda_expression() {
	    return this.getTypedRuleContext(Lambda_expressionContext,0);
	};

	query_expression() {
	    return this.getTypedRuleContext(Query_expressionContext,0);
	};

	conditional_expression() {
	    return this.getTypedRuleContext(Conditional_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNon_assignment_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNon_assignment_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNon_assignment_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_assignment;
    }

	unary_expression() {
	    return this.getTypedRuleContext(Unary_expressionContext,0);
	};

	assignment_operator() {
	    return this.getTypedRuleContext(Assignment_operatorContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	OP_COALESCING_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_COALESCING_ASSIGNMENT, 0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assignment_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_assignment_operator;
    }

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	OP_ADD_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_ADD_ASSIGNMENT, 0);
	};

	OP_SUB_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_SUB_ASSIGNMENT, 0);
	};

	OP_MULT_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_MULT_ASSIGNMENT, 0);
	};

	OP_DIV_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_DIV_ASSIGNMENT, 0);
	};

	OP_MOD_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_MOD_ASSIGNMENT, 0);
	};

	OP_AND_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_AND_ASSIGNMENT, 0);
	};

	OP_OR_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_OR_ASSIGNMENT, 0);
	};

	OP_XOR_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_XOR_ASSIGNMENT, 0);
	};

	OP_LEFT_SHIFT_ASSIGNMENT() {
	    return this.getToken(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0);
	};

	right_shift_assignment() {
	    return this.getTypedRuleContext(Right_shift_assignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAssignment_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAssignment_operator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAssignment_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Conditional_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_conditional_expression;
    }

	null_coalescing_expression() {
	    return this.getTypedRuleContext(Null_coalescing_expressionContext,0);
	};

	INTERR() {
	    return this.getToken(CSharpParser.INTERR, 0);
	};

	throwable_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Throwable_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Throwable_expressionContext,i);
	    }
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConditional_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConditional_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConditional_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Null_coalescing_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_null_coalescing_expression;
    }

	conditional_or_expression() {
	    return this.getTypedRuleContext(Conditional_or_expressionContext,0);
	};

	OP_COALESCING() {
	    return this.getToken(CSharpParser.OP_COALESCING, 0);
	};

	null_coalescing_expression() {
	    return this.getTypedRuleContext(Null_coalescing_expressionContext,0);
	};

	throw_expression() {
	    return this.getTypedRuleContext(Throw_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNull_coalescing_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNull_coalescing_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNull_coalescing_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Conditional_or_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_conditional_or_expression;
    }

	conditional_and_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Conditional_and_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Conditional_and_expressionContext,i);
	    }
	};

	OP_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_OR);
	    } else {
	        return this.getToken(CSharpParser.OP_OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConditional_or_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConditional_or_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConditional_or_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Conditional_and_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_conditional_and_expression;
    }

	inclusive_or_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Inclusive_or_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Inclusive_or_expressionContext,i);
	    }
	};

	OP_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_AND);
	    } else {
	        return this.getToken(CSharpParser.OP_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConditional_and_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConditional_and_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConditional_and_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Inclusive_or_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_inclusive_or_expression;
    }

	exclusive_or_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Exclusive_or_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Exclusive_or_expressionContext,i);
	    }
	};

	BITWISE_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.BITWISE_OR);
	    } else {
	        return this.getToken(CSharpParser.BITWISE_OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInclusive_or_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInclusive_or_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInclusive_or_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Exclusive_or_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_exclusive_or_expression;
    }

	and_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_expressionContext);
	    } else {
	        return this.getTypedRuleContext(And_expressionContext,i);
	    }
	};

	CARET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.CARET);
	    } else {
	        return this.getToken(CSharpParser.CARET, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExclusive_or_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExclusive_or_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExclusive_or_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class And_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_and_expression;
    }

	equality_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Equality_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Equality_expressionContext,i);
	    }
	};

	AMP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.AMP);
	    } else {
	        return this.getToken(CSharpParser.AMP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAnd_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAnd_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAnd_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Equality_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_equality_expression;
    }

	relational_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Relational_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Relational_expressionContext,i);
	    }
	};

	OP_EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_EQ);
	    } else {
	        return this.getToken(CSharpParser.OP_EQ, i);
	    }
	};


	OP_NE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_NE);
	    } else {
	        return this.getToken(CSharpParser.OP_NE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEquality_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEquality_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEquality_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Relational_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_relational_expression;
    }

	shift_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Shift_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Shift_expressionContext,i);
	    }
	};

	IS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.IS);
	    } else {
	        return this.getToken(CSharpParser.IS, i);
	    }
	};


	isType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IsTypeContext);
	    } else {
	        return this.getTypedRuleContext(IsTypeContext,i);
	    }
	};

	AS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.AS);
	    } else {
	        return this.getToken(CSharpParser.AS, i);
	    }
	};


	type_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_Context);
	    } else {
	        return this.getTypedRuleContext(Type_Context,i);
	    }
	};

	LT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.LT);
	    } else {
	        return this.getToken(CSharpParser.LT, i);
	    }
	};


	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.GT);
	    } else {
	        return this.getToken(CSharpParser.GT, i);
	    }
	};


	OP_LE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_LE);
	    } else {
	        return this.getToken(CSharpParser.OP_LE, i);
	    }
	};


	OP_GE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_GE);
	    } else {
	        return this.getToken(CSharpParser.OP_GE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRelational_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRelational_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRelational_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Shift_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_shift_expression;
    }

	additive_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Additive_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Additive_expressionContext,i);
	    }
	};

	OP_LEFT_SHIFT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_LEFT_SHIFT);
	    } else {
	        return this.getToken(CSharpParser.OP_LEFT_SHIFT, i);
	    }
	};


	right_shift = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Right_shiftContext);
	    } else {
	        return this.getTypedRuleContext(Right_shiftContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterShift_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitShift_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitShift_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Additive_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_additive_expression;
    }

	multiplicative_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Multiplicative_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Multiplicative_expressionContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.PLUS);
	    } else {
	        return this.getToken(CSharpParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.MINUS);
	    } else {
	        return this.getToken(CSharpParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAdditive_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAdditive_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAdditive_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Multiplicative_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_multiplicative_expression;
    }

	switch_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Switch_expressionContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.STAR);
	    } else {
	        return this.getToken(CSharpParser.STAR, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DIV);
	    } else {
	        return this.getToken(CSharpParser.DIV, i);
	    }
	};


	PERCENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.PERCENT);
	    } else {
	        return this.getToken(CSharpParser.PERCENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMultiplicative_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMultiplicative_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMultiplicative_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_switch_expression;
    }

	range_expression() {
	    return this.getTypedRuleContext(Range_expressionContext,0);
	};

	SWITCH() {
	    return this.getToken(CSharpParser.SWITCH, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	switch_expression_arms() {
	    return this.getTypedRuleContext(Switch_expression_armsContext,0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitch_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitch_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitch_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_expression_armsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_switch_expression_arms;
    }

	switch_expression_arm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_expression_armContext);
	    } else {
	        return this.getTypedRuleContext(Switch_expression_armContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitch_expression_arms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitch_expression_arms(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitch_expression_arms(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_expression_armContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_switch_expression_arm;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	case_guard() {
	    return this.getTypedRuleContext(Case_guardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitch_expression_arm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitch_expression_arm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitch_expression_arm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Range_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_range_expression;
    }

	unary_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Unary_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Unary_expressionContext,i);
	    }
	};

	OP_RANGE() {
	    return this.getToken(CSharpParser.OP_RANGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRange_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRange_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRange_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Unary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_unary_expression;
    }

	primary_expression() {
	    return this.getTypedRuleContext(Primary_expressionContext,0);
	};

	PLUS() {
	    return this.getToken(CSharpParser.PLUS, 0);
	};

	unary_expression() {
	    return this.getTypedRuleContext(Unary_expressionContext,0);
	};

	MINUS() {
	    return this.getToken(CSharpParser.MINUS, 0);
	};

	BANG() {
	    return this.getToken(CSharpParser.BANG, 0);
	};

	TILDE() {
	    return this.getToken(CSharpParser.TILDE, 0);
	};

	OP_INC() {
	    return this.getToken(CSharpParser.OP_INC, 0);
	};

	OP_DEC() {
	    return this.getToken(CSharpParser.OP_DEC, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	AWAIT() {
	    return this.getToken(CSharpParser.AWAIT, 0);
	};

	AMP() {
	    return this.getToken(CSharpParser.AMP, 0);
	};

	STAR() {
	    return this.getToken(CSharpParser.STAR, 0);
	};

	CARET() {
	    return this.getToken(CSharpParser.CARET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUnary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUnary_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUnary_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Primary_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_primary_expression;
        this.pe = null; // Primary_expression_startContext
    }

	primary_expression_start() {
	    return this.getTypedRuleContext(Primary_expression_startContext,0);
	};

	BANG = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.BANG);
	    } else {
	        return this.getToken(CSharpParser.BANG, i);
	    }
	};


	bracket_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Bracket_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Bracket_expressionContext,i);
	    }
	};

	member_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Member_accessContext);
	    } else {
	        return this.getTypedRuleContext(Member_accessContext,i);
	    }
	};

	method_invocation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Method_invocationContext);
	    } else {
	        return this.getTypedRuleContext(Method_invocationContext,i);
	    }
	};

	OP_INC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_INC);
	    } else {
	        return this.getToken(CSharpParser.OP_INC, i);
	    }
	};


	OP_DEC = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_DEC);
	    } else {
	        return this.getToken(CSharpParser.OP_DEC, i);
	    }
	};


	OP_PTR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.OP_PTR);
	    } else {
	        return this.getToken(CSharpParser.OP_PTR, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterPrimary_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitPrimary_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitPrimary_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Primary_expression_startContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_primary_expression_start;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LiteralAccessExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LITERAL_ACCESS() {
	    return this.getToken(CSharpParser.LITERAL_ACCESS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLiteralAccessExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLiteralAccessExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLiteralAccessExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.LiteralAccessExpressionContext = LiteralAccessExpressionContext;

class DefaultValueExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DEFAULT() {
	    return this.getToken(CSharpParser.DEFAULT, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterDefaultValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitDefaultValueExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitDefaultValueExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.DefaultValueExpressionContext = DefaultValueExpressionContext;

class BaseAccessExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BASE() {
	    return this.getToken(CSharpParser.BASE, 0);
	};

	DOT() {
	    return this.getToken(CSharpParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	type_argument_list() {
	    return this.getTypedRuleContext(Type_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBaseAccessExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBaseAccessExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBaseAccessExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.BaseAccessExpressionContext = BaseAccessExpressionContext;

class SizeofExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SIZEOF() {
	    return this.getToken(CSharpParser.SIZEOF, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSizeofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSizeofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSizeofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.SizeofExpressionContext = SizeofExpressionContext;

class ParenthesisExpressionsContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterParenthesisExpressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitParenthesisExpressions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitParenthesisExpressions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ParenthesisExpressionsContext = ParenthesisExpressionsContext;

class ThisReferenceExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterThisReferenceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitThisReferenceExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitThisReferenceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ThisReferenceExpressionContext = ThisReferenceExpressionContext;

class ObjectCreationExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NEW() {
	    return this.getToken(CSharpParser.NEW, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	anonymous_object_initializer() {
	    return this.getTypedRuleContext(Anonymous_object_initializerContext,0);
	};

	rank_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rank_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Rank_specifierContext,i);
	    }
	};

	array_initializer() {
	    return this.getTypedRuleContext(Array_initializerContext,0);
	};

	object_creation_expression() {
	    return this.getTypedRuleContext(Object_creation_expressionContext,0);
	};

	object_or_collection_initializer() {
	    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterObjectCreationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitObjectCreationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitObjectCreationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ObjectCreationExpressionContext = ObjectCreationExpressionContext;

class AnonymousMethodExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DELEGATE() {
	    return this.getToken(CSharpParser.DELEGATE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ASYNC() {
	    return this.getToken(CSharpParser.ASYNC, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	explicit_anonymous_function_parameter_list() {
	    return this.getTypedRuleContext(Explicit_anonymous_function_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAnonymousMethodExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAnonymousMethodExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAnonymousMethodExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.AnonymousMethodExpressionContext = AnonymousMethodExpressionContext;

class TypeofExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TYPEOF() {
	    return this.getToken(CSharpParser.TYPEOF, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	unbound_type_name() {
	    return this.getTypedRuleContext(Unbound_type_nameContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTypeofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTypeofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTypeofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.TypeofExpressionContext = TypeofExpressionContext;

class TupleExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTupleExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTupleExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTupleExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.TupleExpressionContext = TupleExpressionContext;

class UncheckedExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNCHECKED() {
	    return this.getToken(CSharpParser.UNCHECKED, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUncheckedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUncheckedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUncheckedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UncheckedExpressionContext = UncheckedExpressionContext;

class SimpleNameExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type_argument_list() {
	    return this.getTypedRuleContext(Type_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSimpleNameExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSimpleNameExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSimpleNameExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.SimpleNameExpressionContext = SimpleNameExpressionContext;

class MemberAccessExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predefined_type() {
	    return this.getTypedRuleContext(Predefined_typeContext,0);
	};

	qualified_alias_member() {
	    return this.getTypedRuleContext(Qualified_alias_memberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMemberAccessExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMemberAccessExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMemberAccessExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.MemberAccessExpressionContext = MemberAccessExpressionContext;

class CheckedExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHECKED() {
	    return this.getToken(CSharpParser.CHECKED, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCheckedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCheckedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCheckedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.CheckedExpressionContext = CheckedExpressionContext;

class LiteralExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.LiteralExpressionContext = LiteralExpressionContext;

class NameofExpressionContext extends Primary_expression_startContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NAMEOF() {
	    return this.getToken(CSharpParser.NAMEOF, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DOT);
	    } else {
	        return this.getToken(CSharpParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNameofExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNameofExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNameofExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.NameofExpressionContext = NameofExpressionContext;

class Throwable_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_throwable_expression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	throw_expression() {
	    return this.getTypedRuleContext(Throw_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterThrowable_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitThrowable_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitThrowable_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Throw_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_throw_expression;
    }

	THROW() {
	    return this.getToken(CSharpParser.THROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterThrow_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitThrow_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitThrow_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_accessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_access;
    }

	DOT() {
	    return this.getToken(CSharpParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	INTERR() {
	    return this.getToken(CSharpParser.INTERR, 0);
	};

	type_argument_list() {
	    return this.getTypedRuleContext(Type_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_access(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_access(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_access(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Bracket_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_bracket_expression;
    }

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	indexer_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Indexer_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Indexer_argumentContext,i);
	    }
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	INTERR() {
	    return this.getToken(CSharpParser.INTERR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBracket_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBracket_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBracket_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Indexer_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_indexer_argument;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIndexer_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIndexer_argument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIndexer_argument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Predefined_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_predefined_type;
    }

	BOOL() {
	    return this.getToken(CSharpParser.BOOL, 0);
	};

	BYTE() {
	    return this.getToken(CSharpParser.BYTE, 0);
	};

	CHAR() {
	    return this.getToken(CSharpParser.CHAR, 0);
	};

	DECIMAL() {
	    return this.getToken(CSharpParser.DECIMAL, 0);
	};

	DOUBLE() {
	    return this.getToken(CSharpParser.DOUBLE, 0);
	};

	FLOAT() {
	    return this.getToken(CSharpParser.FLOAT, 0);
	};

	INT() {
	    return this.getToken(CSharpParser.INT, 0);
	};

	LONG() {
	    return this.getToken(CSharpParser.LONG, 0);
	};

	OBJECT() {
	    return this.getToken(CSharpParser.OBJECT, 0);
	};

	SBYTE() {
	    return this.getToken(CSharpParser.SBYTE, 0);
	};

	SHORT() {
	    return this.getToken(CSharpParser.SHORT, 0);
	};

	STRING() {
	    return this.getToken(CSharpParser.STRING, 0);
	};

	UINT() {
	    return this.getToken(CSharpParser.UINT, 0);
	};

	ULONG() {
	    return this.getToken(CSharpParser.ULONG, 0);
	};

	USHORT() {
	    return this.getToken(CSharpParser.USHORT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterPredefined_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitPredefined_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitPredefined_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expression_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_expression_list;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExpression_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExpression_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExpression_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_or_collection_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_object_or_collection_initializer;
    }

	object_initializer() {
	    return this.getTypedRuleContext(Object_initializerContext,0);
	};

	collection_initializer() {
	    return this.getTypedRuleContext(Collection_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterObject_or_collection_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitObject_or_collection_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitObject_or_collection_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_object_initializer;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	member_initializer_list() {
	    return this.getTypedRuleContext(Member_initializer_listContext,0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterObject_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitObject_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitObject_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_initializer_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_initializer_list;
    }

	member_initializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Member_initializerContext);
	    } else {
	        return this.getTypedRuleContext(Member_initializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_initializer_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_initializer_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_initializer_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_initializer;
    }

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	initializer_value() {
	    return this.getTypedRuleContext(Initializer_valueContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Initializer_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_initializer_value;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	object_or_collection_initializer() {
	    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInitializer_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInitializer_value(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInitializer_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Collection_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_collection_initializer;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	element_initializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Element_initializerContext);
	    } else {
	        return this.getTypedRuleContext(Element_initializerContext,i);
	    }
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCollection_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCollection_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCollection_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Element_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_element_initializer;
    }

	non_assignment_expression() {
	    return this.getTypedRuleContext(Non_assignment_expressionContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	expression_list() {
	    return this.getTypedRuleContext(Expression_listContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterElement_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitElement_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitElement_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Anonymous_object_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_anonymous_object_initializer;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	member_declarator_list() {
	    return this.getTypedRuleContext(Member_declarator_listContext,0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAnonymous_object_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAnonymous_object_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAnonymous_object_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_declarator_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_declarator_list;
    }

	member_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Member_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Member_declaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_declarator_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_declarator_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_declarator_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_declarator;
    }

	primary_expression() {
	    return this.getTypedRuleContext(Primary_expressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Unbound_type_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_unbound_type_name;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOUBLE_COLON() {
	    return this.getToken(CSharpParser.DOUBLE_COLON, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DOT);
	    } else {
	        return this.getToken(CSharpParser.DOT, i);
	    }
	};


	generic_dimension_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Generic_dimension_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Generic_dimension_specifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUnbound_type_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUnbound_type_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUnbound_type_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Generic_dimension_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_generic_dimension_specifier;
    }

	LT() {
	    return this.getToken(CSharpParser.LT, 0);
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGeneric_dimension_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGeneric_dimension_specifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGeneric_dimension_specifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_isType;
    }

	base_type() {
	    return this.getTypedRuleContext(Base_typeContext,0);
	};

	rank_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rank_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Rank_specifierContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.STAR);
	    } else {
	        return this.getToken(CSharpParser.STAR, i);
	    }
	};


	INTERR() {
	    return this.getToken(CSharpParser.INTERR, 0);
	};

	isTypePatternArms() {
	    return this.getTypedRuleContext(IsTypePatternArmsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIsType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIsType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIsType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsTypePatternArmsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_isTypePatternArms;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	isTypePatternArm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IsTypePatternArmContext);
	    } else {
	        return this.getTypedRuleContext(IsTypePatternArmContext,i);
	    }
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIsTypePatternArms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIsTypePatternArms(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIsTypePatternArms(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsTypePatternArmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_isTypePatternArm;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIsTypePatternArm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIsTypePatternArm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIsTypePatternArm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_lambda_expression;
    }

	anonymous_function_signature() {
	    return this.getTypedRuleContext(Anonymous_function_signatureContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	anonymous_function_body() {
	    return this.getTypedRuleContext(Anonymous_function_bodyContext,0);
	};

	ASYNC() {
	    return this.getToken(CSharpParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLambda_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLambda_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLambda_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Anonymous_function_signatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_anonymous_function_signature;
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	explicit_anonymous_function_parameter_list() {
	    return this.getTypedRuleContext(Explicit_anonymous_function_parameter_listContext,0);
	};

	implicit_anonymous_function_parameter_list() {
	    return this.getTypedRuleContext(Implicit_anonymous_function_parameter_listContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAnonymous_function_signature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAnonymous_function_signature(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAnonymous_function_signature(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Explicit_anonymous_function_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_explicit_anonymous_function_parameter_list;
    }

	explicit_anonymous_function_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Explicit_anonymous_function_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Explicit_anonymous_function_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExplicit_anonymous_function_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExplicit_anonymous_function_parameter_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExplicit_anonymous_function_parameter_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Explicit_anonymous_function_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_explicit_anonymous_function_parameter;
        this.refout = null; // Token
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	OUT() {
	    return this.getToken(CSharpParser.OUT, 0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExplicit_anonymous_function_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExplicit_anonymous_function_parameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExplicit_anonymous_function_parameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Implicit_anonymous_function_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_implicit_anonymous_function_parameter_list;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterImplicit_anonymous_function_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitImplicit_anonymous_function_parameter_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitImplicit_anonymous_function_parameter_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Anonymous_function_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_anonymous_function_body;
    }

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAnonymous_function_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAnonymous_function_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAnonymous_function_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Query_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_query_expression;
    }

	from_clause() {
	    return this.getTypedRuleContext(From_clauseContext,0);
	};

	query_body() {
	    return this.getTypedRuleContext(Query_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQuery_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQuery_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQuery_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class From_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_from_clause;
    }

	FROM() {
	    return this.getToken(CSharpParser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFrom_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFrom_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFrom_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Query_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_query_body;
    }

	select_or_group_clause() {
	    return this.getTypedRuleContext(Select_or_group_clauseContext,0);
	};

	query_body_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Query_body_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Query_body_clauseContext,i);
	    }
	};

	query_continuation() {
	    return this.getTypedRuleContext(Query_continuationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQuery_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQuery_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQuery_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Query_body_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_query_body_clause;
    }

	from_clause() {
	    return this.getTypedRuleContext(From_clauseContext,0);
	};

	let_clause() {
	    return this.getTypedRuleContext(Let_clauseContext,0);
	};

	where_clause() {
	    return this.getTypedRuleContext(Where_clauseContext,0);
	};

	combined_join_clause() {
	    return this.getTypedRuleContext(Combined_join_clauseContext,0);
	};

	orderby_clause() {
	    return this.getTypedRuleContext(Orderby_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQuery_body_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQuery_body_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQuery_body_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Let_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_let_clause;
    }

	LET() {
	    return this.getToken(CSharpParser.LET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLet_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLet_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLet_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Where_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_where_clause;
    }

	WHERE() {
	    return this.getToken(CSharpParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterWhere_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitWhere_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitWhere_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Combined_join_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_combined_join_clause;
    }

	JOIN() {
	    return this.getToken(CSharpParser.JOIN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ON() {
	    return this.getToken(CSharpParser.ON, 0);
	};

	EQUALS() {
	    return this.getToken(CSharpParser.EQUALS, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	INTO() {
	    return this.getToken(CSharpParser.INTO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCombined_join_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCombined_join_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCombined_join_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Orderby_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_orderby_clause;
    }

	ORDERBY() {
	    return this.getToken(CSharpParser.ORDERBY, 0);
	};

	ordering = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderingContext);
	    } else {
	        return this.getTypedRuleContext(OrderingContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterOrderby_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitOrderby_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitOrderby_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_ordering;
        this.dir = null; // Token
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASCENDING() {
	    return this.getToken(CSharpParser.ASCENDING, 0);
	};

	DESCENDING() {
	    return this.getToken(CSharpParser.DESCENDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterOrdering(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitOrdering(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitOrdering(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Select_or_group_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_select_or_group_clause;
    }

	SELECT() {
	    return this.getToken(CSharpParser.SELECT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	GROUP() {
	    return this.getToken(CSharpParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(CSharpParser.BY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSelect_or_group_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSelect_or_group_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSelect_or_group_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Query_continuationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_query_continuation;
    }

	INTO() {
	    return this.getToken(CSharpParser.INTO, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	query_body() {
	    return this.getTypedRuleContext(Query_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQuery_continuation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQuery_continuation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQuery_continuation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_statement;
    }

	labeled_Statement() {
	    return this.getTypedRuleContext(Labeled_StatementContext,0);
	};

	declarationStatement() {
	    return this.getTypedRuleContext(DeclarationStatementContext,0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_declarationStatement;
    }

	local_variable_declaration() {
	    return this.getTypedRuleContext(Local_variable_declarationContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	local_constant_declaration() {
	    return this.getTypedRuleContext(Local_constant_declarationContext,0);
	};

	local_function_declaration() {
	    return this.getTypedRuleContext(Local_function_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_function_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_function_declaration;
    }

	local_function_header() {
	    return this.getTypedRuleContext(Local_function_headerContext,0);
	};

	local_function_body() {
	    return this.getTypedRuleContext(Local_function_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_function_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_function_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_function_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_function_headerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_function_header;
    }

	return_type() {
	    return this.getTypedRuleContext(Return_typeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	local_function_modifiers() {
	    return this.getTypedRuleContext(Local_function_modifiersContext,0);
	};

	type_parameter_list() {
	    return this.getTypedRuleContext(Type_parameter_listContext,0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_function_header(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_function_header(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_function_header(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_function_modifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_function_modifiers;
    }

	ASYNC() {
	    return this.getToken(CSharpParser.ASYNC, 0);
	};

	UNSAFE() {
	    return this.getToken(CSharpParser.UNSAFE, 0);
	};

	STATIC() {
	    return this.getToken(CSharpParser.STATIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_function_modifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_function_modifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_function_modifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_function_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_function_body;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_function_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_function_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_function_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Labeled_StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_labeled_Statement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLabeled_Statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLabeled_Statement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLabeled_Statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Embedded_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_embedded_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	simple_embedded_statement() {
	    return this.getTypedRuleContext(Simple_embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEmbedded_statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEmbedded_statement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEmbedded_statement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_embedded_statementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_simple_embedded_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TryStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRY() {
	    return this.getToken(CSharpParser.TRY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catch_clauses() {
	    return this.getTypedRuleContext(Catch_clausesContext,0);
	};

	finally_clause() {
	    return this.getTypedRuleContext(Finally_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTryStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.TryStatementContext = TryStatementContext;

class CheckedStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHECKED() {
	    return this.getToken(CSharpParser.CHECKED, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCheckedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCheckedStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCheckedStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.CheckedStatementContext = CheckedStatementContext;

class ThrowStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	THROW() {
	    return this.getToken(CSharpParser.THROW, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitThrowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitThrowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ThrowStatementContext = ThrowStatementContext;

class TheEmptyStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTheEmptyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTheEmptyStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTheEmptyStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.TheEmptyStatementContext = TheEmptyStatementContext;

class UnsafeStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNSAFE() {
	    return this.getToken(CSharpParser.UNSAFE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUnsafeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUnsafeStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUnsafeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UnsafeStatementContext = UnsafeStatementContext;

class ForStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FOR() {
	    return this.getToken(CSharpParser.FOR, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.SEMICOLON);
	    } else {
	        return this.getToken(CSharpParser.SEMICOLON, i);
	    }
	};


	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	for_initializer() {
	    return this.getTypedRuleContext(For_initializerContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	for_iterator() {
	    return this.getTypedRuleContext(For_iteratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ForStatementContext = ForStatementContext;

class BreakStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BREAK() {
	    return this.getToken(CSharpParser.BREAK, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.BreakStatementContext = BreakStatementContext;

class IfStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IF() {
	    return this.getToken(CSharpParser.IF, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	if_body = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(If_bodyContext);
	    } else {
	        return this.getTypedRuleContext(If_bodyContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(CSharpParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.IfStatementContext = IfStatementContext;

class ReturnStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RETURN() {
	    return this.getToken(CSharpParser.RETURN, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ReturnStatementContext = ReturnStatementContext;

class GotoStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GOTO() {
	    return this.getToken(CSharpParser.GOTO, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CASE() {
	    return this.getToken(CSharpParser.CASE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DEFAULT() {
	    return this.getToken(CSharpParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGotoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGotoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGotoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.GotoStatementContext = GotoStatementContext;

class SwitchStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SWITCH() {
	    return this.getToken(CSharpParser.SWITCH, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	switch_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Switch_sectionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.SwitchStatementContext = SwitchStatementContext;

class FixedStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FIXED() {
	    return this.getToken(CSharpParser.FIXED, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	pointer_type() {
	    return this.getTypedRuleContext(Pointer_typeContext,0);
	};

	fixed_pointer_declarators() {
	    return this.getTypedRuleContext(Fixed_pointer_declaratorsContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixedStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixedStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.FixedStatementContext = FixedStatementContext;

class WhileStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	WHILE() {
	    return this.getToken(CSharpParser.WHILE, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.WhileStatementContext = WhileStatementContext;

class DoStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DO() {
	    return this.getToken(CSharpParser.DO, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	WHILE() {
	    return this.getToken(CSharpParser.WHILE, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitDoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.DoStatementContext = DoStatementContext;

class ForeachStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FOREACH() {
	    return this.getToken(CSharpParser.FOREACH, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	local_variable_type() {
	    return this.getTypedRuleContext(Local_variable_typeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	AWAIT() {
	    return this.getToken(CSharpParser.AWAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterForeachStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitForeachStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitForeachStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ForeachStatementContext = ForeachStatementContext;

class UncheckedStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNCHECKED() {
	    return this.getToken(CSharpParser.UNCHECKED, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUncheckedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUncheckedStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUncheckedStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UncheckedStatementContext = UncheckedStatementContext;

class ExpressionStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ExpressionStatementContext = ExpressionStatementContext;

class ContinueStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONTINUE() {
	    return this.getToken(CSharpParser.CONTINUE, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.ContinueStatementContext = ContinueStatementContext;

class UsingStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	resource_acquisition() {
	    return this.getTypedRuleContext(Resource_acquisitionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUsingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUsingStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUsingStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UsingStatementContext = UsingStatementContext;

class LockStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LOCK() {
	    return this.getToken(CSharpParser.LOCK, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	embedded_statement() {
	    return this.getTypedRuleContext(Embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.LockStatementContext = LockStatementContext;

class YieldStatementContext extends Simple_embedded_statementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	YIELD() {
	    return this.getToken(CSharpParser.YIELD, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	RETURN() {
	    return this.getToken(CSharpParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	BREAK() {
	    return this.getToken(CSharpParser.BREAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterYieldStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitYieldStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitYieldStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.YieldStatementContext = YieldStatementContext;

class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_block;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_variable_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_variable_declaration;
    }

	local_variable_type() {
	    return this.getTypedRuleContext(Local_variable_typeContext,0);
	};

	local_variable_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Local_variable_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Local_variable_declaratorContext,i);
	    }
	};

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	FIXED() {
	    return this.getToken(CSharpParser.FIXED, 0);
	};

	pointer_type() {
	    return this.getTypedRuleContext(Pointer_typeContext,0);
	};

	fixed_pointer_declarators() {
	    return this.getTypedRuleContext(Fixed_pointer_declaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_variable_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_variable_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_variable_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_variable_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_variable_type;
    }

	VAR() {
	    return this.getToken(CSharpParser.VAR, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_variable_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_variable_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_variable_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_variable_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_variable_declarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	local_variable_initializer() {
	    return this.getTypedRuleContext(Local_variable_initializerContext,0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_variable_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_variable_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_variable_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_variable_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_variable_initializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	array_initializer() {
	    return this.getTypedRuleContext(Array_initializerContext,0);
	};

	stackalloc_initializer() {
	    return this.getTypedRuleContext(Stackalloc_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_variable_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_variable_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_variable_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Local_constant_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_local_constant_declaration;
    }

	CONST() {
	    return this.getToken(CSharpParser.CONST, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	constant_declarators() {
	    return this.getTypedRuleContext(Constant_declaratorsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLocal_constant_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLocal_constant_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLocal_constant_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class If_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_if_body;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	simple_embedded_statement() {
	    return this.getTypedRuleContext(Simple_embedded_statementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIf_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIf_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIf_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_switch_section;
    }

	statement_list() {
	    return this.getTypedRuleContext(Statement_listContext,0);
	};

	switch_label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Switch_labelContext);
	    } else {
	        return this.getTypedRuleContext(Switch_labelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitch_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitch_section(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitch_section(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Switch_labelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_switch_label;
    }

	CASE() {
	    return this.getToken(CSharpParser.CASE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	case_guard() {
	    return this.getTypedRuleContext(Case_guardContext,0);
	};

	DEFAULT() {
	    return this.getToken(CSharpParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSwitch_label(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSwitch_label(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSwitch_label(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Case_guardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_case_guard;
    }

	WHEN() {
	    return this.getToken(CSharpParser.WHEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCase_guard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCase_guard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCase_guard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Statement_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_statement_list;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStatement_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStatement_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStatement_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_for_initializer;
    }

	local_variable_declaration() {
	    return this.getTypedRuleContext(Local_variable_declarationContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFor_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFor_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFor_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_iteratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_for_iterator;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFor_iterator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFor_iterator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFor_iterator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Catch_clausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_catch_clauses;
    }

	specific_catch_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Specific_catch_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Specific_catch_clauseContext,i);
	    }
	};

	general_catch_clause() {
	    return this.getTypedRuleContext(General_catch_clauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCatch_clauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCatch_clauses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCatch_clauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Specific_catch_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_specific_catch_clause;
    }

	CATCH() {
	    return this.getToken(CSharpParser.CATCH, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	class_type() {
	    return this.getTypedRuleContext(Class_typeContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	exception_filter() {
	    return this.getTypedRuleContext(Exception_filterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSpecific_catch_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSpecific_catch_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSpecific_catch_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class General_catch_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_general_catch_clause;
    }

	CATCH() {
	    return this.getToken(CSharpParser.CATCH, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	exception_filter() {
	    return this.getTypedRuleContext(Exception_filterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGeneral_catch_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGeneral_catch_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGeneral_catch_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Exception_filterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_exception_filter;
    }

	WHEN() {
	    return this.getToken(CSharpParser.WHEN, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterException_filter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitException_filter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitException_filter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Finally_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_finally_clause;
    }

	FINALLY() {
	    return this.getToken(CSharpParser.FINALLY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFinally_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFinally_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFinally_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Resource_acquisitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_resource_acquisition;
    }

	local_variable_declaration() {
	    return this.getTypedRuleContext(Local_variable_declarationContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterResource_acquisition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitResource_acquisition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitResource_acquisition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Namespace_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_namespace_declaration;
        this.qi = null; // Qualified_identifierContext
    }

	NAMESPACE() {
	    return this.getToken(CSharpParser.NAMESPACE, 0);
	};

	namespace_body() {
	    return this.getTypedRuleContext(Namespace_bodyContext,0);
	};

	qualified_identifier() {
	    return this.getTypedRuleContext(Qualified_identifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNamespace_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNamespace_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNamespace_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Qualified_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_qualified_identifier;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DOT);
	    } else {
	        return this.getToken(CSharpParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQualified_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQualified_identifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQualified_identifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Namespace_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_namespace_body;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	extern_alias_directives() {
	    return this.getTypedRuleContext(Extern_alias_directivesContext,0);
	};

	using_directives() {
	    return this.getTypedRuleContext(Using_directivesContext,0);
	};

	namespace_member_declarations() {
	    return this.getTypedRuleContext(Namespace_member_declarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNamespace_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNamespace_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNamespace_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Extern_alias_directivesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_extern_alias_directives;
    }

	extern_alias_directive = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Extern_alias_directiveContext);
	    } else {
	        return this.getTypedRuleContext(Extern_alias_directiveContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExtern_alias_directives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExtern_alias_directives(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExtern_alias_directives(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Extern_alias_directiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_extern_alias_directive;
    }

	EXTERN() {
	    return this.getToken(CSharpParser.EXTERN, 0);
	};

	ALIAS() {
	    return this.getToken(CSharpParser.ALIAS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterExtern_alias_directive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitExtern_alias_directive(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitExtern_alias_directive(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Using_directivesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_using_directives;
    }

	using_directive = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Using_directiveContext);
	    } else {
	        return this.getTypedRuleContext(Using_directiveContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUsing_directives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUsing_directives(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUsing_directives(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Using_directiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_using_directive;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UsingAliasDirectiveContext extends Using_directiveContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUsingAliasDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUsingAliasDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUsingAliasDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UsingAliasDirectiveContext = UsingAliasDirectiveContext;

class UsingNamespaceDirectiveContext extends Using_directiveContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUsingNamespaceDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUsingNamespaceDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUsingNamespaceDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UsingNamespaceDirectiveContext = UsingNamespaceDirectiveContext;

class UsingStaticDirectiveContext extends Using_directiveContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	STATIC() {
	    return this.getToken(CSharpParser.STATIC, 0);
	};

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterUsingStaticDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitUsingStaticDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitUsingStaticDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

CSharpParser.UsingStaticDirectiveContext = UsingStaticDirectiveContext;

class Namespace_member_declarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_namespace_member_declarations;
    }

	namespace_member_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Namespace_member_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Namespace_member_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNamespace_member_declarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNamespace_member_declarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNamespace_member_declarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Namespace_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_namespace_member_declaration;
    }

	namespace_declaration() {
	    return this.getTypedRuleContext(Namespace_declarationContext,0);
	};

	type_declaration() {
	    return this.getTypedRuleContext(Type_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterNamespace_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitNamespace_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitNamespace_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_declaration;
    }

	class_definition() {
	    return this.getTypedRuleContext(Class_definitionContext,0);
	};

	struct_definition() {
	    return this.getTypedRuleContext(Struct_definitionContext,0);
	};

	interface_definition() {
	    return this.getTypedRuleContext(Interface_definitionContext,0);
	};

	enum_definition() {
	    return this.getTypedRuleContext(Enum_definitionContext,0);
	};

	delegate_definition() {
	    return this.getTypedRuleContext(Delegate_definitionContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	all_member_modifiers() {
	    return this.getTypedRuleContext(All_member_modifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Qualified_alias_memberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_qualified_alias_member;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOUBLE_COLON() {
	    return this.getToken(CSharpParser.DOUBLE_COLON, 0);
	};

	type_argument_list() {
	    return this.getTypedRuleContext(Type_argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterQualified_alias_member(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitQualified_alias_member(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitQualified_alias_member(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_parameter_list;
    }

	LT() {
	    return this.getToken(CSharpParser.LT, 0);
	};

	type_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Type_parameterContext,i);
	    }
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_parameter_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_parameter_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_parameter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_parameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_parameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_baseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_base;
    }

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	class_type() {
	    return this.getTypedRuleContext(Class_typeContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	namespace_or_type_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
	    } else {
	        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_base(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_base(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_base(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_type_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_type_list;
    }

	namespace_or_type_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
	    } else {
	        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_type_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_type_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_type_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_parameter_constraints_clausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_parameter_constraints_clauses;
    }

	type_parameter_constraints_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_parameter_constraints_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Type_parameter_constraints_clauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_parameter_constraints_clauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_parameter_constraints_clauses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_parameter_constraints_clauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_parameter_constraints_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_parameter_constraints_clause;
    }

	WHERE() {
	    return this.getToken(CSharpParser.WHERE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	type_parameter_constraints() {
	    return this.getTypedRuleContext(Type_parameter_constraintsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_parameter_constraints_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_parameter_constraints_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_parameter_constraints_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_parameter_constraintsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_type_parameter_constraints;
    }

	constructor_constraint() {
	    return this.getTypedRuleContext(Constructor_constraintContext,0);
	};

	primary_constraint() {
	    return this.getTypedRuleContext(Primary_constraintContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	secondary_constraints() {
	    return this.getTypedRuleContext(Secondary_constraintsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterType_parameter_constraints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitType_parameter_constraints(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitType_parameter_constraints(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Primary_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_primary_constraint;
    }

	class_type() {
	    return this.getTypedRuleContext(Class_typeContext,0);
	};

	CLASS() {
	    return this.getToken(CSharpParser.CLASS, 0);
	};

	INTERR() {
	    return this.getToken(CSharpParser.INTERR, 0);
	};

	STRUCT() {
	    return this.getToken(CSharpParser.STRUCT, 0);
	};

	UNMANAGED() {
	    return this.getToken(CSharpParser.UNMANAGED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterPrimary_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitPrimary_constraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitPrimary_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Secondary_constraintsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_secondary_constraints;
    }

	namespace_or_type_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Namespace_or_type_nameContext);
	    } else {
	        return this.getTypedRuleContext(Namespace_or_type_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSecondary_constraints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSecondary_constraints(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSecondary_constraints(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constructor_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constructor_constraint;
    }

	NEW() {
	    return this.getToken(CSharpParser.NEW, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstructor_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstructor_constraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstructor_constraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_body;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	class_member_declarations() {
	    return this.getTypedRuleContext(Class_member_declarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_member_declarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_member_declarations;
    }

	class_member_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Class_member_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Class_member_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_member_declarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_member_declarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_member_declarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_member_declaration;
    }

	common_member_declaration() {
	    return this.getTypedRuleContext(Common_member_declarationContext,0);
	};

	destructor_definition() {
	    return this.getTypedRuleContext(Destructor_definitionContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	all_member_modifiers() {
	    return this.getTypedRuleContext(All_member_modifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class All_member_modifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_all_member_modifiers;
    }

	all_member_modifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(All_member_modifierContext);
	    } else {
	        return this.getTypedRuleContext(All_member_modifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAll_member_modifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAll_member_modifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAll_member_modifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class All_member_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_all_member_modifier;
    }

	NEW() {
	    return this.getToken(CSharpParser.NEW, 0);
	};

	PUBLIC() {
	    return this.getToken(CSharpParser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(CSharpParser.PROTECTED, 0);
	};

	INTERNAL() {
	    return this.getToken(CSharpParser.INTERNAL, 0);
	};

	PRIVATE() {
	    return this.getToken(CSharpParser.PRIVATE, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	VOLATILE() {
	    return this.getToken(CSharpParser.VOLATILE, 0);
	};

	VIRTUAL() {
	    return this.getToken(CSharpParser.VIRTUAL, 0);
	};

	SEALED() {
	    return this.getToken(CSharpParser.SEALED, 0);
	};

	OVERRIDE() {
	    return this.getToken(CSharpParser.OVERRIDE, 0);
	};

	ABSTRACT() {
	    return this.getToken(CSharpParser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(CSharpParser.STATIC, 0);
	};

	UNSAFE() {
	    return this.getToken(CSharpParser.UNSAFE, 0);
	};

	EXTERN() {
	    return this.getToken(CSharpParser.EXTERN, 0);
	};

	PARTIAL() {
	    return this.getToken(CSharpParser.PARTIAL, 0);
	};

	ASYNC() {
	    return this.getToken(CSharpParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAll_member_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAll_member_modifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAll_member_modifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Common_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_common_member_declaration;
    }

	constant_declaration() {
	    return this.getTypedRuleContext(Constant_declarationContext,0);
	};

	typed_member_declaration() {
	    return this.getTypedRuleContext(Typed_member_declarationContext,0);
	};

	event_declaration() {
	    return this.getTypedRuleContext(Event_declarationContext,0);
	};

	conversion_operator_declarator() {
	    return this.getTypedRuleContext(Conversion_operator_declaratorContext,0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	constructor_declaration() {
	    return this.getTypedRuleContext(Constructor_declarationContext,0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	method_declaration() {
	    return this.getTypedRuleContext(Method_declarationContext,0);
	};

	class_definition() {
	    return this.getTypedRuleContext(Class_definitionContext,0);
	};

	struct_definition() {
	    return this.getTypedRuleContext(Struct_definitionContext,0);
	};

	interface_definition() {
	    return this.getTypedRuleContext(Interface_definitionContext,0);
	};

	enum_definition() {
	    return this.getTypedRuleContext(Enum_definitionContext,0);
	};

	delegate_definition() {
	    return this.getTypedRuleContext(Delegate_definitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterCommon_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitCommon_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitCommon_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Typed_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_typed_member_declaration;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	DOT() {
	    return this.getToken(CSharpParser.DOT, 0);
	};

	indexer_declaration() {
	    return this.getTypedRuleContext(Indexer_declarationContext,0);
	};

	method_declaration() {
	    return this.getTypedRuleContext(Method_declarationContext,0);
	};

	property_declaration() {
	    return this.getTypedRuleContext(Property_declarationContext,0);
	};

	operator_declaration() {
	    return this.getTypedRuleContext(Operator_declarationContext,0);
	};

	field_declaration() {
	    return this.getTypedRuleContext(Field_declarationContext,0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterTyped_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitTyped_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitTyped_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constant_declaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constant_declarators;
    }

	constant_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Constant_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Constant_declaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstant_declarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstant_declarators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstant_declarators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constant_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constant_declarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstant_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstant_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstant_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variable_declaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variable_declarators;
    }

	variable_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variable_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Variable_declaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariable_declarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariable_declarators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariable_declarators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variable_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variable_declarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	variable_initializer() {
	    return this.getTypedRuleContext(Variable_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariable_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariable_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariable_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variable_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variable_initializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	array_initializer() {
	    return this.getTypedRuleContext(Array_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariable_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariable_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariable_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Return_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_return_type;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterReturn_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitReturn_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitReturn_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Member_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_member_name;
    }

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMember_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMember_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMember_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Method_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_method_body;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMethod_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMethod_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMethod_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Formal_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_formal_parameter_list;
    }

	parameter_array() {
	    return this.getTypedRuleContext(Parameter_arrayContext,0);
	};

	fixed_parameters() {
	    return this.getTypedRuleContext(Fixed_parametersContext,0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFormal_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFormal_parameter_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFormal_parameter_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_parametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_parameters;
    }

	fixed_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fixed_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Fixed_parameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_parameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_parameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_parameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_parameter;
    }

	arg_declaration() {
	    return this.getTypedRuleContext(Arg_declarationContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	parameter_modifier() {
	    return this.getTypedRuleContext(Parameter_modifierContext,0);
	};

	ARGLIST() {
	    return this.getToken(CSharpParser.ARGLIST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_parameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_parameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Parameter_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_parameter_modifier;
    }

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	OUT() {
	    return this.getToken(CSharpParser.OUT, 0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterParameter_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitParameter_modifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitParameter_modifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Parameter_arrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_parameter_array;
    }

	PARAMS() {
	    return this.getToken(CSharpParser.PARAMS, 0);
	};

	array_type() {
	    return this.getTypedRuleContext(Array_typeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterParameter_array(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitParameter_array(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitParameter_array(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Accessor_declarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_accessor_declarations;
        this.attrs = null; // AttributesContext
        this.mods = null; // Accessor_modifierContext
    }

	GET() {
	    return this.getToken(CSharpParser.GET, 0);
	};

	accessor_body() {
	    return this.getTypedRuleContext(Accessor_bodyContext,0);
	};

	SET() {
	    return this.getToken(CSharpParser.SET, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	accessor_modifier() {
	    return this.getTypedRuleContext(Accessor_modifierContext,0);
	};

	set_accessor_declaration() {
	    return this.getTypedRuleContext(Set_accessor_declarationContext,0);
	};

	get_accessor_declaration() {
	    return this.getTypedRuleContext(Get_accessor_declarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAccessor_declarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAccessor_declarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAccessor_declarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Get_accessor_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_get_accessor_declaration;
    }

	GET() {
	    return this.getToken(CSharpParser.GET, 0);
	};

	accessor_body() {
	    return this.getTypedRuleContext(Accessor_bodyContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	accessor_modifier() {
	    return this.getTypedRuleContext(Accessor_modifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGet_accessor_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGet_accessor_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGet_accessor_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Set_accessor_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_set_accessor_declaration;
    }

	SET() {
	    return this.getToken(CSharpParser.SET, 0);
	};

	accessor_body() {
	    return this.getTypedRuleContext(Accessor_bodyContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	accessor_modifier() {
	    return this.getTypedRuleContext(Accessor_modifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterSet_accessor_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitSet_accessor_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitSet_accessor_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Accessor_modifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_accessor_modifier;
    }

	PROTECTED() {
	    return this.getToken(CSharpParser.PROTECTED, 0);
	};

	INTERNAL() {
	    return this.getToken(CSharpParser.INTERNAL, 0);
	};

	PRIVATE() {
	    return this.getToken(CSharpParser.PRIVATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAccessor_modifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAccessor_modifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAccessor_modifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Accessor_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_accessor_body;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAccessor_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAccessor_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAccessor_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Event_accessor_declarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_event_accessor_declarations;
    }

	ADD() {
	    return this.getToken(CSharpParser.ADD, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	remove_accessor_declaration() {
	    return this.getTypedRuleContext(Remove_accessor_declarationContext,0);
	};

	REMOVE() {
	    return this.getToken(CSharpParser.REMOVE, 0);
	};

	add_accessor_declaration() {
	    return this.getTypedRuleContext(Add_accessor_declarationContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEvent_accessor_declarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEvent_accessor_declarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEvent_accessor_declarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Add_accessor_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_add_accessor_declaration;
    }

	ADD() {
	    return this.getToken(CSharpParser.ADD, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAdd_accessor_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAdd_accessor_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAdd_accessor_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Remove_accessor_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_remove_accessor_declaration;
    }

	REMOVE() {
	    return this.getToken(CSharpParser.REMOVE, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRemove_accessor_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRemove_accessor_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRemove_accessor_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Overloadable_operatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_overloadable_operator;
    }

	PLUS() {
	    return this.getToken(CSharpParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(CSharpParser.MINUS, 0);
	};

	BANG() {
	    return this.getToken(CSharpParser.BANG, 0);
	};

	TILDE() {
	    return this.getToken(CSharpParser.TILDE, 0);
	};

	OP_INC() {
	    return this.getToken(CSharpParser.OP_INC, 0);
	};

	OP_DEC() {
	    return this.getToken(CSharpParser.OP_DEC, 0);
	};

	TRUE() {
	    return this.getToken(CSharpParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(CSharpParser.FALSE, 0);
	};

	STAR() {
	    return this.getToken(CSharpParser.STAR, 0);
	};

	DIV() {
	    return this.getToken(CSharpParser.DIV, 0);
	};

	PERCENT() {
	    return this.getToken(CSharpParser.PERCENT, 0);
	};

	AMP() {
	    return this.getToken(CSharpParser.AMP, 0);
	};

	BITWISE_OR() {
	    return this.getToken(CSharpParser.BITWISE_OR, 0);
	};

	CARET() {
	    return this.getToken(CSharpParser.CARET, 0);
	};

	OP_LEFT_SHIFT() {
	    return this.getToken(CSharpParser.OP_LEFT_SHIFT, 0);
	};

	right_shift() {
	    return this.getTypedRuleContext(Right_shiftContext,0);
	};

	OP_EQ() {
	    return this.getToken(CSharpParser.OP_EQ, 0);
	};

	OP_NE() {
	    return this.getToken(CSharpParser.OP_NE, 0);
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	LT() {
	    return this.getToken(CSharpParser.LT, 0);
	};

	OP_GE() {
	    return this.getToken(CSharpParser.OP_GE, 0);
	};

	OP_LE() {
	    return this.getToken(CSharpParser.OP_LE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterOverloadable_operator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitOverloadable_operator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitOverloadable_operator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Conversion_operator_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_conversion_operator_declarator;
    }

	OPERATOR() {
	    return this.getToken(CSharpParser.OPERATOR, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	arg_declaration() {
	    return this.getTypedRuleContext(Arg_declarationContext,0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	IMPLICIT() {
	    return this.getToken(CSharpParser.IMPLICIT, 0);
	};

	EXPLICIT() {
	    return this.getToken(CSharpParser.EXPLICIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConversion_operator_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConversion_operator_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConversion_operator_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constructor_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constructor_initializer;
    }

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	BASE() {
	    return this.getToken(CSharpParser.BASE, 0);
	};

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstructor_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstructor_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstructor_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_body;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Struct_interfacesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_struct_interfaces;
    }

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	interface_type_list() {
	    return this.getTypedRuleContext(Interface_type_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStruct_interfaces(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStruct_interfaces(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStruct_interfaces(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Struct_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_struct_body;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	struct_member_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Struct_member_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Struct_member_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStruct_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStruct_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStruct_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Struct_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_struct_member_declaration;
    }

	common_member_declaration() {
	    return this.getTypedRuleContext(Common_member_declarationContext,0);
	};

	FIXED() {
	    return this.getToken(CSharpParser.FIXED, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	all_member_modifiers() {
	    return this.getTypedRuleContext(All_member_modifiersContext,0);
	};

	fixed_size_buffer_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fixed_size_buffer_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Fixed_size_buffer_declaratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStruct_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStruct_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStruct_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Array_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_array_type;
    }

	base_type() {
	    return this.getTypedRuleContext(Base_typeContext,0);
	};

	rank_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rank_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Rank_specifierContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.STAR);
	    } else {
	        return this.getToken(CSharpParser.STAR, i);
	    }
	};


	INTERR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.INTERR);
	    } else {
	        return this.getToken(CSharpParser.INTERR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterArray_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitArray_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitArray_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Rank_specifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_rank_specifier;
    }

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRank_specifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRank_specifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRank_specifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Array_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_array_initializer;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	variable_initializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variable_initializerContext);
	    } else {
	        return this.getTypedRuleContext(Variable_initializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterArray_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitArray_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitArray_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variant_type_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variant_type_parameter_list;
    }

	LT() {
	    return this.getToken(CSharpParser.LT, 0);
	};

	variant_type_parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Variant_type_parameterContext);
	    } else {
	        return this.getTypedRuleContext(Variant_type_parameterContext,i);
	    }
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariant_type_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariant_type_parameter_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariant_type_parameter_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variant_type_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variant_type_parameter;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	variance_annotation() {
	    return this.getTypedRuleContext(Variance_annotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariant_type_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariant_type_parameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariant_type_parameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Variance_annotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_variance_annotation;
    }

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	OUT() {
	    return this.getToken(CSharpParser.OUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterVariance_annotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitVariance_annotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitVariance_annotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_baseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_base;
    }

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	interface_type_list() {
	    return this.getTypedRuleContext(Interface_type_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_base(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_base(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_base(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_body;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	interface_member_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interface_member_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Interface_member_declarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_member_declaration;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	EVENT() {
	    return this.getToken(CSharpParser.EVENT, 0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	NEW() {
	    return this.getToken(CSharpParser.NEW, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	interface_accessors() {
	    return this.getTypedRuleContext(Interface_accessorsContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	UNSAFE() {
	    return this.getToken(CSharpParser.UNSAFE, 0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	type_parameter_list() {
	    return this.getTypedRuleContext(Type_parameter_listContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_accessorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_accessors;
    }

	GET() {
	    return this.getToken(CSharpParser.GET, 0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.SEMICOLON);
	    } else {
	        return this.getToken(CSharpParser.SEMICOLON, i);
	    }
	};


	SET() {
	    return this.getToken(CSharpParser.SET, 0);
	};

	attributes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributesContext);
	    } else {
	        return this.getTypedRuleContext(AttributesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_accessors(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_accessors(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_accessors(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enum_baseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_enum_base;
    }

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEnum_base(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEnum_base(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEnum_base(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enum_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_enum_body;
    }

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	enum_member_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Enum_member_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Enum_member_declarationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEnum_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEnum_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEnum_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enum_member_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_enum_member_declaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	attributes() {
	    return this.getTypedRuleContext(AttributesContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEnum_member_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEnum_member_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEnum_member_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Global_attribute_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_global_attribute_section;
    }

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	global_attribute_target() {
	    return this.getTypedRuleContext(Global_attribute_targetContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	attribute_list() {
	    return this.getTypedRuleContext(Attribute_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGlobal_attribute_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGlobal_attribute_section(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGlobal_attribute_section(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Global_attribute_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_global_attribute_target;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterGlobal_attribute_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitGlobal_attribute_target(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitGlobal_attribute_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attributes;
    }

	attribute_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Attribute_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Attribute_sectionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttributes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttributes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttributes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Attribute_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attribute_section;
    }

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	attribute_list() {
	    return this.getTypedRuleContext(Attribute_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	attribute_target() {
	    return this.getTypedRuleContext(Attribute_targetContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttribute_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttribute_section(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttribute_section(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Attribute_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attribute_target;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttribute_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttribute_target(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttribute_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Attribute_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attribute_list;
    }

	attribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeContext);
	    } else {
	        return this.getTypedRuleContext(AttributeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttribute_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttribute_list(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttribute_list(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attribute;
    }

	namespace_or_type_name() {
	    return this.getTypedRuleContext(Namespace_or_type_nameContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	attribute_argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Attribute_argumentContext);
	    } else {
	        return this.getTypedRuleContext(Attribute_argumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Attribute_argumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_attribute_argument;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterAttribute_argument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitAttribute_argument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitAttribute_argument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pointer_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_pointer_type;
    }

	STAR() {
	    return this.getToken(CSharpParser.STAR, 0);
	};

	simple_type() {
	    return this.getTypedRuleContext(Simple_typeContext,0);
	};

	class_type() {
	    return this.getTypedRuleContext(Class_typeContext,0);
	};

	rank_specifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Rank_specifierContext);
	    } else {
	        return this.getTypedRuleContext(Rank_specifierContext,i);
	    }
	};

	INTERR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.INTERR);
	    } else {
	        return this.getToken(CSharpParser.INTERR, i);
	    }
	};


	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterPointer_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitPointer_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitPointer_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_pointer_declaratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_pointer_declarators;
    }

	fixed_pointer_declarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fixed_pointer_declaratorContext);
	    } else {
	        return this.getTypedRuleContext(Fixed_pointer_declaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_pointer_declarators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_pointer_declarators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_pointer_declarators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_pointer_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_pointer_declarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	fixed_pointer_initializer() {
	    return this.getTypedRuleContext(Fixed_pointer_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_pointer_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_pointer_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_pointer_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_pointer_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_pointer_initializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AMP() {
	    return this.getToken(CSharpParser.AMP, 0);
	};

	stackalloc_initializer() {
	    return this.getTypedRuleContext(Stackalloc_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_pointer_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_pointer_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_pointer_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fixed_size_buffer_declaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_fixed_size_buffer_declarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterFixed_size_buffer_declarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitFixed_size_buffer_declarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitFixed_size_buffer_declarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Stackalloc_initializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_stackalloc_initializer;
    }

	STACKALLOC() {
	    return this.getToken(CSharpParser.STACKALLOC, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStackalloc_initializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStackalloc_initializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStackalloc_initializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Right_arrowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_right_arrow;
        this.first = null; // Token
        this.second = null; // Token
    }

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRight_arrow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRight_arrow(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRight_arrow(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Right_shiftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_right_shift;
        this.first = null; // Token
        this.second = null; // Token
    }

	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.GT);
	    } else {
	        return this.getToken(CSharpParser.GT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRight_shift(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRight_shift(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRight_shift(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Right_shift_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_right_shift_assignment;
        this.first = null; // Token
        this.second = null; // Token
    }

	GT() {
	    return this.getToken(CSharpParser.GT, 0);
	};

	OP_GE() {
	    return this.getToken(CSharpParser.OP_GE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterRight_shift_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitRight_shift_assignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitRight_shift_assignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_literal;
    }

	boolean_literal() {
	    return this.getTypedRuleContext(Boolean_literalContext,0);
	};

	string_literal() {
	    return this.getTypedRuleContext(String_literalContext,0);
	};

	INTEGER_LITERAL() {
	    return this.getToken(CSharpParser.INTEGER_LITERAL, 0);
	};

	HEX_INTEGER_LITERAL() {
	    return this.getToken(CSharpParser.HEX_INTEGER_LITERAL, 0);
	};

	BIN_INTEGER_LITERAL() {
	    return this.getToken(CSharpParser.BIN_INTEGER_LITERAL, 0);
	};

	REAL_LITERAL() {
	    return this.getToken(CSharpParser.REAL_LITERAL, 0);
	};

	CHARACTER_LITERAL() {
	    return this.getToken(CSharpParser.CHARACTER_LITERAL, 0);
	};

	NULL_() {
	    return this.getToken(CSharpParser.NULL_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Boolean_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_boolean_literal;
    }

	TRUE() {
	    return this.getToken(CSharpParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(CSharpParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterBoolean_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitBoolean_literal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitBoolean_literal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class String_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_string_literal;
    }

	interpolated_regular_string() {
	    return this.getTypedRuleContext(Interpolated_regular_stringContext,0);
	};

	interpolated_verbatium_string() {
	    return this.getTypedRuleContext(Interpolated_verbatium_stringContext,0);
	};

	REGULAR_STRING() {
	    return this.getToken(CSharpParser.REGULAR_STRING, 0);
	};

	VERBATIUM_STRING() {
	    return this.getToken(CSharpParser.VERBATIUM_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterString_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitString_literal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitString_literal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interpolated_regular_stringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interpolated_regular_string;
    }

	INTERPOLATED_REGULAR_STRING_START() {
	    return this.getToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0);
	};

	DOUBLE_QUOTE_INSIDE() {
	    return this.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0);
	};

	interpolated_regular_string_part = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interpolated_regular_string_partContext);
	    } else {
	        return this.getTypedRuleContext(Interpolated_regular_string_partContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterpolated_regular_string(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterpolated_regular_string(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterpolated_regular_string(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interpolated_verbatium_stringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interpolated_verbatium_string;
    }

	INTERPOLATED_VERBATIUM_STRING_START() {
	    return this.getToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0);
	};

	DOUBLE_QUOTE_INSIDE() {
	    return this.getToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0);
	};

	interpolated_verbatium_string_part = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Interpolated_verbatium_string_partContext);
	    } else {
	        return this.getTypedRuleContext(Interpolated_verbatium_string_partContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterpolated_verbatium_string(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterpolated_verbatium_string(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterpolated_verbatium_string(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interpolated_regular_string_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interpolated_regular_string_part;
    }

	interpolated_string_expression() {
	    return this.getTypedRuleContext(Interpolated_string_expressionContext,0);
	};

	DOUBLE_CURLY_INSIDE() {
	    return this.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0);
	};

	REGULAR_CHAR_INSIDE() {
	    return this.getToken(CSharpParser.REGULAR_CHAR_INSIDE, 0);
	};

	REGULAR_STRING_INSIDE() {
	    return this.getToken(CSharpParser.REGULAR_STRING_INSIDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterpolated_regular_string_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterpolated_regular_string_part(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterpolated_regular_string_part(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interpolated_verbatium_string_partContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interpolated_verbatium_string_part;
    }

	interpolated_string_expression() {
	    return this.getTypedRuleContext(Interpolated_string_expressionContext,0);
	};

	DOUBLE_CURLY_INSIDE() {
	    return this.getToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0);
	};

	VERBATIUM_DOUBLE_QUOTE_INSIDE() {
	    return this.getToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0);
	};

	VERBATIUM_INSIDE_STRING() {
	    return this.getToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterpolated_verbatium_string_part(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterpolated_verbatium_string_part(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterpolated_verbatium_string_part(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interpolated_string_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interpolated_string_expression;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.COMMA);
	    } else {
	        return this.getToken(CSharpParser.COMMA, i);
	    }
	};


	COLON() {
	    return this.getToken(CSharpParser.COLON, 0);
	};

	FORMAT_STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.FORMAT_STRING);
	    } else {
	        return this.getToken(CSharpParser.FORMAT_STRING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterpolated_string_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterpolated_string_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterpolated_string_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_keyword;
    }

	ABSTRACT() {
	    return this.getToken(CSharpParser.ABSTRACT, 0);
	};

	AS() {
	    return this.getToken(CSharpParser.AS, 0);
	};

	BASE() {
	    return this.getToken(CSharpParser.BASE, 0);
	};

	BOOL() {
	    return this.getToken(CSharpParser.BOOL, 0);
	};

	BREAK() {
	    return this.getToken(CSharpParser.BREAK, 0);
	};

	BYTE() {
	    return this.getToken(CSharpParser.BYTE, 0);
	};

	CASE() {
	    return this.getToken(CSharpParser.CASE, 0);
	};

	CATCH() {
	    return this.getToken(CSharpParser.CATCH, 0);
	};

	CHAR() {
	    return this.getToken(CSharpParser.CHAR, 0);
	};

	CHECKED() {
	    return this.getToken(CSharpParser.CHECKED, 0);
	};

	CLASS() {
	    return this.getToken(CSharpParser.CLASS, 0);
	};

	CONST() {
	    return this.getToken(CSharpParser.CONST, 0);
	};

	CONTINUE() {
	    return this.getToken(CSharpParser.CONTINUE, 0);
	};

	DECIMAL() {
	    return this.getToken(CSharpParser.DECIMAL, 0);
	};

	DEFAULT() {
	    return this.getToken(CSharpParser.DEFAULT, 0);
	};

	DELEGATE() {
	    return this.getToken(CSharpParser.DELEGATE, 0);
	};

	DO() {
	    return this.getToken(CSharpParser.DO, 0);
	};

	DOUBLE() {
	    return this.getToken(CSharpParser.DOUBLE, 0);
	};

	ELSE() {
	    return this.getToken(CSharpParser.ELSE, 0);
	};

	ENUM() {
	    return this.getToken(CSharpParser.ENUM, 0);
	};

	EVENT() {
	    return this.getToken(CSharpParser.EVENT, 0);
	};

	EXPLICIT() {
	    return this.getToken(CSharpParser.EXPLICIT, 0);
	};

	EXTERN() {
	    return this.getToken(CSharpParser.EXTERN, 0);
	};

	FALSE() {
	    return this.getToken(CSharpParser.FALSE, 0);
	};

	FINALLY() {
	    return this.getToken(CSharpParser.FINALLY, 0);
	};

	FIXED() {
	    return this.getToken(CSharpParser.FIXED, 0);
	};

	FLOAT() {
	    return this.getToken(CSharpParser.FLOAT, 0);
	};

	FOR() {
	    return this.getToken(CSharpParser.FOR, 0);
	};

	FOREACH() {
	    return this.getToken(CSharpParser.FOREACH, 0);
	};

	GOTO() {
	    return this.getToken(CSharpParser.GOTO, 0);
	};

	IF() {
	    return this.getToken(CSharpParser.IF, 0);
	};

	IMPLICIT() {
	    return this.getToken(CSharpParser.IMPLICIT, 0);
	};

	IN() {
	    return this.getToken(CSharpParser.IN, 0);
	};

	INT() {
	    return this.getToken(CSharpParser.INT, 0);
	};

	INTERFACE() {
	    return this.getToken(CSharpParser.INTERFACE, 0);
	};

	INTERNAL() {
	    return this.getToken(CSharpParser.INTERNAL, 0);
	};

	IS() {
	    return this.getToken(CSharpParser.IS, 0);
	};

	LOCK() {
	    return this.getToken(CSharpParser.LOCK, 0);
	};

	LONG() {
	    return this.getToken(CSharpParser.LONG, 0);
	};

	NAMESPACE() {
	    return this.getToken(CSharpParser.NAMESPACE, 0);
	};

	NEW() {
	    return this.getToken(CSharpParser.NEW, 0);
	};

	NULL_() {
	    return this.getToken(CSharpParser.NULL_, 0);
	};

	OBJECT() {
	    return this.getToken(CSharpParser.OBJECT, 0);
	};

	OPERATOR() {
	    return this.getToken(CSharpParser.OPERATOR, 0);
	};

	OUT() {
	    return this.getToken(CSharpParser.OUT, 0);
	};

	OVERRIDE() {
	    return this.getToken(CSharpParser.OVERRIDE, 0);
	};

	PARAMS() {
	    return this.getToken(CSharpParser.PARAMS, 0);
	};

	PRIVATE() {
	    return this.getToken(CSharpParser.PRIVATE, 0);
	};

	PROTECTED() {
	    return this.getToken(CSharpParser.PROTECTED, 0);
	};

	PUBLIC() {
	    return this.getToken(CSharpParser.PUBLIC, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	RETURN() {
	    return this.getToken(CSharpParser.RETURN, 0);
	};

	SBYTE() {
	    return this.getToken(CSharpParser.SBYTE, 0);
	};

	SEALED() {
	    return this.getToken(CSharpParser.SEALED, 0);
	};

	SHORT() {
	    return this.getToken(CSharpParser.SHORT, 0);
	};

	SIZEOF() {
	    return this.getToken(CSharpParser.SIZEOF, 0);
	};

	STACKALLOC() {
	    return this.getToken(CSharpParser.STACKALLOC, 0);
	};

	STATIC() {
	    return this.getToken(CSharpParser.STATIC, 0);
	};

	STRING() {
	    return this.getToken(CSharpParser.STRING, 0);
	};

	STRUCT() {
	    return this.getToken(CSharpParser.STRUCT, 0);
	};

	SWITCH() {
	    return this.getToken(CSharpParser.SWITCH, 0);
	};

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	THROW() {
	    return this.getToken(CSharpParser.THROW, 0);
	};

	TRUE() {
	    return this.getToken(CSharpParser.TRUE, 0);
	};

	TRY() {
	    return this.getToken(CSharpParser.TRY, 0);
	};

	TYPEOF() {
	    return this.getToken(CSharpParser.TYPEOF, 0);
	};

	UINT() {
	    return this.getToken(CSharpParser.UINT, 0);
	};

	ULONG() {
	    return this.getToken(CSharpParser.ULONG, 0);
	};

	UNCHECKED() {
	    return this.getToken(CSharpParser.UNCHECKED, 0);
	};

	UNMANAGED() {
	    return this.getToken(CSharpParser.UNMANAGED, 0);
	};

	UNSAFE() {
	    return this.getToken(CSharpParser.UNSAFE, 0);
	};

	USHORT() {
	    return this.getToken(CSharpParser.USHORT, 0);
	};

	USING() {
	    return this.getToken(CSharpParser.USING, 0);
	};

	VIRTUAL() {
	    return this.getToken(CSharpParser.VIRTUAL, 0);
	};

	VOID() {
	    return this.getToken(CSharpParser.VOID, 0);
	};

	VOLATILE() {
	    return this.getToken(CSharpParser.VOLATILE, 0);
	};

	WHILE() {
	    return this.getToken(CSharpParser.WHILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_class_definition;
    }

	CLASS() {
	    return this.getToken(CSharpParser.CLASS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	class_body() {
	    return this.getTypedRuleContext(Class_bodyContext,0);
	};

	type_parameter_list() {
	    return this.getTypedRuleContext(Type_parameter_listContext,0);
	};

	class_base() {
	    return this.getTypedRuleContext(Class_baseContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterClass_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitClass_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitClass_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Struct_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_struct_definition;
    }

	STRUCT() {
	    return this.getToken(CSharpParser.STRUCT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	struct_body() {
	    return this.getTypedRuleContext(Struct_bodyContext,0);
	};

	type_parameter_list() {
	    return this.getTypedRuleContext(Type_parameter_listContext,0);
	};

	struct_interfaces() {
	    return this.getTypedRuleContext(Struct_interfacesContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	READONLY() {
	    return this.getToken(CSharpParser.READONLY, 0);
	};

	REF() {
	    return this.getToken(CSharpParser.REF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterStruct_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitStruct_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitStruct_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Interface_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_interface_definition;
    }

	INTERFACE() {
	    return this.getToken(CSharpParser.INTERFACE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	class_body() {
	    return this.getTypedRuleContext(Class_bodyContext,0);
	};

	variant_type_parameter_list() {
	    return this.getTypedRuleContext(Variant_type_parameter_listContext,0);
	};

	interface_base() {
	    return this.getTypedRuleContext(Interface_baseContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterInterface_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitInterface_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitInterface_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Enum_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_enum_definition;
    }

	ENUM() {
	    return this.getToken(CSharpParser.ENUM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enum_body() {
	    return this.getTypedRuleContext(Enum_bodyContext,0);
	};

	enum_base() {
	    return this.getTypedRuleContext(Enum_baseContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEnum_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEnum_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEnum_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Delegate_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_delegate_definition;
    }

	DELEGATE() {
	    return this.getToken(CSharpParser.DELEGATE, 0);
	};

	return_type() {
	    return this.getTypedRuleContext(Return_typeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	variant_type_parameter_list() {
	    return this.getTypedRuleContext(Variant_type_parameter_listContext,0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterDelegate_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitDelegate_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitDelegate_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Event_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_event_declaration;
    }

	EVENT() {
	    return this.getToken(CSharpParser.EVENT, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	variable_declarators() {
	    return this.getTypedRuleContext(Variable_declaratorsContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	member_name() {
	    return this.getTypedRuleContext(Member_nameContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	event_accessor_declarations() {
	    return this.getTypedRuleContext(Event_accessor_declarationsContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterEvent_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitEvent_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitEvent_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Field_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_field_declaration;
    }

	variable_declarators() {
	    return this.getTypedRuleContext(Variable_declaratorsContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterField_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitField_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitField_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Property_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_property_declaration;
    }

	member_name() {
	    return this.getTypedRuleContext(Member_nameContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	accessor_declarations() {
	    return this.getTypedRuleContext(Accessor_declarationsContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	variable_initializer() {
	    return this.getTypedRuleContext(Variable_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterProperty_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitProperty_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitProperty_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constant_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constant_declaration;
    }

	CONST() {
	    return this.getToken(CSharpParser.CONST, 0);
	};

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	constant_declarators() {
	    return this.getTypedRuleContext(Constant_declaratorsContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstant_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstant_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstant_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Indexer_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_indexer_declaration;
    }

	THIS() {
	    return this.getToken(CSharpParser.THIS, 0);
	};

	OPEN_BRACKET() {
	    return this.getToken(CSharpParser.OPEN_BRACKET, 0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	CLOSE_BRACKET() {
	    return this.getToken(CSharpParser.CLOSE_BRACKET, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(CSharpParser.OPEN_BRACE, 0);
	};

	accessor_declarations() {
	    return this.getTypedRuleContext(Accessor_declarationsContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(CSharpParser.CLOSE_BRACE, 0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIndexer_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIndexer_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIndexer_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Destructor_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_destructor_definition;
    }

	TILDE() {
	    return this.getToken(CSharpParser.TILDE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterDestructor_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitDestructor_definition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitDestructor_definition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Constructor_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_constructor_declaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	constructor_initializer() {
	    return this.getTypedRuleContext(Constructor_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterConstructor_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitConstructor_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitConstructor_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_method_declaration;
    }

	method_member_name() {
	    return this.getTypedRuleContext(Method_member_nameContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	method_body() {
	    return this.getTypedRuleContext(Method_bodyContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	type_parameter_list() {
	    return this.getTypedRuleContext(Type_parameter_listContext,0);
	};

	formal_parameter_list() {
	    return this.getTypedRuleContext(Formal_parameter_listContext,0);
	};

	type_parameter_constraints_clauses() {
	    return this.getTypedRuleContext(Type_parameter_constraints_clausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMethod_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMethod_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMethod_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Method_member_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_method_member_name;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOUBLE_COLON() {
	    return this.getToken(CSharpParser.DOUBLE_COLON, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.DOT);
	    } else {
	        return this.getToken(CSharpParser.DOT, i);
	    }
	};


	type_argument_list = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_argument_listContext);
	    } else {
	        return this.getTypedRuleContext(Type_argument_listContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMethod_member_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMethod_member_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMethod_member_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Operator_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_operator_declaration;
    }

	OPERATOR() {
	    return this.getToken(CSharpParser.OPERATOR, 0);
	};

	overloadable_operator() {
	    return this.getTypedRuleContext(Overloadable_operatorContext,0);
	};

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	arg_declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arg_declarationContext);
	    } else {
	        return this.getTypedRuleContext(Arg_declarationContext,i);
	    }
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	right_arrow() {
	    return this.getTypedRuleContext(Right_arrowContext,0);
	};

	throwable_expression() {
	    return this.getTypedRuleContext(Throwable_expressionContext,0);
	};

	SEMICOLON() {
	    return this.getToken(CSharpParser.SEMICOLON, 0);
	};

	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CSharpParser.IN);
	    } else {
	        return this.getToken(CSharpParser.IN, i);
	    }
	};


	COMMA() {
	    return this.getToken(CSharpParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterOperator_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitOperator_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitOperator_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arg_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_arg_declaration;
    }

	type_() {
	    return this.getTypedRuleContext(Type_Context,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGNMENT() {
	    return this.getToken(CSharpParser.ASSIGNMENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterArg_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitArg_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitArg_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Method_invocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_method_invocation;
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterMethod_invocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitMethod_invocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitMethod_invocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_creation_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_object_creation_expression;
    }

	OPEN_PARENS() {
	    return this.getToken(CSharpParser.OPEN_PARENS, 0);
	};

	CLOSE_PARENS() {
	    return this.getToken(CSharpParser.CLOSE_PARENS, 0);
	};

	argument_list() {
	    return this.getTypedRuleContext(Argument_listContext,0);
	};

	object_or_collection_initializer() {
	    return this.getTypedRuleContext(Object_or_collection_initializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterObject_creation_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitObject_creation_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitObject_creation_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CSharpParser.RULE_identifier;
    }

	IDENTIFIER() {
	    return this.getToken(CSharpParser.IDENTIFIER, 0);
	};

	ADD() {
	    return this.getToken(CSharpParser.ADD, 0);
	};

	ALIAS() {
	    return this.getToken(CSharpParser.ALIAS, 0);
	};

	ARGLIST() {
	    return this.getToken(CSharpParser.ARGLIST, 0);
	};

	ASCENDING() {
	    return this.getToken(CSharpParser.ASCENDING, 0);
	};

	ASYNC() {
	    return this.getToken(CSharpParser.ASYNC, 0);
	};

	AWAIT() {
	    return this.getToken(CSharpParser.AWAIT, 0);
	};

	BY() {
	    return this.getToken(CSharpParser.BY, 0);
	};

	DESCENDING() {
	    return this.getToken(CSharpParser.DESCENDING, 0);
	};

	DYNAMIC() {
	    return this.getToken(CSharpParser.DYNAMIC, 0);
	};

	EQUALS() {
	    return this.getToken(CSharpParser.EQUALS, 0);
	};

	FROM() {
	    return this.getToken(CSharpParser.FROM, 0);
	};

	GET() {
	    return this.getToken(CSharpParser.GET, 0);
	};

	GROUP() {
	    return this.getToken(CSharpParser.GROUP, 0);
	};

	INTO() {
	    return this.getToken(CSharpParser.INTO, 0);
	};

	JOIN() {
	    return this.getToken(CSharpParser.JOIN, 0);
	};

	LET() {
	    return this.getToken(CSharpParser.LET, 0);
	};

	NAMEOF() {
	    return this.getToken(CSharpParser.NAMEOF, 0);
	};

	ON() {
	    return this.getToken(CSharpParser.ON, 0);
	};

	ORDERBY() {
	    return this.getToken(CSharpParser.ORDERBY, 0);
	};

	PARTIAL() {
	    return this.getToken(CSharpParser.PARTIAL, 0);
	};

	REMOVE() {
	    return this.getToken(CSharpParser.REMOVE, 0);
	};

	SELECT() {
	    return this.getToken(CSharpParser.SELECT, 0);
	};

	SET() {
	    return this.getToken(CSharpParser.SET, 0);
	};

	UNMANAGED() {
	    return this.getToken(CSharpParser.UNMANAGED, 0);
	};

	VAR() {
	    return this.getToken(CSharpParser.VAR, 0);
	};

	WHEN() {
	    return this.getToken(CSharpParser.WHEN, 0);
	};

	WHERE() {
	    return this.getToken(CSharpParser.WHERE, 0);
	};

	YIELD() {
	    return this.getToken(CSharpParser.YIELD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CSharpParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CSharpParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




CSharpParser.Compilation_unitContext = Compilation_unitContext; 
CSharpParser.Namespace_or_type_nameContext = Namespace_or_type_nameContext; 
CSharpParser.Type_Context = Type_Context; 
CSharpParser.Base_typeContext = Base_typeContext; 
CSharpParser.Tuple_typeContext = Tuple_typeContext; 
CSharpParser.Tuple_elementContext = Tuple_elementContext; 
CSharpParser.Simple_typeContext = Simple_typeContext; 
CSharpParser.Numeric_typeContext = Numeric_typeContext; 
CSharpParser.Integral_typeContext = Integral_typeContext; 
CSharpParser.Floating_point_typeContext = Floating_point_typeContext; 
CSharpParser.Class_typeContext = Class_typeContext; 
CSharpParser.Type_argument_listContext = Type_argument_listContext; 
CSharpParser.Argument_listContext = Argument_listContext; 
CSharpParser.ArgumentContext = ArgumentContext; 
CSharpParser.ExpressionContext = ExpressionContext; 
CSharpParser.Non_assignment_expressionContext = Non_assignment_expressionContext; 
CSharpParser.AssignmentContext = AssignmentContext; 
CSharpParser.Assignment_operatorContext = Assignment_operatorContext; 
CSharpParser.Conditional_expressionContext = Conditional_expressionContext; 
CSharpParser.Null_coalescing_expressionContext = Null_coalescing_expressionContext; 
CSharpParser.Conditional_or_expressionContext = Conditional_or_expressionContext; 
CSharpParser.Conditional_and_expressionContext = Conditional_and_expressionContext; 
CSharpParser.Inclusive_or_expressionContext = Inclusive_or_expressionContext; 
CSharpParser.Exclusive_or_expressionContext = Exclusive_or_expressionContext; 
CSharpParser.And_expressionContext = And_expressionContext; 
CSharpParser.Equality_expressionContext = Equality_expressionContext; 
CSharpParser.Relational_expressionContext = Relational_expressionContext; 
CSharpParser.Shift_expressionContext = Shift_expressionContext; 
CSharpParser.Additive_expressionContext = Additive_expressionContext; 
CSharpParser.Multiplicative_expressionContext = Multiplicative_expressionContext; 
CSharpParser.Switch_expressionContext = Switch_expressionContext; 
CSharpParser.Switch_expression_armsContext = Switch_expression_armsContext; 
CSharpParser.Switch_expression_armContext = Switch_expression_armContext; 
CSharpParser.Range_expressionContext = Range_expressionContext; 
CSharpParser.Unary_expressionContext = Unary_expressionContext; 
CSharpParser.Primary_expressionContext = Primary_expressionContext; 
CSharpParser.Primary_expression_startContext = Primary_expression_startContext; 
CSharpParser.Throwable_expressionContext = Throwable_expressionContext; 
CSharpParser.Throw_expressionContext = Throw_expressionContext; 
CSharpParser.Member_accessContext = Member_accessContext; 
CSharpParser.Bracket_expressionContext = Bracket_expressionContext; 
CSharpParser.Indexer_argumentContext = Indexer_argumentContext; 
CSharpParser.Predefined_typeContext = Predefined_typeContext; 
CSharpParser.Expression_listContext = Expression_listContext; 
CSharpParser.Object_or_collection_initializerContext = Object_or_collection_initializerContext; 
CSharpParser.Object_initializerContext = Object_initializerContext; 
CSharpParser.Member_initializer_listContext = Member_initializer_listContext; 
CSharpParser.Member_initializerContext = Member_initializerContext; 
CSharpParser.Initializer_valueContext = Initializer_valueContext; 
CSharpParser.Collection_initializerContext = Collection_initializerContext; 
CSharpParser.Element_initializerContext = Element_initializerContext; 
CSharpParser.Anonymous_object_initializerContext = Anonymous_object_initializerContext; 
CSharpParser.Member_declarator_listContext = Member_declarator_listContext; 
CSharpParser.Member_declaratorContext = Member_declaratorContext; 
CSharpParser.Unbound_type_nameContext = Unbound_type_nameContext; 
CSharpParser.Generic_dimension_specifierContext = Generic_dimension_specifierContext; 
CSharpParser.IsTypeContext = IsTypeContext; 
CSharpParser.IsTypePatternArmsContext = IsTypePatternArmsContext; 
CSharpParser.IsTypePatternArmContext = IsTypePatternArmContext; 
CSharpParser.Lambda_expressionContext = Lambda_expressionContext; 
CSharpParser.Anonymous_function_signatureContext = Anonymous_function_signatureContext; 
CSharpParser.Explicit_anonymous_function_parameter_listContext = Explicit_anonymous_function_parameter_listContext; 
CSharpParser.Explicit_anonymous_function_parameterContext = Explicit_anonymous_function_parameterContext; 
CSharpParser.Implicit_anonymous_function_parameter_listContext = Implicit_anonymous_function_parameter_listContext; 
CSharpParser.Anonymous_function_bodyContext = Anonymous_function_bodyContext; 
CSharpParser.Query_expressionContext = Query_expressionContext; 
CSharpParser.From_clauseContext = From_clauseContext; 
CSharpParser.Query_bodyContext = Query_bodyContext; 
CSharpParser.Query_body_clauseContext = Query_body_clauseContext; 
CSharpParser.Let_clauseContext = Let_clauseContext; 
CSharpParser.Where_clauseContext = Where_clauseContext; 
CSharpParser.Combined_join_clauseContext = Combined_join_clauseContext; 
CSharpParser.Orderby_clauseContext = Orderby_clauseContext; 
CSharpParser.OrderingContext = OrderingContext; 
CSharpParser.Select_or_group_clauseContext = Select_or_group_clauseContext; 
CSharpParser.Query_continuationContext = Query_continuationContext; 
CSharpParser.StatementContext = StatementContext; 
CSharpParser.DeclarationStatementContext = DeclarationStatementContext; 
CSharpParser.Local_function_declarationContext = Local_function_declarationContext; 
CSharpParser.Local_function_headerContext = Local_function_headerContext; 
CSharpParser.Local_function_modifiersContext = Local_function_modifiersContext; 
CSharpParser.Local_function_bodyContext = Local_function_bodyContext; 
CSharpParser.Labeled_StatementContext = Labeled_StatementContext; 
CSharpParser.Embedded_statementContext = Embedded_statementContext; 
CSharpParser.Simple_embedded_statementContext = Simple_embedded_statementContext; 
CSharpParser.BlockContext = BlockContext; 
CSharpParser.Local_variable_declarationContext = Local_variable_declarationContext; 
CSharpParser.Local_variable_typeContext = Local_variable_typeContext; 
CSharpParser.Local_variable_declaratorContext = Local_variable_declaratorContext; 
CSharpParser.Local_variable_initializerContext = Local_variable_initializerContext; 
CSharpParser.Local_constant_declarationContext = Local_constant_declarationContext; 
CSharpParser.If_bodyContext = If_bodyContext; 
CSharpParser.Switch_sectionContext = Switch_sectionContext; 
CSharpParser.Switch_labelContext = Switch_labelContext; 
CSharpParser.Case_guardContext = Case_guardContext; 
CSharpParser.Statement_listContext = Statement_listContext; 
CSharpParser.For_initializerContext = For_initializerContext; 
CSharpParser.For_iteratorContext = For_iteratorContext; 
CSharpParser.Catch_clausesContext = Catch_clausesContext; 
CSharpParser.Specific_catch_clauseContext = Specific_catch_clauseContext; 
CSharpParser.General_catch_clauseContext = General_catch_clauseContext; 
CSharpParser.Exception_filterContext = Exception_filterContext; 
CSharpParser.Finally_clauseContext = Finally_clauseContext; 
CSharpParser.Resource_acquisitionContext = Resource_acquisitionContext; 
CSharpParser.Namespace_declarationContext = Namespace_declarationContext; 
CSharpParser.Qualified_identifierContext = Qualified_identifierContext; 
CSharpParser.Namespace_bodyContext = Namespace_bodyContext; 
CSharpParser.Extern_alias_directivesContext = Extern_alias_directivesContext; 
CSharpParser.Extern_alias_directiveContext = Extern_alias_directiveContext; 
CSharpParser.Using_directivesContext = Using_directivesContext; 
CSharpParser.Using_directiveContext = Using_directiveContext; 
CSharpParser.Namespace_member_declarationsContext = Namespace_member_declarationsContext; 
CSharpParser.Namespace_member_declarationContext = Namespace_member_declarationContext; 
CSharpParser.Type_declarationContext = Type_declarationContext; 
CSharpParser.Qualified_alias_memberContext = Qualified_alias_memberContext; 
CSharpParser.Type_parameter_listContext = Type_parameter_listContext; 
CSharpParser.Type_parameterContext = Type_parameterContext; 
CSharpParser.Class_baseContext = Class_baseContext; 
CSharpParser.Interface_type_listContext = Interface_type_listContext; 
CSharpParser.Type_parameter_constraints_clausesContext = Type_parameter_constraints_clausesContext; 
CSharpParser.Type_parameter_constraints_clauseContext = Type_parameter_constraints_clauseContext; 
CSharpParser.Type_parameter_constraintsContext = Type_parameter_constraintsContext; 
CSharpParser.Primary_constraintContext = Primary_constraintContext; 
CSharpParser.Secondary_constraintsContext = Secondary_constraintsContext; 
CSharpParser.Constructor_constraintContext = Constructor_constraintContext; 
CSharpParser.Class_bodyContext = Class_bodyContext; 
CSharpParser.Class_member_declarationsContext = Class_member_declarationsContext; 
CSharpParser.Class_member_declarationContext = Class_member_declarationContext; 
CSharpParser.All_member_modifiersContext = All_member_modifiersContext; 
CSharpParser.All_member_modifierContext = All_member_modifierContext; 
CSharpParser.Common_member_declarationContext = Common_member_declarationContext; 
CSharpParser.Typed_member_declarationContext = Typed_member_declarationContext; 
CSharpParser.Constant_declaratorsContext = Constant_declaratorsContext; 
CSharpParser.Constant_declaratorContext = Constant_declaratorContext; 
CSharpParser.Variable_declaratorsContext = Variable_declaratorsContext; 
CSharpParser.Variable_declaratorContext = Variable_declaratorContext; 
CSharpParser.Variable_initializerContext = Variable_initializerContext; 
CSharpParser.Return_typeContext = Return_typeContext; 
CSharpParser.Member_nameContext = Member_nameContext; 
CSharpParser.Method_bodyContext = Method_bodyContext; 
CSharpParser.Formal_parameter_listContext = Formal_parameter_listContext; 
CSharpParser.Fixed_parametersContext = Fixed_parametersContext; 
CSharpParser.Fixed_parameterContext = Fixed_parameterContext; 
CSharpParser.Parameter_modifierContext = Parameter_modifierContext; 
CSharpParser.Parameter_arrayContext = Parameter_arrayContext; 
CSharpParser.Accessor_declarationsContext = Accessor_declarationsContext; 
CSharpParser.Get_accessor_declarationContext = Get_accessor_declarationContext; 
CSharpParser.Set_accessor_declarationContext = Set_accessor_declarationContext; 
CSharpParser.Accessor_modifierContext = Accessor_modifierContext; 
CSharpParser.Accessor_bodyContext = Accessor_bodyContext; 
CSharpParser.Event_accessor_declarationsContext = Event_accessor_declarationsContext; 
CSharpParser.Add_accessor_declarationContext = Add_accessor_declarationContext; 
CSharpParser.Remove_accessor_declarationContext = Remove_accessor_declarationContext; 
CSharpParser.Overloadable_operatorContext = Overloadable_operatorContext; 
CSharpParser.Conversion_operator_declaratorContext = Conversion_operator_declaratorContext; 
CSharpParser.Constructor_initializerContext = Constructor_initializerContext; 
CSharpParser.BodyContext = BodyContext; 
CSharpParser.Struct_interfacesContext = Struct_interfacesContext; 
CSharpParser.Struct_bodyContext = Struct_bodyContext; 
CSharpParser.Struct_member_declarationContext = Struct_member_declarationContext; 
CSharpParser.Array_typeContext = Array_typeContext; 
CSharpParser.Rank_specifierContext = Rank_specifierContext; 
CSharpParser.Array_initializerContext = Array_initializerContext; 
CSharpParser.Variant_type_parameter_listContext = Variant_type_parameter_listContext; 
CSharpParser.Variant_type_parameterContext = Variant_type_parameterContext; 
CSharpParser.Variance_annotationContext = Variance_annotationContext; 
CSharpParser.Interface_baseContext = Interface_baseContext; 
CSharpParser.Interface_bodyContext = Interface_bodyContext; 
CSharpParser.Interface_member_declarationContext = Interface_member_declarationContext; 
CSharpParser.Interface_accessorsContext = Interface_accessorsContext; 
CSharpParser.Enum_baseContext = Enum_baseContext; 
CSharpParser.Enum_bodyContext = Enum_bodyContext; 
CSharpParser.Enum_member_declarationContext = Enum_member_declarationContext; 
CSharpParser.Global_attribute_sectionContext = Global_attribute_sectionContext; 
CSharpParser.Global_attribute_targetContext = Global_attribute_targetContext; 
CSharpParser.AttributesContext = AttributesContext; 
CSharpParser.Attribute_sectionContext = Attribute_sectionContext; 
CSharpParser.Attribute_targetContext = Attribute_targetContext; 
CSharpParser.Attribute_listContext = Attribute_listContext; 
CSharpParser.AttributeContext = AttributeContext; 
CSharpParser.Attribute_argumentContext = Attribute_argumentContext; 
CSharpParser.Pointer_typeContext = Pointer_typeContext; 
CSharpParser.Fixed_pointer_declaratorsContext = Fixed_pointer_declaratorsContext; 
CSharpParser.Fixed_pointer_declaratorContext = Fixed_pointer_declaratorContext; 
CSharpParser.Fixed_pointer_initializerContext = Fixed_pointer_initializerContext; 
CSharpParser.Fixed_size_buffer_declaratorContext = Fixed_size_buffer_declaratorContext; 
CSharpParser.Stackalloc_initializerContext = Stackalloc_initializerContext; 
CSharpParser.Right_arrowContext = Right_arrowContext; 
CSharpParser.Right_shiftContext = Right_shiftContext; 
CSharpParser.Right_shift_assignmentContext = Right_shift_assignmentContext; 
CSharpParser.LiteralContext = LiteralContext; 
CSharpParser.Boolean_literalContext = Boolean_literalContext; 
CSharpParser.String_literalContext = String_literalContext; 
CSharpParser.Interpolated_regular_stringContext = Interpolated_regular_stringContext; 
CSharpParser.Interpolated_verbatium_stringContext = Interpolated_verbatium_stringContext; 
CSharpParser.Interpolated_regular_string_partContext = Interpolated_regular_string_partContext; 
CSharpParser.Interpolated_verbatium_string_partContext = Interpolated_verbatium_string_partContext; 
CSharpParser.Interpolated_string_expressionContext = Interpolated_string_expressionContext; 
CSharpParser.KeywordContext = KeywordContext; 
CSharpParser.Class_definitionContext = Class_definitionContext; 
CSharpParser.Struct_definitionContext = Struct_definitionContext; 
CSharpParser.Interface_definitionContext = Interface_definitionContext; 
CSharpParser.Enum_definitionContext = Enum_definitionContext; 
CSharpParser.Delegate_definitionContext = Delegate_definitionContext; 
CSharpParser.Event_declarationContext = Event_declarationContext; 
CSharpParser.Field_declarationContext = Field_declarationContext; 
CSharpParser.Property_declarationContext = Property_declarationContext; 
CSharpParser.Constant_declarationContext = Constant_declarationContext; 
CSharpParser.Indexer_declarationContext = Indexer_declarationContext; 
CSharpParser.Destructor_definitionContext = Destructor_definitionContext; 
CSharpParser.Constructor_declarationContext = Constructor_declarationContext; 
CSharpParser.Method_declarationContext = Method_declarationContext; 
CSharpParser.Method_member_nameContext = Method_member_nameContext; 
CSharpParser.Operator_declarationContext = Operator_declarationContext; 
CSharpParser.Arg_declarationContext = Arg_declarationContext; 
CSharpParser.Method_invocationContext = Method_invocationContext; 
CSharpParser.Object_creation_expressionContext = Object_creation_expressionContext; 
CSharpParser.IdentifierContext = IdentifierContext; 
